[
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "title": "Hands-on_Ex03",
    "section": "",
    "text": "I will be learning how to create interactive data visualization by using functions provided by ggiraph and plotlyr packages.\nI will also be learning how to create animated data visualization by using gganimate and plotly r packages. In addition, I will be able to reshape data using tidyr package, and (ii) process, wrangle and transform data by using dplyr package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#install-launch-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#install-launch-r-packages",
    "title": "Hands-on_Ex03",
    "section": "1.1.1. Install & Launch R packages",
    "text": "1.1.1. Install & Launch R packages\nInstall and Launch the following R packages:\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure.\n\n\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#import-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#import-data",
    "title": "Hands-on_Ex03",
    "section": "1.1.2. Import Data",
    "text": "1.1.2. Import Data\nThe code chunk below read_csv() of readr package will import the Exam_data.csv and save as exam_data as a tibble data frame.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#install-and-launch-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#install-and-launch-r-packages",
    "title": "Hands-on_Ex03",
    "section": "1.2.1. Install and launch R packages",
    "text": "1.2.1. Install and launch R packages\nInstall and Launch the following R packages:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#import-data-1",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#import-data-1",
    "title": "Hands-on_Ex03",
    "section": "1.2.2 Import Data",
    "text": "1.2.2 Import Data\nImport data worksheet from GlobalPopulation Excel workbook.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\", sheet=\"Data\")%&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#ggiraph-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#ggiraph-methods",
    "title": "Hands-on_Ex03",
    "section": "2.1.1 ggiraph Methods",
    "text": "2.1.1 ggiraph Methods\n\nTooltip: a column of datasets that contain tooltips to be displayed when the mouse is over elements\nData_id: a column of datasets that contain an id to be associated with elements.\nOnclick: a column of datasets that contain JavaScript function to be executed when elements are clicked.\n\n\n2.1.1.1 Tooltip effect\nThere are two steps that are needed (Step 1 and 2),\n\nInteractive version of ggplot2 is used to create the basic graph\ngirafe() is then utilized to generate an svg object to be displayed on an html page\nCustomize tooltip style\nDisplay statistics on tooltip\n\n\nStep 1: Basic graphStep 2: Add in tooltip effectStep 3: Customization tooltip styleStep 4: Statistics using tooltip\n\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\np#\n\n\n\n\n\n\n\n\n\n\nBy using the tooltip effect, there is interactivity by hovering the mouse pointer on an data point of interest where the information listed such as the student’s ID will be displayed.\nWe are able to display multiple information such as Name, Class, Race and Gender on tooltip as shown in the code chunk below.\n\nexam_data$tooltip &lt;- c(paste0(\"Name =\", exam_data$ID, \"\\n Class =\", exam_data$CLASS, \"\\n Race =\", exam_data$RACE, \"\\n Gender =\", exam_data$GENDER))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,          \n                     breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\nOne example uses opts_tooltip() of ggiraph by adding in css declarations such as changing the background and font colours.\n\ntooltip_css &lt;- \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(         \n    aes(tooltip = ID),              \n    stackgroups = TRUE,             \n    binwidth = 1,                   \n    method = \"histodot\") +          \n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(                             \n  ggobj = p,                        \n  width_svg = 6,                    \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)                               \n\n\n\n\n\n\n\nStatistics such as the 90% confident interval of the mean can be computed and displayed as shown in the code chunk below.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n\n\n\n2.1.1.2 data_id aesthetic\nThe code chunk below shows the hover effect that data_id can shown as one of the interactive features of ggiraph.\n\nDefaultHover effectStyling hover effect (Change highlighted effect)Combination tooltip & hover effect\n\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(                                 \n  ggobj = p,                            \n  width_svg = 6,                        \n  height_svg = 6*0.618                  \n)  \n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),   #default value of hover css fill is orange          \n    stackgroups = TRUE,               \n    binwidth = 1,                       \n    method = \"histodot\") +              \n  scale_y_continuous(NULL,              \n                     breaks = NULL)\n\ngirafe(                                 \n  ggobj = p,                            \n  width_svg = 6,                        \n  height_svg = 6*0.618                  \n)                                        \n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(             \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                 \n    binwidth = 1,                       \n    method = \"histodot\") +              \n  scale_y_continuous(NULL,              \n                     breaks = NULL)\n\ngirafe(                                 \n  ggobj = p,                            \n  width_svg = 6,                        \n  height_svg = 6*0.618,\n  options = list(                       \n    opts_hover(css = \"fill: #202020;\"), \n    opts_hover_inv(css = \"opacity:0.2;\")\n  )                                     \n)                                        \n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(         \n    aes(tooltip = CLASS, \n        data_id = CLASS),           \n    stackgroups = TRUE,             \n    binwidth = 1,                   \n    method = \"histodot\") +          \n  scale_y_continuous(NULL,          \n                     breaks = NULL)\n\ngirafe(                             \n  ggobj = p,                        \n  width_svg = 6,                    \n  height_svg = 6*0.618,\n  options = list(                   \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                 \n)                                   \n\n\n\n\n\n\n\n\n\n\n2.1.1.3 Onclick\nThis provides hotlink interactivity on the web when using the onclick argument of ggiraph where there is a web document link with a data object displayed on the top right hand corner of the figure upon mouse click.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\n## click actions need to be a \"str\" column containing javascript instructions\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(             \n    aes(onclick = onclick),             \n    stackgroups = TRUE,                 \n    binwidth = 1,                       \n    method = \"histodot\") +              \n  scale_y_continuous(NULL,              \n                     breaks = NULL)\n\ngirafe(                                 \n  ggobj = p,                            \n  width_svg = 6,                        \n  height_svg = 6*0.618)                                        \n\n\n\n\n\n\n\n2.1.1.4 Coordinated Multiple Views with ggiraph\n\nUse interactive functions of ggiraph such as data_id aesthetic to link observations and tooltip aesthetic to hover over a point with a mouse\nCombine it with patchwork learned in Hands-on Exercise 2\n\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#plotly-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#plotly-methods",
    "title": "Hands-on_Ex03",
    "section": "2.1.2 plotly Methods",
    "text": "2.1.2 plotly Methods\nThere are two ways to use plotly:\n\nusing plot_ly()\nusing ggploty()\n\n\nCreate an interactive plot: plot_ly()Create an interactive plot: ggplotly()\n\n\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~GENDER,\n            colour = ~RACE)\n\n\n\n\n\n\n\nFrom using the functions subplot() and highlight_key(), I am able to compare results of students’ scores for Math, Science and English. I am also able to pinpoint any student by click on a data point of any one of the scatterplots to see the students’ scores.\n\nhightlight_key() is used to share data and creates an object of class crosstalk\nsubplot() helps to place plots side by side\n\n\nd &lt;- highlight_key(exam_data)\n\np1 &lt;- ggplot(data=d,\n            aes(x = ENGLISH,\n                y = SCIENCE)) +\n  geom_point(size=1) + \n  coord_cartesian(xlim=c(0,100), \n                  ylim=c(0,100))\np2 &lt;- ggplot(data=d, \n             aes(x = ENGLISH,\n                y = MATHS)) +\n      geom_point(size=1) +\n      coord_cartesian(xlim=c(0,100), \n                  ylim=c(0,100))\n\nsubplot(ggplotly(p1),\n        ggplotly(p2))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#crosstalk-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#crosstalk-methods",
    "title": "Hands-on_Ex03",
    "section": "2.1.3 crosstalk Methods",
    "text": "2.1.3 crosstalk Methods\nCrosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions and conventions for implementing cross-widgets interactions (currently, linked brushing and filtering).\n\n2.1.3.1 Interactive Data Table: DT package2.1.3.2 Linked brushing\n\n\n\nA wrapper of JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using JavaScript library “DataTables” via R Markdown or Shiny.\n\n\nDT::datatable(exam_data, class = \"compact\")\n\n\n\n\n\n\n\nCode chunk below is used to implement the coordinated brushing.\n\nhighlight() sets a variety of options for brushing (i.e. highlight) multiple plots. It is primarily designed to link multiple plotly graphs together and may not behaved as expected when linking plotly to another htmlwidget package via crosstalk. Some cases such as persistent selection in leaflet, other htmlwidgets will respect the options.\nbscols() is a helper function of crosstalk by putting HTML elements next to each other. It can be called directly from the console but is designed specifically for R Markdown.\n\n\nd &lt;- highlight_key(exam_data)\n\np &lt;- ggplot(d, \n            aes(ENGLISH, MATHS)) +\n    geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p), \n                \"plotly_selected\")\n\ncrosstalk::bscols(gg, DT::datatable(d), widths = 5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#terminology",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#terminology",
    "title": "Hands-on_Ex03",
    "section": "3.1 Terminology",
    "text": "3.1 Terminology\nFrom this visualization type, we need to understand some key concepts and terminology used in this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#gganimate-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#gganimate-methods",
    "title": "Hands-on_Ex03",
    "section": "3.2 gganimate Methods",
    "text": "3.2 gganimate Methods\ngganimate brings your static ggplot2 plots to life, turning them into animations. Some key components to note are explained simply below:\nImagine you’re animating a bouncing ball with ggplot2:\n\ntransition_time() decides when and where the ball moves (frame by frame).\nview_follow() makes the camera follow the ball.\nshadow_mark() shows the ball’s trail as it bounces.\nenter_bounce() makes the ball bounce into view.\nease_aes() makes the motion look smooth and natural — not robotic.\n\n\n3.2.1 Static bubble plots\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\nDefault static bubble plotAnimated bubble plot\n\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n\n\n\n\n\n\n\n\n\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')          \n\n\n\n\n\n\n\n\n\n\n\n\n\n3.2.2 plotly Methods\nIn Plotly R package, both ggplotly() and plot_ly() support key frame animations through the frame argument/aesthetic. They also support an ids argument/aesthetic to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).\n\nggplotly() animated (legend shown)ggplotly() animated (legend not shown)plot_ly()\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(alpha = 0.7) + ## aes(frame & size) not working w ggplot anymore\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(alpha = 0.7) + # aes(size = Population, frame = Year) not working\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none') #removes legend\n\nggplotly(gg)\n\n\n\n\n\n\n\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "title": "In-class_Ex02",
    "section": "",
    "text": "Recap:\n\n# add in the following to not have truncated words on figures into your Hands-on Exercises\n\n##| echo: false \n##| fig-height: 12\n##| fig-width: 7\n\n#ggtitle(stringr::str_wrap(\"This is a very long sentence and this should make it become two lines instead of it being cut off\"))  ## add this into your title in your ggplot"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608new",
    "section": "",
    "text": "Welcome to ISSS608 Visual Analytics and Applications. In this website, you will find my coursework prepared for this course."
  },
  {
    "objectID": "index.html#latest-hands-on-exercise",
    "href": "index.html#latest-hands-on-exercise",
    "title": "ISSS608new",
    "section": "🔥 Latest Hands-on Exercise",
    "text": "🔥 Latest Hands-on Exercise\n\n\n\n\n\n\n\nHandsOnEx3\n\n\nHands-on Exercise 3\n\n\n\nShermainn"
  }
]