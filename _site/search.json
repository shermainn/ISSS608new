[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608new",
    "section": "",
    "text": "Welcome to ISSS608 Visual Analytics and Applications. In this website, you will find my coursework prepared for this course."
  },
  {
    "objectID": "index.html#latest-hands-on-exercise",
    "href": "index.html#latest-hands-on-exercise",
    "title": "ISSS608new",
    "section": "🔥 Latest Hands-on Exercise",
    "text": "🔥 Latest Hands-on Exercise\n\n\n\n\n\n\n\nHandsOnEx2\n\n\nHands-on Exercise 2 teaches me how to use 4 different types of R packages: ggrepel, ggthemes, hrbrthemes & patchwork.\n\n\n\nShermainn"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "title": "Hands-on_Ex03",
    "section": "",
    "text": "I will be learning how to create interactive data visualization by using functions provided by ggiraph and plotlyr packages.\nI will also be learning how to create animated data visualization by using gganimate and plotly r packages. In addition, I will be able to reshape data using tidyr package, and (ii) process, wrangle and transform data by using dplyr package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#install-launch-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#install-launch-r-packages",
    "title": "Hands-on_Ex03",
    "section": "1.1.1. Install & Launch R packages",
    "text": "1.1.1. Install & Launch R packages\nInstall and Launch the following R packages:\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure.\n\n\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#import-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#import-data",
    "title": "Hands-on_Ex03",
    "section": "1.1.2. Import Data",
    "text": "1.1.2. Import Data\nThe code chunk below read_csv() of readr package will import the Exam_data.csv and save as exam_data as a tibble data frame.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#install-and-launch-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#install-and-launch-r-packages",
    "title": "Hands-on_Ex03",
    "section": "1.2.1. Install and launch R packages",
    "text": "1.2.1. Install and launch R packages\nInstall and Launch the following R packages:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#import-data-1",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#import-data-1",
    "title": "Hands-on_Ex03",
    "section": "1.2.2 Import Data",
    "text": "1.2.2 Import Data\nImport data worksheet from GlobalPopulation Excel workbook.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\", sheet=\"Data\")%&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)\n\n\n\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launch-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launch-r-packages",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "exam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Hi! My Name is Shermainn and I am a Masters’ degree student from Singapore Management University in IT Business majoring in Financial Technology and Analytics. I love trying new foods and travelling to new places."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "In this exercise, I will be learning on how to:\n\nControl the placement of annotation on a graph using functions provided in ggrepel package\nCreate professional publication quality figures using functions provided in ggthemes and hrbrthemes packages\nPlot composite figures by combining ggplot2 graphs using patchwork package"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#install-and-load-required-libraries",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#install-and-load-required-libraries",
    "title": "Hands-on Exercise 2",
    "section": "2.1. Install and Load required libraries",
    "text": "2.1. Install and Load required libraries\nCode chunk below is used to check if all 4 R packages (ggrepel, ggthemes, hrbrthemes & patchwork) are installed and loaded onto the environment.\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#import-data",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#import-data",
    "title": "Hands-on Exercise 2",
    "section": "2.2. Import data",
    "text": "2.2. Import data\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#notched-boxplot",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#notched-boxplot",
    "title": "Hands-on Exercise 2",
    "section": "7.1. Notched Boxplot",
    "text": "7.1. Notched Boxplot\nUsing Patchwork, I will using a notched boxplot to find the sample mean of the distribution of English scores and Math scores based on gender (female and male). From using the patchwork package, I am able to see the box-plot diagrams side by side which is much easier to make comparisons and the boxplot diagrams allow me to determine that the mean scores for Math between both genders are similar whereas for English scores, females have a higher mean score as compared to males. I added in ggtheme (theme_excel()) so that the diagram is visually more readable.\n\nNotched Boxplot of English and Math ScoresPatchwork of English and Math scores\n\n\n\nm1 &lt;- ggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\ne1 &lt;- ggplot(data=exam_data, \n       aes(y = ENGLISH, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE) \ne1#\n\n\n\n\n\n\n\n\n\n\n\npatchwork &lt;- m1 + e1 \npatchwork & theme_excel()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#violin-plot",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#violin-plot",
    "title": "Hands-on Exercise 2",
    "section": "7.2. Violin Plot",
    "text": "7.2. Violin Plot\nTo compare the different scores between English, Science and Math among the different students, I used a violin plot to compare them. To find out the number of students that scored a higher score of above 90, we will be using ggrepel to find out the number of students that score that.\n\nDefault violin plot by gender and subjectsStudents that scored more than 90 in each subject (using ggrepel)Patchwork of students that scored more than 90 in each subject\n\n\n\nexam_long &lt;- exam_data %&gt;%\n  pivot_longer(cols = c(ENGLISH, MATHS, SCIENCE),\n               names_to = \"Subject\",\n               values_to = \"Score\")\n\nggplot(exam_long, aes(x = Subject, y = Score, fill = Subject)) +\n  geom_violin(trim = FALSE, alpha = 0.7) +\n  geom_jitter(width = 0.1, alpha = 0.3, size = 1, color = \"black\") +\n  facet_wrap(~GENDER) +\n  labs(title = \"Score Distribution by Students\",\n       x = \"Subject\",\n       y = \"Score\") +\n  theme(legend.position = \"none\") \n\n\n\n\n\n\n\n\n\n\nFrom the results, it is seen that there are 17 students from each gender that scored more than 90 in Math but there are 5 students and 3 students that scored above 90 for English and Science respectively. It is also shown that there are more female students (4) who scored 90 as compared to male students (only 1) in English and there is more male students (2) that scored more than 90 in Science as compared to female students (only 1).\n\nexam_long &lt;- exam_data %&gt;%\n  pivot_longer(cols = c(ENGLISH),\n               names_to = \"Subject\",\n               values_to = \"Score\")\n\n\nhighlight_data &lt;- exam_long %&gt;%\n  filter(Score &gt; 90)\n\ne2 &lt;- ggplot(exam_long, aes(x = Subject, y = Score, fill = GENDER)) +\n  geom_violin(trim = FALSE, alpha = 0.7, position = position_dodge(width = 0.9)) +\n  geom_jitter(\n    aes(color = GENDER),\n    alpha = 0.3,\n    size = 1,\n    position = position_jitterdodge(jitter.width = 0.15, dodge.width = 0.9)\n  )  +\n\n  # Add ggrepel labels for top scorers\n  geom_label_repel(\n    data = highlight_data,\n    aes(label = ID, color = GENDER),\n    position = position_jitterdodge(jitter.width = 0.15, dodge.width = 0.9),\n    fontface = \"bold\",\n    size = 3,\n    box.padding = 0.4,\n    label.padding = 0.3,     # Padding inside the box\n    label.size = 0.3,        # Thickness of the box border\n    fill = \"white\",          # Background color of the label\n    max.overlaps = 60,\n    show.legend = FALSE\n  ) +\n  labs(\n    title = \"English Scores based on Gender\",\n    subtitle = \"Labels for students who scored above 90\",\n    x = \"Subject\",\n    y = \"Score\"\n  ) \ne2#\n\n\n\n\n\n\n\n\n\nexam_long &lt;- exam_data %&gt;%\n  pivot_longer(cols = c(MATHS),\n               names_to = \"Subject\",\n               values_to = \"Score\")\n\n\nhighlight_data &lt;- exam_long %&gt;%\n  filter(Score &gt; 90)\n\nm2 &lt;- ggplot(exam_long, aes(x = Subject, y = Score, fill = GENDER)) +\n  geom_violin(trim = FALSE, alpha = 0.7, position = position_dodge(width = 0.9)) +\n  geom_jitter(\n    aes(color = GENDER),\n    alpha = 0.3,\n    size = 1,\n    position = position_jitterdodge(jitter.width = 0.15, dodge.width = 0.9)\n  )  +\n\n  # Add ggrepel labels for top scorers\n  geom_label_repel(\n    data = highlight_data,\n    aes(label = ID, color = GENDER),\n    position = position_jitterdodge(jitter.width = 0.15, dodge.width = 0.9),\n    fontface = \"bold\",\n    size = 3,\n    box.padding = 0.4,\n    label.padding = 0.3,     # Padding inside the box\n    label.size = 0.3,        # Thickness of the box border\n    fill = \"white\",          # Background color of the label\n    max.overlaps = 60,\n    show.legend = FALSE\n  ) +\n  labs(\n    title = \"Math Scores based on Gender\",\n    subtitle = \"Labels for students who scored above 90\",\n    x = \"Subject\",\n    y = \"Score\"\n  ) \nm2#\n\n\n\n\n\n\n\n\n\nexam_long &lt;- exam_data %&gt;%\n  pivot_longer(cols = c(SCIENCE),\n               names_to = \"Subject\",\n               values_to = \"Score\")\n\n\nhighlight_data &lt;- exam_long %&gt;%\n  filter(Score &gt; 90)\n\ns2 &lt;- ggplot(exam_long, aes(x = Subject, y = Score, fill = GENDER)) +\n  geom_violin(trim = FALSE, alpha = 0.7, position = position_dodge(width = 0.9)) +\n  geom_jitter(\n    aes(color = GENDER),\n    alpha = 0.3,\n    size = 1,\n    position = position_jitterdodge(jitter.width = 0.15, dodge.width = 0.9)\n  )  +\n\n  # Add ggrepel labels for top scorers\n  geom_label_repel(\n    data = highlight_data,\n    aes(label = ID, color = GENDER),\n    position = position_jitterdodge(jitter.width = 0.15, dodge.width = 0.9),\n    fontface = \"bold\",\n    size = 3,\n    box.padding = 0.4,\n    label.padding = 0.3,     # Padding inside the box\n    label.size = 0.3,        # Thickness of the box border\n    fill = \"white\",          # Background color of the label\n    max.overlaps = 60,\n    show.legend = FALSE\n  ) +\n  labs(\n    title = \"Science Scores based on Gender\",\n    subtitle = \"Labels for students who scored above 90\",\n    x = \"Subject\",\n    y = \"Score\"\n  ) \ns2#\n\n\n\n\n\n\n\n\n\n\n\n#|fig-width: 15\n#|fig-height: 7\n#|echo: false\n((s2 / e2) |  m2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#dot-plot",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#dot-plot",
    "title": "Hands-on Exercise 2",
    "section": "7.3. Dot Plot",
    "text": "7.3. Dot Plot\nI will be plotting a dot plot to compare the results between the female and male students who scored well (above 80) in English and Math. Based on using the + sign patchworkpackage, I am able to clearly see the number of students that scored above 80 and based on the figure, it can be observed that Math has more students that scored above 80. The number of dots represent the number of students that scored above 80 for each subject respectively.\n\nDefault Dot Plotspatchwork (using + sign)\n\n\n\nhigh_english &lt;- exam_data[exam_data$ENGLISH &gt; 80, ]\ne3 &lt;- ggplot(high_english, aes(x = GENDER, y = ENGLISH)) +\n  geom_dotplot(\n    binaxis = 'y', \n    stackdir = 'center', \n    dotsize = 0.7, \n    binwidth = 1) +\n  labs(title = \"Students Scoring Above 80\",\n       x = \"Gender\",\n       y = \"English Score\") +\n  theme_excel()\ne3#\n\n\n\n\n\n\n\n\n\nhigh_math &lt;- exam_data[exam_data$MATHS &gt; 80, ]\nm3 &lt;- ggplot(high_math, aes(x = GENDER, y = MATHS)) +\n  geom_dotplot(\n    binaxis = 'y', \n    stackdir = 'center', \n    dotsize = 0.7, \n    binwidth = 1) +\n  labs(title = \"Students Scoring Above 80\",\n       x = \"Gender\",\n       y = \"Math Score\") +\n  theme_excel()\nm3#\n\n\n\n\n\n\n\n\n\n\n\ne3 + m3"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#pie-chart-and-bar-chart",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#pie-chart-and-bar-chart",
    "title": "Hands-on Exercise 2",
    "section": "7.4. Pie Chart and Bar Chart",
    "text": "7.4. Pie Chart and Bar Chart\n\nPie Chart: Number of Students based on Gender for EnglishBar Chart: Average English Score by GenderPatchwork (using “/”,“|”,“()” to combine 3 plots)Patchwork (using insert): English score by Gender\n\n\n\ngender_counts &lt;- exam_data %&gt;%\n  group_by(GENDER) %&gt;%\n  summarise(Count = n())\n\np1 &lt;- ggplot(gender_counts, aes(x = \"\", y = Count, fill = GENDER)) +\n  geom_bar(stat = \"identity\", width = 1) +\n  coord_polar(theta = \"y\") +  # This transforms the bar chart to a pie chart\n  theme_void() +  # Removes axes and background\n  labs(title = \"Number of Students in English\") +\n  theme(\n    plot.title = element_text(size = 9),\n    plot.background = element_rect(fill = \"white\")\n  )\np1#\n\n\n\n\n\n\n\n\n\n\n\navg_english &lt;- exam_data %&gt;%\n  group_by(GENDER) %&gt;%\n  summarise(Avg_English = mean(ENGLISH))\n\n# Plot\na1 &lt;- ggplot(avg_english, aes(x = GENDER, y = Avg_English)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Average English Score by Gender\",\n       x = \"Gender\",\n       y = \"Average Score\") +\n  theme_excel()\na1#\n\n\n\n\n\n\n\n\n\navg_maths &lt;- exam_data %&gt;%\n  group_by(GENDER) %&gt;%\n  summarise(Avg_Maths = mean(MATHS))\n\n# Plot\na2 &lt;- ggplot(avg_maths, aes(x = GENDER, y = Avg_Maths)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Average Maths Score by Gender\",\n       x = \"Gender\",\n       y = \"Average Score\") +\n  theme_excel()\na2#\n\n\n\n\n\n\n\n\n\navg_science &lt;- exam_data %&gt;%\n  group_by(GENDER) %&gt;%\n  summarise(Avg_Science = mean(SCIENCE))\n\n# Plot\na3 &lt;- ggplot(avg_science, aes(x = GENDER, y = Avg_Science)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Average Science Score by Gender\",\n       x = \"Gender\",\n       y = \"Average Score\") +\n  theme_excel()\na3#\n\n\n\n\n\n\n\n\n\n\n\na1/a2|a3\n\n\n\n\n\n\n\n\n\n\n\na1 + inset_element(p1, \n                   left = 0.7,    \n                   bottom = 0,    \n                   right = 1,     \n                   top = 0.3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#raincloud-plot",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#raincloud-plot",
    "title": "Hands-on Exercise 2",
    "section": "7.5. Raincloud Plot",
    "text": "7.5. Raincloud Plot"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#diverging-stacked-bar-chart",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#diverging-stacked-bar-chart",
    "title": "Hands-on Exercise 2",
    "section": "7.6. Diverging Stacked Bar Chart",
    "text": "7.6. Diverging Stacked Bar Chart"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#packed-bars",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#packed-bars",
    "title": "Hands-on Exercise 2",
    "section": "7.7. Packed Bars",
    "text": "7.7. Packed Bars"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "title": "In-class_Ex02",
    "section": "",
    "text": "Recap:\n\n# add in the following to not have truncated words on figures into your Hands-on Exercises\n\n##| echo: false \n##| fig-height: 12\n##| fig-width: 7\n\n#ggtitle(stringr::str_wrap(\"This is a very long sentence and this should make it become two lines instead of it being cut off\"))  ## add this into your title in your ggplot"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#ggiraph-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#ggiraph-methods",
    "title": "Hands-on_Ex03",
    "section": "2.1.1 ggiraph Methods",
    "text": "2.1.1 ggiraph Methods\n\nTooltip: a column of datasets that contain tooltips to be displayed when the mouse is over elements\nData_id: a column of datasets that contain an id to be associated with elements.\nOnclick: a column of datasets that contain JavaScript function to be executed when elements are clicked.\n\n\n2.1.1.1 Tooltip effect\nThere are two steps that are needed (Step 1 and 2),\n\nInteractive version of ggplot2 is used to create the basic graph\ngirafe() is then utilized to generate an svg object to be displayed on an html page\nCustomize tooltip style\nDisplay statistics on tooltip\n\n\nStep 1: Basic graphStep 2: Add in tooltip effectStep 3: Customization tooltip styleStep 4: Statistics using tooltip\n\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\np#\n\n\n\n\n\n\n\n\n\n\nBy using the tooltip effect, there is interactivity by hovering the mouse pointer on an data point of interest where the information listed such as the student’s ID will be displayed.\nWe are able to display multiple information such as Name, Class, Race and Gender on tooltip as shown in the code chunk below.\n\nexam_data$tooltip &lt;- c(paste0(\"Name =\", exam_data$ID, \"\\n Class =\", exam_data$CLASS, \"\\n Race =\", exam_data$RACE, \"\\n Gender =\", exam_data$GENDER))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,          \n                     breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\nOne example uses opts_tooltip() of ggiraph by adding in css declarations such as changing the background and font colours.\n\ntooltip_css &lt;- \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(         \n    aes(tooltip = ID),              \n    stackgroups = TRUE,             \n    binwidth = 1,                   \n    method = \"histodot\") +          \n  scale_y_continuous(NULL,                breaks = NULL)\n\ngirafe(                             \n  ggobj = p,                        \n  width_svg = 6,                    \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)                               \n\n\n\n\n\n\n\nStatistics such as the 90% confident interval of the mean can be computed and displayed as shown in the code chunk below.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n\n\n\n2.1.1.2 data_id aesthetic\nThe code chunk below shows the hover effect that data_id can shown as one of the interactive features of ggiraph.\n\nDefaultHover effectStyling hover effect (Change highlighted effect)Combination tooltip & hover effect\n\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(                                 \n  ggobj = p,                            \n  width_svg = 6,                        \n  height_svg = 6*0.618                  \n)  \n\n\n\n\np#\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),   #default value of hover css fill is orange          \n    stackgroups = TRUE,               \n    binwidth = 1,                       \n    method = \"histodot\") +              \n  scale_y_continuous(NULL,              \n                     breaks = NULL)\n\ngirafe(                                 \n  ggobj = p,                            \n  width_svg = 6,                        \n  height_svg = 6*0.618                  \n)                                        \n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(             \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                 \n    binwidth = 1,                       \n    method = \"histodot\") +              \n  scale_y_continuous(NULL,              \n                     breaks = NULL)\n\ngirafe(                                 \n  ggobj = p,                            \n  width_svg = 6,                        \n  height_svg = 6*0.618,\n  options = list(                       \n    opts_hover(css = \"fill: #202020;\"), \n    opts_hover_inv(css = \"opacity:0.2;\")\n  )                                     \n)                                        \n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(         \n    aes(tooltip = CLASS, \n        data_id = CLASS),           \n    stackgroups = TRUE,             \n    binwidth = 1,                   \n    method = \"histodot\") +          \n  scale_y_continuous(NULL,          \n                     breaks = NULL)\n\ngirafe(                             \n  ggobj = p,                        \n  width_svg = 6,                    \n  height_svg = 6*0.618,\n  options = list(                   \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                 \n)                                   \n\n\n\n\n\n\n\n\n\n\n2.1.1.3 Onclick\nThis provides hotlink interactivity on the web when using the onclick argument of ggiraph where there is a web document link with a data object displayed on the top right hand corner of the figure upon mouse click.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\n## click actions need to be a \"str\" column containing javascript instructions\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(             \n    aes(onclick = onclick),             \n    stackgroups = TRUE,                 \n    binwidth = 1,                       \n    method = \"histodot\") +              \n  scale_y_continuous(NULL,              \n                     breaks = NULL)\n\ngirafe(                                 \n  ggobj = p,                            \n  width_svg = 6,                        \n  height_svg = 6*0.618)                                        \n\n\n\n\n\n\n\n2.1.1.4 Coordinated Multiple Views with ggiraph\n\nUse interactive functions of ggiraph such as data_id aesthetic to link observations and tooltip aesthetic to hover over a point with a mouse\nCombine it with patchwork learned in Hands-on Exercise 2\n\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#plotly-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#plotly-methods",
    "title": "Hands-on_Ex03",
    "section": "2.1.2 plotly Methods",
    "text": "2.1.2 plotly Methods"
  }
]