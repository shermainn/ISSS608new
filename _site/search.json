[
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "title": "Hands-on_Ex06",
    "section": "",
    "text": "Overview:\nTo plot a calendar heatmap by using ggplot2 package.\nInstall and Load Package:\n\n\nCode\npacman::p_load(scales, viridis, lubridate, ggthemes,\n               gridExtra, readxl, knitr, data.table,\n               CGPfunctions, ggHoriPlot, tidyverse)\n\n\nImport Data:\n\n\nCode\nattacks &lt;- read_csv(\"data/eventlog.csv\")\n\n\nExamine data structure:\n\n\nCode\nkable(head(attacks))\n\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\nData Prep:\nStep 1:\n2 new fields need to be derived. wkday and hour was created.\n\n\nCode\nmake_hr_wkday &lt;- function(ts, sc, tz) {\n  real_times &lt;- ymd_hms(ts, \n                        tz = tz[1], \n                        quiet = TRUE)\n  dt &lt;- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n}\n\n#ymd_hms() and hour() are from lubridate package, and\n#weekdays() is a base R function.\n\n\nStep 2:\n\n\nCode\nwkday_levels &lt;- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks &lt;- attacks %&gt;%\n  group_by(tz) %&gt;%\n  do(make_hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %&gt;% \n  ungroup() %&gt;% \n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour  = factor(\n      hour, levels = 0:23))\n\n#Beside extracting the necessary data into attacks data frame, mutate() of dplyr package is used to convert wkday and hour fields into factor so they’ll be ordered when plotting\n\n\n\n\nCode\nkable(head(attacks))\n\n\n\n\n\ntz\nsource_country\nwkday\nhour\n\n\n\n\nAfrica/Cairo\nBG\nSaturday\n20\n\n\nAfrica/Cairo\nTW\nSunday\n6\n\n\nAfrica/Cairo\nTW\nSunday\n8\n\n\nAfrica/Cairo\nCN\nSunday\n11\n\n\nAfrica/Cairo\nUS\nSunday\n15\n\n\nAfrica/Cairo\nCA\nMonday\n11\n\n\n\n\n\nBuild Heatmap:\n\n\nCode\ngrouped &lt;- attacks %&gt;% \n  count(wkday, hour) %&gt;% \n  ungroup() %&gt;%\n  na.omit()\n\nggplot(grouped, \n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \ntheme_tufte(base_family = \"Helvetica\") + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )\n\n\n\n\n\n\n\n\n\nThings to note:\n\na tibble data table called grouped is derived by aggregating the attack by wkday and hour fields.\na new field called n is derived by using group_by() and count() functions.\nna.omit() is used to exclude missing value.\ngeom_tile() is used to plot tiles (grids) at each x and y position. color and size arguments are used to specify the border color and line size of the tiles.\ntheme_tufte() of ggthemes package is used to remove unnecessary chart junk. To learn which visual components of default ggplot2 have been excluded, you are encouraged to comment out this line to examine the default plot.\ncoord_equal() is used to ensure the plot will have an aspect ratio of 1:1.\nscale_fill_gradient() function is used to creates a two colour gradient (low-high).\n\nBuild multiple heatmaps\nExample: Top 4 countries with highest attacks\nStep 1: derive attack by country object\n\ncount the number of attacks by country,\ncalculate the percent of attackes by country, and\nsave the results in a tibble data frame.\n\n\n\nCode\nattacks_by_country &lt;- count(\n  attacks, source_country) %&gt;%\n  mutate(percent = percent(n/sum(n))) %&gt;%\n  arrange(desc(n))\n\n\nStep 2: Preparing the tidy data frame\n\n\nCode\n#Extract attack records\ntop4 &lt;- attacks_by_country$source_country[1:4]\ntop4_attacks &lt;- attacks %&gt;%\n  filter(source_country %in% top4) %&gt;%\n  count(source_country, wkday, hour) %&gt;%\n  ungroup() %&gt;%\n  mutate(source_country = factor(\n    source_country, levels = top4)) %&gt;%\n  na.omit()\n\n\nStep 3: Plot the maps\n\n\nCode\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"Helvetica\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6) )\n\n\n\n\n\n\n\n\n\nCycle Plot\nStep 1: Data Import\n\n\nCode\nair &lt;- read_excel(\"data/arrivals_by_air.xlsx\")\n\n\nStep 2: Derive month and year fields\n\n\nCode\nair$month &lt;- factor(month(air$`Month-Year`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nair$year &lt;- year(ymd(air$`Month-Year`))\n\n\nStep 3: Extract Target Country\n\n\nCode\nVietnam &lt;- air %&gt;% \n  select(`Vietnam`, \n         month, \n         year) %&gt;%\n  filter(year &gt;= 2010)\n\n\nStep 4: Computing year average arrivals by month\n\n\nCode\nhline.data &lt;- Vietnam %&gt;% \n  group_by(month) %&gt;%\n  summarise(avgvalue = mean(`Vietnam`))\n\n\nStep 5: Plot cycle plot\n\n\nCode\nlibrary(ggrepel)\nggplot() + \n  geom_line(data=Vietnam,\n            aes(x=year, \n                y=`Vietnam`, \n                group=month), \n            colour=\"black\") +\n  geom_hline(aes(yintercept=avgvalue), \n             data=hline.data, \n             linetype=6, \n             colour=\"red\", \n             size=0.5) + \n  geom_text_repel() +\n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\") +\n  xlab(\"\") +\n  ylab(\"No. of Visitors\") +\n  theme_tufte(base_family = \"Helvetica\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\nSlopegraph\nStep 1: Data Import\n\n\nCode\nrice &lt;- read_csv(\"data/rice.csv\")\n\n\nStep 2: Plot slopegraph\n\nFor effective data visualisation design, factor() is used convert the value type of Year field from numeric to factor.\n\n\n\nCode\nrice %&gt;% \n  mutate(Year = factor(Year)) %&gt;%\n  filter(Year %in% c(1961, 1980)) %&gt;%\n  newggslopegraph(Year, Yield, Country,\n                Title = \"Rice Yield of Top 11 Asian Counties\",\n                SubTitle = \"1961-1980\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "title": "Take-home_Ex02",
    "section": "",
    "text": "In this code chunk below, p_load() of pacman package is used to load the R packages into R environment.\n\n\nCode\npacman::p_load(tidyverse,jsonlite, SmartEDA, tidygraph, ggraph)\n\n\nIn the code chunk below, fromJSON() of jsonlite package is used to import MC1_graph.json file into R and save the output object.\n\n\nCode\nkg &lt;- fromJSON(\"C:\\\\shermainn\\\\ISSS608new\\\\Take-home_Ex\\\\Take-home_Ex02\\\\data\\\\MC1_graph.json\")\n\n\nInspect Structure\n\n\nCode\nstr(kg, max.level = 1)\n\n\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n $ nodes     :'data.frame': 17412 obs. of  10 variables:\n $ links     :'data.frame': 37857 obs. of  4 variables:\n\n\nExtract and Inspect\nTo do some data cleaning, we separate out into nodes_tb1 and edges_tb1 from the json file.\n\n\nCode\nnodes_tb1 &lt;- as_tibble(kg$nodes)\nedges_tb1 &lt;- as_tibble(kg$links)\n\n\nInitial EDA\n\n\nCode\nggplot(data = edges_tb1, \n       aes(y = `Edge Type`)) + \n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data = nodes_tb1, \n       aes(y = `Node Type`)) + \n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nid_map &lt;- tibble(id = nodes_tb1$id,\n                 index = seq_len(nrow(nodes_tb1)))\n\n\nThis ensures each id from your node list is mapped to the correct row number.\n\n\n\n\n\nCode\nedges_tb1 &lt;- edges_tb1 %&gt;%\n  left_join(id_map, by = c(\"source\" = \"id\")) %&gt;%\n  rename(from = index) %&gt;%\n  left_join(id_map, by = c(\"target\" = \"id\")) %&gt;%\n  rename(to = index)\n\n\n\n\n\n\n\nCode\nedges_tb1 &lt;- edges_tb1 %&gt;%\n  filter(!is.na(from), !is.na(to))\n\n\n\n\n\nLastly, tbl_graph() is used to create tidygraph’s graph object by using the code chunk below.\n\n\nCode\ngraph &lt;- tbl_graph(nodes = nodes_tb1,\n                   edges = edges_tb1, \n                   directed = kg$directed)\n\n\nVisualize the knowledge graph\n\n\nCode\nset.seed(1234) #ensures to get back the same graph\n\n\nVisualize the whole graph\n\n\nCode\nggraph(graph, layout = \"fr\") +\n  geom_edge_link(alpha = 0.3,\n                 colour = \"gray\") +\n  geom_node_point(aes(colour = `Node Type`),\n                  size = 4) +\n  geom_node_text(aes(label = name),\n                 repel = TRUE,\n                 size = 2.5) +\n  theme_void()\n\n\nVisualize the sub-graph\nStep1: Filter edges to only “Memberof”\n\n\nCode\ngraph_memberof &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(`Edge Type` == \"MemberOf\")\n\n\nStep2: Extract only connected nodes (i.e. used in these edges)\n\n\nCode\nused_node_indices &lt;- graph_memberof %&gt;%\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  select(from, to) %&gt;%\n  unlist() %&gt;%\n  unique()\n\n\nStep3: Keep only those nodes\n\n\nCode\ngraph_memberof &lt;- graph_memberof %&gt;%\n  activate(nodes) %&gt;%\n  mutate(row_id = row_number()) %&gt;%\n  filter(row_id %in% used_node_indices) %&gt;%\n  select(-row_id) #optional clean up\n\n\nPlot the sub-graph\n\n\nCode\nggraph(graph_memberof, \n       layout = \"fr\") +\n  geom_edge_link(alpha = 0.5,\n                 colour = \"gray\") +\n  geom_node_point(aes(colour = `Node Type`),\n                  size = 1) +\n  geom_node_text(aes(label = name),\n                 repel = TRUE, \n                 size = 2.5) +\n  theme_void()\n\n\n\n\n\n\n\n\n\nthe graph shows that it is very silo"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#create-knowledge-graph",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#create-knowledge-graph",
    "title": "Take-home_Ex02",
    "section": "",
    "text": "Code\nid_map &lt;- tibble(id = nodes_tb1$id,\n                 index = seq_len(nrow(nodes_tb1)))\n\n\nThis ensures each id from your node list is mapped to the correct row number.\n\n\n\n\n\nCode\nedges_tb1 &lt;- edges_tb1 %&gt;%\n  left_join(id_map, by = c(\"source\" = \"id\")) %&gt;%\n  rename(from = index) %&gt;%\n  left_join(id_map, by = c(\"target\" = \"id\")) %&gt;%\n  rename(to = index)\n\n\n\n\n\n\n\nCode\nedges_tb1 &lt;- edges_tb1 %&gt;%\n  filter(!is.na(from), !is.na(to))\n\n\n\n\n\nLastly, tbl_graph() is used to create tidygraph’s graph object by using the code chunk below.\n\n\nCode\ngraph &lt;- tbl_graph(nodes = nodes_tb1,\n                   edges = edges_tb1, \n                   directed = kg$directed)\n\n\nVisualize the knowledge graph\n\n\nCode\nset.seed(1234) #ensures to get back the same graph\n\n\nVisualize the whole graph\n\n\nCode\nggraph(graph, layout = \"fr\") +\n  geom_edge_link(alpha = 0.3,\n                 colour = \"gray\") +\n  geom_node_point(aes(colour = `Node Type`),\n                  size = 4) +\n  geom_node_text(aes(label = name),\n                 repel = TRUE,\n                 size = 2.5) +\n  theme_void()\n\n\nVisualize the sub-graph\nStep1: Filter edges to only “Memberof”\n\n\nCode\ngraph_memberof &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(`Edge Type` == \"MemberOf\")\n\n\nStep2: Extract only connected nodes (i.e. used in these edges)\n\n\nCode\nused_node_indices &lt;- graph_memberof %&gt;%\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  select(from, to) %&gt;%\n  unlist() %&gt;%\n  unique()\n\n\nStep3: Keep only those nodes\n\n\nCode\ngraph_memberof &lt;- graph_memberof %&gt;%\n  activate(nodes) %&gt;%\n  mutate(row_id = row_number()) %&gt;%\n  filter(row_id %in% used_node_indices) %&gt;%\n  select(-row_id) #optional clean up\n\n\nPlot the sub-graph\n\n\nCode\nggraph(graph_memberof, \n       layout = \"fr\") +\n  geom_edge_link(alpha = 0.5,\n                 colour = \"gray\") +\n  geom_node_point(aes(colour = `Node Type`),\n                  size = 1) +\n  geom_node_text(aes(label = name),\n                 repel = TRUE, \n                 size = 2.5) +\n  theme_void()\n\n\n\n\n\n\n\n\n\nthe graph shows that it is very silo"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home_Ex01",
    "section": "",
    "text": "The Department of Statistics (DOS) Singapore is the national authority responsible for the collection, compilation, analysis and dissemination of official statistics in Singapore. As part of the Ministry of Trade and Industry, DOS plays a pivotal role in supporting evidence-based policy-making and planning by providing timely and reliable demographic, social and economic statistics.\nIn the context of population studies, DOS regularly published detailed data sets that inform stakeholders on trends in age structure, gender distribution, geographical dispersion and population growth. This would help to analyze population structures, identifying spatial disparities and tracking demographic shifts across time and regions.\nThe DOS data set taken in 2024 consisted resident population (age and sex) of the planning regions based on the main area and sub-zones.\n\n\n\nThe data used for this exercise is Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024 which can be retrieved from Department of Statistics, Singapore (DOS) Population Trends tab.\n\n\n\nImage of DOS data\n\n\n\n\n\nAs a graphical editor of the media company, the task is to prepare data visualization for the article on demographic structures and distribution of Singapore in 2024.\nUsing the DOS data set above, this post aims to use appropriate tidyverse family of packages (dplr, tidyr), exploratory data analysis (EDA) and ggplot2 functions and its extensions to uncover:\n\nDependency Burden: the regions that have a high dependency ratio (high proportion of young and elderly) to find out if there are sufficient facilities (e.g. childcare centers and eldercare facilities)\nUrban Planning and Housing Needs: the aging communities in Singapore based on the geographical regions using the subzone-level data"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#background",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#background",
    "title": "Take-home_Ex01",
    "section": "",
    "text": "The Department of Statistics (DOS) Singapore is the national authority responsible for the collection, compilation, analysis and dissemination of official statistics in Singapore. As part of the Ministry of Trade and Industry, DOS plays a pivotal role in supporting evidence-based policy-making and planning by providing timely and reliable demographic, social and economic statistics.\nIn the context of population studies, DOS regularly published detailed data sets that inform stakeholders on trends in age structure, gender distribution, geographical dispersion and population growth. This would help to analyze population structures, identifying spatial disparities and tracking demographic shifts across time and regions.\nThe DOS data set taken in 2024 consisted resident population (age and sex) of the planning regions based on the main area and sub-zones."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data",
    "title": "Take-home_Ex01",
    "section": "",
    "text": "The data used for this exercise is Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024 which can be retrieved from Department of Statistics, Singapore (DOS) Population Trends tab.\n\n\n\nImage of DOS data"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#task",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#task",
    "title": "Take-home_Ex01",
    "section": "",
    "text": "As a graphical editor of the media company, the task is to prepare data visualization for the article on demographic structures and distribution of Singapore in 2024.\nUsing the DOS data set above, this post aims to use appropriate tidyverse family of packages (dplr, tidyr), exploratory data analysis (EDA) and ggplot2 functions and its extensions to uncover:\n\nDependency Burden: the regions that have a high dependency ratio (high proportion of young and elderly) to find out if there are sufficient facilities (e.g. childcare centers and eldercare facilities)\nUrban Planning and Housing Needs: the aging communities in Singapore based on the geographical regions using the subzone-level data"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#variable-selection",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#variable-selection",
    "title": "Take-home_Ex01",
    "section": "4.1 Variable Selection",
    "text": "4.1 Variable Selection\nBased on the excel spreadsheet, Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024, I will be categorizing the data set into what was shown above in the flowchart. The ages of the population will be divided into 3 categories: Young (0-17 years), Working adults (18-64), Elderly (65+). The genders will be divided into female and male. As for the planning areas, there are 55 planning areas (main zones) and 346 subzones.\nBelow are the list of variables retained for this study which are grouped into 2 categories of Age and Planning areas.\n\n\n\n\n\n\n\n\n\nCategory\nDescription\nType\nEncoding Scheme\n\n\n\n\nAge\nDependency Burden\nNUM\nYoung Children (0-4 years)\nYouth (5-12 years)\nTeens (13-17 years)\nWorking Adults (18-64 years)\nElderly (65+ years)\n\n\nPlanning areas\nUrban Planning and Housing Needs\nNUM\nMain zones\nSubzones"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#recoding-categorical-variables",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#recoding-categorical-variables",
    "title": "Take-home_Ex01",
    "section": "4.2 Recoding Categorical Variables",
    "text": "4.2 Recoding Categorical Variables\n\nAge groupsMain zones and subzones\n\n\nIn order to have a consistent data set to analyze the population age groups, data is cleaned by filter() to set new values into 3 age groups:\n\nYoung Children of 0 - 4 years\nYouth of 5 - 12 years\nTeens of 13 - 17 years\nWorking Adults of 18 - 64 years\nand Elderly of 65 years and above\n\nThe values are all within the new column namely Age_Group.\n\n\nThe data set is then further categorized by main zones and subzones by using filter()to remove the totals in columns of Age, Sex, Subzone and ‘-’ in Population as they are repeated values or null values. The values are then all renamed Planning_Area, Subzone, and Total_Population.\n\n\nCode\nlibrary(readxl)\nlibrary(dplyr)\n\n# Load the data\npopdata &lt;- read_excel(\"C:\\\\shermainn\\\\ISSS608new\\\\Take-home_Ex\\\\Take-home_Ex01\\\\data\\\\respopagesex2024e.xlsx\")\n\n# Clean and process\npopdata_cleaned &lt;- popdata %&gt;%\n  rename(\n    Planning_Area = `Planning Area`,\n    Population = `2024`\n  ) %&gt;%\n  filter(Sex != \"Total\", Age != \"Total\", Subzone != \"Total\") %&gt;%\n  mutate(\n    Population = na_if(Population, \"-\"),            \n    Age = as.numeric(Age),\n    Population = as.numeric(Population),\n    Age_Group = case_when(\n      Age &gt;= 0 & Age &lt;= 4 ~ \"Young (0-4)\",\n      Age &gt;= 5 & Age &lt;= 12 ~ \"Youth (5-12)\",\n      Age &gt;= 13 & Age &lt;= 17 ~ \"Teens (13-17)\",\n      Age &gt;= 18 & Age &lt;= 64 ~ \"Working Adults (18-64)\",\n      Age &gt;= 65 ~ \"Elderly (65+)\",\n      TRUE ~ NA_character_\n    )\n  ) %&gt;%\n  filter(!is.na(Age_Group)) %&gt;%\n  group_by(Planning_Area, Subzone, Age_Group) %&gt;%\n  summarise(Total_Population = sum(Population, na.rm = TRUE), .groups = \"drop\")\n\n# View results\nhead(popdata_cleaned)\n\n\n# A tibble: 6 × 4\n  Planning_Area Subzone                Age_Group              Total_Population\n  &lt;chr&gt;         &lt;chr&gt;                  &lt;chr&gt;                             &lt;dbl&gt;\n1 Ang Mo Kio    Ang Mo Kio Town Centre Elderly (65+)                       880\n2 Ang Mo Kio    Ang Mo Kio Town Centre Teens (13-17)                       290\n3 Ang Mo Kio    Ang Mo Kio Town Centre Working Adults (18-64)             3170\n4 Ang Mo Kio    Ang Mo Kio Town Centre Young (0-4)                         120\n5 Ang Mo Kio    Ang Mo Kio Town Centre Youth (5-12)                        420\n6 Ang Mo Kio    Cheng San              Elderly (65+)                      6580"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#top-10-subzones-of-each-age-group",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#top-10-subzones-of-each-age-group",
    "title": "Take-home_Ex01",
    "section": "5.1 Top 10 subzones of each age group",
    "text": "5.1 Top 10 subzones of each age group\nIdentifying the top 10 subzones for each age group is paramount for informed urban planning and resource allocation. By understanding the demographic concentrations and where they are located at would help the government agencies, planners and social service providers to allocate infrastructure, facilities and services for efficiently and effectively.\nFor instance, subzones with a high elderly proportion would require more eldercare services, accessible transportation and healthcare centers. On the other hand, areas with many children would need sufficient childcare centers, schools and recreational amenities.\n\nElderly (65+ years)Young Children (0-4 years)Youth (5-12 years)Teens (13-17 years)Working Adults (18-64 years)Comparison between 2 groups (young and youth dependents)\n\n\n\n\nCode\n# Filter and get top 10 subzones by elderly population\ntop_elderly_subzones &lt;- popdata_cleaned %&gt;%\n  filter(Age_Group == \"Elderly (65+)\") %&gt;%\n  arrange(desc(Total_Population)) %&gt;%\n  slice_head(n = 10)\n\n# Plot\ne1 &lt;- ggplot(top_elderly_subzones, \n             aes(x = reorder(Subzone, Total_Population), \n                 y = Total_Population, \n                 fill = Planning_Area)) +\n  geom_col() +\n  coord_flip() +\n  geom_text(aes(label = Total_Population), \n            hjust = -0.1, size = 3.5) +\n  labs(\n    title = \"Top 10 Subzones by Elderly Population (65+)\",\n    x = \"Subzone\",\n    y = \"Elderly Population\"\n  ) +\n  scale_fill_grey(start = 0.3, end = 0.8) +\n  scale_x_discrete(expand = expansion(mult = c(0.05, 0.05))) +\n  scale_y_continuous(\n    breaks = seq(0, 30000, by = 5000),\n    limits = c(0, 30000),  \n    expand = c(0, 0)  \n  ) +\n  theme_bw() +\n  theme(\n    legend.position = \"none\",\n    plot.margin = margin(t=20,r=50,b=20,l=40),\n    plot.title = element_text(hjust = 0.5, face = \"bold\"),\n    plot.subtitle = element_text(hjust = 0.5),\n    axis.title.y = element_text(margin = margin(r = 10)),\n    axis.title.x = element_text(margin = margin(t = 10)),\n    panel.grid.major.y = element_blank(),\n    panel.grid.major.x = element_line(color = \"gray80\"),\n    axis.text = element_text(size = 10)\n  )\n\ne1\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ntop_young_subzones &lt;- popdata_cleaned %&gt;%\n  filter(Age_Group == \"Young (0-4)\") %&gt;%\n  arrange(desc(Total_Population)) %&gt;%\n  slice_head(n = 10)\n\n# Plot\ny1 &lt;- ggplot(top_young_subzones, \n             aes(x = reorder(Subzone, Total_Population), \n                 y = Total_Population, \n                 fill = Planning_Area)) +\n  geom_col() +\n  geom_text(aes(label = Total_Population), \n            hjust = -0.1, size = 3.5) +\n  coord_flip() +\n  labs(\n    title = \"Top 10 Subzones by Young Population (0-4)\",\n    x = \"Subzone\",\n    y = \"Number of Young Population\"\n  ) +\n  scale_fill_grey(start = 0.3, end = 0.8) +\n    scale_x_discrete(expand = expansion(mult = c(0.05, 0.05))) +\n  scale_y_continuous(\n    breaks = seq(0, 10000, by = 1000),\n    limits = c(0, 10000),  \n    expand = c(0, 0)  \n  ) +\n  theme_bw() +\n  theme(\n    legend.position = \"none\",\n    plot.margin = margin(t=20,r=50,b=20,l=40),\n    plot.title = element_text(hjust = 0.5, face = \"bold\"),\n    plot.subtitle = element_text(hjust = 0.5),\n    axis.title.y = element_text(margin = margin(r = 10)),\n    axis.title.x = element_text(margin = margin(t = 10)),\n    panel.grid.major.y = element_blank(),\n    panel.grid.major.x = element_line(color = \"gray80\"),\n    axis.text = element_text(size = 10)\n  )\n\ny1\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Create top_youth_subzones\ntop_youth_subzones &lt;- popdata_cleaned %&gt;%\n  filter(Age_Group == \"Youth (5-12)\") %&gt;%\n  arrange(desc(Total_Population)) %&gt;%\n  slice_head(n = 10)\n\n# Static plot\ny2 &lt;- ggplot(top_youth_subzones, \n             aes(x = reorder(Subzone, Total_Population),\n                 y = Total_Population,\n                 fill = Planning_Area)) +\n  geom_col() +\n  geom_text(aes(label = Total_Population), \n            hjust = -0.1, size = 3.5) +\n  coord_flip() +\n  labs(\n    title = \"Top 10 subzones of Youth Population (5-12)\",\n    x = \"Subzone\",\n    y = \"Number of Youth Population\"\n  ) +\n  scale_fill_grey(start = 0.3, end = 0.8) +\n  scale_x_discrete(expand = expansion(mult = c(0.05, 0.05))) +\n  scale_y_continuous(\n    breaks = seq(0, 10000, by = 1000),\n    limits = c(0, 10000),  \n    expand = c(0, 0)  \n  ) +\n  theme_bw() +\n    theme(\n    legend.position = \"none\",\n    plot.margin = margin(t=20,r=50,b=20,l=40),\n    plot.title = element_text(hjust = 0.5, face = \"bold\"),\n    plot.subtitle = element_text(hjust = 0.5),\n    axis.title.y = element_text(margin = margin(r = 10)),\n    axis.title.x = element_text(margin = margin(t = 10)),\n    panel.grid.major.y = element_blank(),\n    panel.grid.major.x = element_line(color = \"gray80\"),\n    axis.text = element_text(size = 10)\n  )\n\ny2\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n#| fig-width: 7\n#| fig_height: 15\n\ntop_young_subzones &lt;- popdata_cleaned %&gt;%\n  filter(Age_Group == \"Teens (13-17)\") %&gt;%\n  arrange(desc(Total_Population)) %&gt;%\n  slice_head(n = 10)\n\n# Plot\ny3 &lt;- ggplot(top_young_subzones, \n             aes(x = reorder(Subzone, Total_Population), \n                 y = Total_Population, \n                 fill = Planning_Area)) +\n  geom_col() +\n  geom_text(aes(label = Total_Population), \n            hjust = -0.1, size = 3.5) +\n  coord_flip() +\n  labs(\n    title = \"Top 10 subzones of Teens Population (13-17)\",\n    x = NULL,\n    y = \"Number of Teens Population\"\n  ) +\n  scale_fill_grey(start = 0.3, end = 0.8) +\n  scale_x_discrete(expand = expansion(mult = c(0.05, 0.05))) +\n  scale_y_continuous(\n    breaks = seq(0, 7000, by = 1000),\n    limits = c(0, 7000),  \n    expand = c(0, 0)  \n  ) +\n  theme_bw() +\n  theme(\n    legend.position = \"none\",\n    plot.margin = margin(t=20,r=50,b=20,l=40),\n    plot.title = element_text(hjust = 0.5, face = \"bold\"),\n    plot.subtitle = element_text(hjust = 0.5),\n    axis.title.y = element_text(margin = margin(r = 10)),\n    axis.title.x = element_text(margin = margin(t = 10)),\n    panel.grid.major.y = element_blank(),\n    panel.grid.major.x = element_line(color = \"gray80\"),\n    axis.text = element_text(size = 10)\n  )\ny3\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ntop_working_subzones &lt;- popdata_cleaned %&gt;%\n  filter(Age_Group == \"Working Adults (18-64)\") %&gt;%\n  arrange(desc(Total_Population)) %&gt;%\n  slice_head(n = 10)\n\n# Plot\na1 &lt;- ggplot(top_working_subzones, \n             aes(x = reorder(Subzone, Total_Population), \n                 y = Total_Population, \n                 fill = Planning_Area)) +\n  geom_col() +\n  geom_text(aes(label = Total_Population), \n            hjust = -0.1, size = 3.5) +\n  coord_flip() +\n  labs(\n    title = \"Top 10 subzones of Working Adults Population (18-64)\",\n    x = NULL,\n    y = \"Number of Working Adults\"\n  ) +\n  scale_fill_grey(start = 0.3, end = 0.8) +\n  scale_x_discrete(expand = expansion(mult = c(0.05, 0.05))) +\n  scale_y_continuous(\n    breaks = seq(0, 100000, by = 10000),\n    limits = c(0, 100000),  \n    expand = c(0, 0),\n    labels = scales::comma\n  ) +\n  theme_bw() +\n  theme(\n    legend.position = \"none\",\n    plot.margin = margin(t=20,r=50,b=20,l=40),\n    plot.title = element_text(hjust = 0.5, face = \"bold\"),\n    plot.subtitle = element_text(hjust = 0.5),\n    axis.title.y = element_text(margin = margin(r = 10)),\n    axis.title.x = element_text(margin = margin(t = 10)),\n    panel.grid.major.y = element_blank(),\n    panel.grid.major.x = element_line(color = \"gray80\"),\n    axis.text = element_text(size = 10)\n  )\n\na1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n💡 Observations\n\n\n\nTampines (Tampines North, Tampines East & Tampines West) is found to have the highest number of young, youth and elderly population where they are all within the top 10 subzones in all 3 group categories.\nBedok North and Tampines East and West seems to have the highest elderly proportion compared to the other areas where they amount to be the top 3 subzones.\nAs for the young populations, Tampines East, Tampines North and Woodlands East are the top 3 areas with the highest proportion.\nTampines East, Woodlands East and Fernvale are the top 3 subzones for youth population.\nWhen comparing between the youth (5-12 years) and young (0-4 years) age groups, they have similarities where Tampines East and Woodlands East are within the top 3 subzones for these two age groups. In addition, the youth has almost double the number as compared to the young population in both of these two zones as shown in the above comparison plot."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#dependency-ratio-by-subzones",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#dependency-ratio-by-subzones",
    "title": "Take-home_Ex01",
    "section": "6.1 Dependency ratio by subzones",
    "text": "6.1 Dependency ratio by subzones\n\n\n\n\n\n\n\n\n\n\n💡 Observations\n\n\n\nBased on the heat map results, the dependency ratio for the subzones are between 0.20 and 0.45 (every 10 working adults, 4 dependents) which is relatively low and suggests that the working population is currently sufficient to support the dependent population in these subzones.\nThere is less strain on social services such as healthcare and education as well as the economy as there is a larger working adult population.\nFor urban planning, the infrastructure for dependents such as the childcare centers, schools and eldercare facilities are not an immediate priority."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "title": "In-class_Ex04",
    "section": "",
    "text": "Recap:\n\nTake home exercise 2: Do mini challenge 1 - analyze on the various questions shown, do not need to do the reflection questions\nTake home exercise 3: To do a prototype: deadline - 15th June (try to do it asap before week 8 so that can proceed to the project), come up with a storyboard and necessary R packages in the Shiny environment, don’t need to build up the whole application\n\n\n\n\nLesson 4\n\nTwo sample mean - EDA, need to do sampling test regardless of sample size (n &gt;30 still need to do!)\nUse this website to have best practices and reference for ggstatsplot here.\nOne-way Anova:\nTo compare between different plots use pairwise.comparisons\nfor pairwise.display there are 3 types to use as shown below.\n\n\n“ns” → only non-significant\n“s” → only significant\n“all” → everything\n\n\nggridges - refer to here.\nTo use facet_wrap() if you want to compare based on each baseline as shown in the image below. Note: will be displayed into different charts.\n\n\n\n\nFacet-wrap by species each density curve by baseline\n\n\n\nHalf-Eye Plot: Violin Plot is divided in half, and then used boxplot to show the median, max and min points as well as dot plot to show the number of data points\nHOPS:\nWhen moves slower, means more certain about the data sets and bigger sample size with smaller variability.\nWhen moves faster, means less certain about the data sets and smaller sample size and bigger variability,"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "title": "In-class_Ex02",
    "section": "",
    "text": "Recap:\n\n# add in the following to not have truncated words on figures into your Hands-on Exercises\n\n##| echo: false \n##| fig-height: 12\n##| fig-width: 7\n\n#ggtitle(stringr::str_wrap(\"This is a very long sentence and this should make it become two lines instead of it being cut off\"))  ## add this into your title in your ggplot"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html",
    "title": "In-class_Ex03",
    "section": "",
    "text": "What was mentioned during class:\n\nMake sure that your Netlify website is totally sync with the Rstudio: Render website from the “Build” Tab and then commit and push to the github.\nNumerical data and categorical data: Make sure to recode in R studio if you want to change into categorical data from numerical data\nHow to critique and visualize the right data (tips to comment on visualization):\n\nChart Junk VI: the ages should be in a sequential order, so that it is easily interpreted\nAvoid distorting the graph especially when there is a grid reference for aesthetic purposes\nAdd in text labels to explain plot/graph if needed\nClarity and aesthetics: use mapping data visualization on a cartesian coordinate system and put on the quadrant plot to assess and critique\nQuadrant 4: Confusing yet beautiful - add in at least 3 good points and areas to improve further\nQuadrant 1: Clear and Beautiful - add in 3 points each as well\nAdd in areas to improve - not just changing the graph as a whole unless it is very bad\n\n\n\n\nCritiques and comments to improve the graphs of my peers\n\nDistortion of axis - try to avoid that, make it similar as much as possible so that it can be truthful, clarity issue as well when you cannot pinpoint which is student 30, avoid using light colours and the labelling should not be hidden, plot it above the points\n\n\n\n\nDistortion of axis of graph\n\n\n\nHidden data as the plot is on top of the data points\n\n\n\n\nBeautiful but no clarity\n\n\n\nTitle is being cut off\n\n\n\nUnify the theme - all same theme and consistent as well as font\n\n\n\n\n\n\n\nStacked bar chart\n\n\nin general, the example is good\nLegend is redundant: can just put a label to suggest gender\nForgot to fix the limit of x-axis for the values: the range of y and x axis is different: to not misinterpret data\n\nPie Chart\n\nBad example below\n\n\nBetter Example below:\n\nThere is some overlapping in terms of the labelling in the piechart\nUse of colour: Try to avoid using hard colours, use a less opaque colour or reduce the opaqueness\n\n\n\n\nRaincloud Plot\n\n\n\n\n\n\nMore appropriate design\n\n\n\nRoom for improvements: Raindrop is not falling in place\n\n\n\nIn class Exercise (Tableau)\n\nAvoid over-generalization: in the aggregation of data\nVisualize - Add in Quadrant lines (manually):\n\nConvert data into percentile: Click on data point (Sales), Quick Table Calculation &gt; Percentile, Compute using &gt; State\nAdd Reference line: Click on the axis, and click on “add reference line”, Use constant and use 0.5 (for flexibility) or use median\nAdd in Colours to the data points:\nChange the size:\n\nFilter: drag in order date into the filter panel - click on Year, click on 2019 , apply and click okay, show filter, change to radio button on the right hand corner of the Year filter\nAuto-update the year when changing filter: Go to the title of the plot, click on edit title and add in insert &lt;data order date&gt; after “,”+” “."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html",
    "title": "In-class_Ex05",
    "section": "",
    "text": "In this code chunk below, p_load() of pacman package is used to load the R packages into R environment.\n\n\nCode\npacman::p_load(tidyverse,jsonlite, SmartEDA, tidygraph, ggraph)\n\n\nIn the code chunk below, fromJSON() of jsonlite package is used to import MC1_graph.json file into R and save the output object.\n\n\nCode\nkg &lt;- fromJSON(\"C:\\\\shermainn\\\\ISSS608new\\\\In-class_Ex\\\\In-class_Ex05\\\\data\\\\MC1_graph.json\")\n\n\nInspect Structure\n\n\nCode\nstr(kg, max.level = 1)\n\n\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n $ nodes     :'data.frame': 17412 obs. of  10 variables:\n $ links     :'data.frame': 37857 obs. of  4 variables:\n\n\nExtract and Inspect\nTo do some data cleaning, we separate out into nodes_tb1 and edges_tb1 from the json file.\n\n\nCode\nnodes_tb1 &lt;- as_tibble(kg$nodes) \nedges_tb1 &lt;- as_tibble(kg$links)\n\n\nInitial EDA\n\n\nCode\nggplot(data = edges_tb1,         \n       aes(y = `Edge Type`)) +    \n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data = nodes_tb1,         \n       aes(y = `Node Type`)) +    \n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nid_map &lt;- tibble(id = nodes_tb1$id,                  \n                 index = seq_len(nrow(nodes_tb1)))\n\n\nThis ensures each id from your node list is mapped to the correct row number.\n\n\n\n\n\nCode\nedges_tb1 &lt;- edges_tb1 %&gt;%   \n  left_join(id_map, by = c(\"source\" = \"id\")) %&gt;%   \n  rename(from = index) %&gt;%   \n  left_join(id_map, by = c(\"target\" = \"id\")) %&gt;%   \n  rename(to = index)\n\n\n\n\n\n\n\nCode\nedges_tb1 &lt;- edges_tb1 %&gt;%   \n  filter(!is.na(from), !is.na(to))\n\n\n\n\n\nLastly, tbl_graph() is used to create tidygraph’s graph object by using the code chunk below.\n\n\nCode\ngraph &lt;- tbl_graph(nodes = nodes_tb1,                    \n                   edges = edges_tb1,                     \n                   directed = kg$directed)\n\n\nVisualize the knowledge graph\n\n\nCode\nset.seed(1234) #ensures to get back the same graph\n\n\nVisualize the whole graph\n\n\nCode\nggraph(graph, layout = \"fr\") +   \n  geom_edge_link(alpha = 0.3,                  \n                 colour = \"gray\") +   \n  geom_node_point(aes(colour = `Node Type`),                   \n                  size = 4) +   \n  geom_node_text(aes(label = name),                  \n                 repel = TRUE,                  \n                 size = 2.5) +   \n  theme_void()\n\n\n\n\n\n\n\nCode\ngraph_memberof &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(`Edge Type` == \"MemberOf\")\n\n\n\n\n\n\n\nCode\nused_node_indices &lt;- graph_memberof %&gt;%\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  select(from, to) %&gt;%\n  unlist() %&gt;%\n  unique()\n\n\n\n\n\n\n\nCode\ngraph_memberof &lt;- graph_memberof %&gt;%\n  activate(nodes) %&gt;%\n  mutate(row_id = row_number()) %&gt;%\n  filter(row_id %in% used_node_indices) %&gt;%\n  select(-row_id) #optional clean up\n\n\nPlot the sub-graph\n\n\nCode\nggraph(graph_memberof, \n       layout = \"fr\") +\n  geom_edge_link(alpha = 0.5,\n                 colour = \"gray\") +\n  geom_node_point(aes(colour = `Node Type`),\n                  size = 1) +\n  geom_node_text(aes(label = name),\n                 repel = TRUE, \n                 size = 2.5) +\n  theme_void()\n\n\n\n\n\n\n\n\n\nthe graph shows that it is very silo"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#create-knowledge-graph",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#create-knowledge-graph",
    "title": "In-class_Ex05",
    "section": "",
    "text": "Code\nid_map &lt;- tibble(id = nodes_tb1$id,                  \n                 index = seq_len(nrow(nodes_tb1)))\n\n\nThis ensures each id from your node list is mapped to the correct row number.\n\n\n\n\n\nCode\nedges_tb1 &lt;- edges_tb1 %&gt;%   \n  left_join(id_map, by = c(\"source\" = \"id\")) %&gt;%   \n  rename(from = index) %&gt;%   \n  left_join(id_map, by = c(\"target\" = \"id\")) %&gt;%   \n  rename(to = index)\n\n\n\n\n\n\n\nCode\nedges_tb1 &lt;- edges_tb1 %&gt;%   \n  filter(!is.na(from), !is.na(to))\n\n\n\n\n\nLastly, tbl_graph() is used to create tidygraph’s graph object by using the code chunk below.\n\n\nCode\ngraph &lt;- tbl_graph(nodes = nodes_tb1,                    \n                   edges = edges_tb1,                     \n                   directed = kg$directed)\n\n\nVisualize the knowledge graph\n\n\nCode\nset.seed(1234) #ensures to get back the same graph\n\n\nVisualize the whole graph\n\n\nCode\nggraph(graph, layout = \"fr\") +   \n  geom_edge_link(alpha = 0.3,                  \n                 colour = \"gray\") +   \n  geom_node_point(aes(colour = `Node Type`),                   \n                  size = 4) +   \n  geom_node_text(aes(label = name),                  \n                 repel = TRUE,                  \n                 size = 2.5) +   \n  theme_void()\n\n\n\n\n\n\n\nCode\ngraph_memberof &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(`Edge Type` == \"MemberOf\")\n\n\n\n\n\n\n\nCode\nused_node_indices &lt;- graph_memberof %&gt;%\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  select(from, to) %&gt;%\n  unlist() %&gt;%\n  unique()\n\n\n\n\n\n\n\nCode\ngraph_memberof &lt;- graph_memberof %&gt;%\n  activate(nodes) %&gt;%\n  mutate(row_id = row_number()) %&gt;%\n  filter(row_id %in% used_node_indices) %&gt;%\n  select(-row_id) #optional clean up\n\n\nPlot the sub-graph\n\n\nCode\nggraph(graph_memberof, \n       layout = \"fr\") +\n  geom_edge_link(alpha = 0.5,\n                 colour = \"gray\") +\n  geom_node_point(aes(colour = `Node Type`),\n                  size = 1) +\n  geom_node_text(aes(label = name),\n                 repel = TRUE, \n                 size = 2.5) +\n  theme_void()\n\n\n\n\n\n\n\n\n\nthe graph shows that it is very silo"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01b.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01b.html",
    "title": "Take-home_Ex01b",
    "section": "",
    "text": "This is on the Phase ll of Take-home exercise 1 where I will be evaluating and critiquing on one of my peer’s, Celin, Take-home exercise 1 from her Netlify shown here."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01b.html#pie-chart-by-region",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01b.html#pie-chart-by-region",
    "title": "Take-home_Ex01b",
    "section": "Pie Chart by Region",
    "text": "Pie Chart by Region\nFor the pie chart shown below, there are some good design principles such as:\n\nLabeling of slices: The chart labels shown on the legend directly corresponds with the category and percentage shown.\nFlat 2D design: This avoids the distortion of the pie chart that could happen when using a 3D plot.\nSorted Slices in descending order: As the slices are arranged sequentially from biggest to smallest in a clockwise direction, this helps me to quickly grasp the distribution of values.\n\nAreas to improve on:\n\nLimit the chart to one variable: The pie chart should only show one factor instead of comparing two factors as it is quite difficult to interpret visually. It would be clearer if it is focused on one factor - such as gender and use colour variations to represent the regions within that category.\nUnclear percentage meaning: I am unable to distinguish what the total percentage actually represent - whether they are referirng to the distribution by region within the total population or by gender when I look at the chart visually. This ambiguity makes the chart pretty confusing and would need further clarification\nImprove colour transparency: This makes the chart harder to distinguish between sections. Hence, reduce the opacity or use more contrasting colours to enhance the readability"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01b.html#cleaned-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01b.html#cleaned-data",
    "title": "Take-home_Ex01b",
    "section": "Cleaned Data",
    "text": "Cleaned Data\n\n\nCode\npacman::p_load(tidyverse, ggrepel, \n               ggthemes,  hrbrthemes,\n               patchwork, dplyr) \n\nlibrary(readxl)\n\nresident_data &lt;- read_excel(\"C:\\\\shermainn\\\\ISSS608new\\\\Take-home_Ex\\\\Take-home_Ex01\\\\data\\\\respopagesex2024e.xlsx\")\n\nany(duplicated(resident_data))\n\n\n[1] FALSE\n\n\nCode\ncolSums(is.na(resident_data))\n\n\nPlanning Area       Subzone           Age           Sex          2024 \n            1             6             6             6             6 \n\n\nCode\nresident_data_clean &lt;- resident_data %&gt;%\n  rename(\n    Planning_Area = `Planning Area`,\n    Subzone = Subzone,\n    Population = `2024`\n  ) %&gt;%\n  # Convert Age to \"90+\" if it's \"90_and_Over\"\n  mutate(\n    Age = ifelse(Age == \"90_and_Over\", \"90\", Age),\n    Population = as.numeric(Population),\n    Age = factor(Age, levels = as.character(0:90)),\n    Age_numeric = as.numeric(as.character(Age))  \n  )\n\n# 1. Step 1\nregion_map &lt;- list(\n  North = c(\n    \"Central Water Catchment\", \"Lim Chu Kang\", \"Mandai\",\n    \"Sembawang\", \"Simpang\", \"Sungei Kadut\", \"Woodlands\", \"Yishun\"\n  ),\n  `North-East` = c(\n    \"Ang Mo Kio\", \"Hougang\", \"Punggol\", \"Sengkang\", \n    \"Serangoon\", \"Seletar\"\n  ),\n  East = c(\n    \"Bedok\", \"Changi\", \"Changi Bay\", \n    \"Pasir Ris\", \"Paya Lebar\", \"Tampines\"\n  ),\n  West = c(\n    \"Boon Lay\", \"Bukit Batok\", \"Bukit Panjang\", \"Choa Chu Kang\",\n    \"Clementi\", \"Jurong East\", \"Jurong West\", \"Pioneer\", \n    \"Tengah\", \"Tuas\", \"Western Water Catchment\"\n  ),\n  Central = c(\n    \"Bishan\", \"Bukit Merah\", \"Bukit Timah\", \"Central Area\",\n    \"Downtown Core\", \"Marina East\", \"Marina South\", \"Museum\",\n    \"Newton\", \"Novena\", \"Orchard\", \"Outram\", \"River Valley\",\n    \"Rochor\", \"Singapore River\", \"Straits View\", \"Tanglin\"\n  )\n)\n\n# Step 2\nresident_regioned &lt;- resident_data_clean %&gt;%\n  mutate(\n    Region = case_when(\n      Planning_Area %in% region_map$North        ~ \"North\",\n      Planning_Area %in% region_map$`North-East` ~ \"North-East\",\n      Planning_Area %in% region_map$East         ~ \"East\",\n      Planning_Area %in% region_map$West         ~ \"West\",\n      Planning_Area %in% region_map$Central      ~ \"Central\",\n      TRUE                                       ~ NA_character_\n    )\n  ) %&gt;%\n  filter(!is.na(Region))\n\nhead(resident_regioned)\n\n\n# A tibble: 6 × 7\n  Planning_Area Subzone Age   Sex     Population Age_numeric Region    \n  &lt;chr&gt;         &lt;chr&gt;   &lt;fct&gt; &lt;chr&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;chr&gt;     \n1 Ang Mo Kio    Total   &lt;NA&gt;  Total       159340          NA North-East\n2 Ang Mo Kio    Total   &lt;NA&gt;  Males        75600          NA North-East\n3 Ang Mo Kio    Total   &lt;NA&gt;  Females      83740          NA North-East\n4 Ang Mo Kio    Total   0     Total          810           0 North-East\n5 Ang Mo Kio    Total   0     Males          410           0 North-East\n6 Ang Mo Kio    Total   0     Females        410           0 North-East"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01b.html#modified-pie-chart",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01b.html#modified-pie-chart",
    "title": "Take-home_Ex01b",
    "section": "Modified Pie Chart",
    "text": "Modified Pie Chart\n\n\nCode\npie_all_regions &lt;- resident_regioned %&gt;%\n  group_by(Region, Sex) %&gt;%\n  summarise(Population = sum(Population, na.rm = TRUE), .groups = \"drop\") %&gt;%\n  filter(!is.na(Population) & Population &gt; 0)\n\nmale_data &lt;- pie_all_regions %&gt;%\n  filter(Sex == \"Males\") %&gt;%\n  mutate(\n    label = paste0(Region, \"\\n\", round(Population / sum(Population) * 100, 1), \"%\")\n  )\n\nfemale_data &lt;- pie_all_regions %&gt;%\n  filter(Sex == \"Females\") %&gt;%\n  mutate(\n    label = paste0(Region, \"\\n\", round(Population / sum(Population) * 100, 1), \"%\")\n  )\n\nregion_colors &lt;- c(\n  \"Central\"     = \"#f4cccc\",\n  \"East\"        = \"#d9ead3\",\n  \"North\"       = \"#fce5cd\",\n  \"North-East\"  = \"#d9d2e9\",\n  \"West\"        = \"#cfe2f3\"\n)\n\n# Plot: Two pie charts with direct labels\nmale_pie &lt;- ggplot(male_data, aes(x = \"\", y = Population, fill = Region)) +\n  geom_col(width = 1, color = \"white\") +\n  geom_text(aes(label = label), position = position_stack(vjust = 0.5), size = 3) +\n  coord_polar(theta = \"y\") +\n  theme_void(base_size = 11) +\n  labs(title = \"Population by Region (Males)\") +\n  scale_fill_manual(values = region_colors) +\n  theme(legend.position = \"none\")\n\nfemale_pie &lt;- ggplot(female_data, aes(x = \"\", y = Population, fill = Region)) +\n  geom_col(width = 1, color = \"white\") +\n  geom_text(aes(label = label), position = position_stack(vjust = 0.5), size = 3) +\n  coord_polar(theta = \"y\") +\n  theme_void(base_size = 11) +\n  labs(title = \"Population by Region (Females)\") +\n  scale_fill_manual(values = region_colors) +\n  theme(legend.position = \"none\")\n\nmale_pie + female_pie"
  }
]