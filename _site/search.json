[
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html",
    "title": "Take-home_Ex03",
    "section": "",
    "text": "A storyboard helps break down Oceanus’s complex story into clear, visual scenes that are easy to follow. It allows viewers to understand key events, characters, and conflicts without being overwhelmed by information.\nThe story begins with Oceanus shifting from a fishing-based economy to tourism after illegal fishing crackdowns. Tensions grow as former players reinvest and power dynamics shift, reaching a peak when pop star Sailor Shift arrives to film a music video.\nOur focus is on investigative journalist Clepper Jessen, who uncovers suspicious activity behind the sudden closure of Nemo Reef. By tracking intercepted communications—radio chatter, messages, and secret meetings—Clepper pieces together a web of rushed permits, hidden deals, and corruption.\nThe storyboard will follow these communications closely, helping the audience connect the dots as the deeper story unfolds.\n\n\n\nIn order to find more detailed insights, communication visualizations as well as other types of visualizations will be used to help Clepper to uncover and confirm his suspicions based on the analysis that we will be doing to identify important events and relationships between the people, organizations and vessels in the 2 week period.\nWith the use of the storyboard, user would be able to visualize the analysis more effectively with the data set provided within the 2 weeks. Based on the communications, user can focus on the content as well as identify who are the suspicious players that play a part in the illegal fishing activities.\n\n\n\nThe storyboard aims to showcase my team’s ideas on how to show and map out the user’s experience.\nThe prototype can be broadly classify into 3 key areas:\n\nHeat Map Analysis\nNetwork Graph Communication Analysis\nTimeline Analysis\n\nFor enhanced user experience, the prototype will include filter components (i.e. parameter selections such as entities that we would want to select) as well as timeline slider bar that shows us the time period of events that the user would like to focus on. A legend is also shown to allow user to be identify clearly on the different types of nodes displayed on the plots.\nThe team has conceptualized the proposed layouts and UI features as shown in one of my teammates’ Celin’s page to see our visual storyboard."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#introduction",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#introduction",
    "title": "Take-home_Ex03",
    "section": "",
    "text": "A storyboard helps break down Oceanus’s complex story into clear, visual scenes that are easy to follow. It allows viewers to understand key events, characters, and conflicts without being overwhelmed by information.\nThe story begins with Oceanus shifting from a fishing-based economy to tourism after illegal fishing crackdowns. Tensions grow as former players reinvest and power dynamics shift, reaching a peak when pop star Sailor Shift arrives to film a music video.\nOur focus is on investigative journalist Clepper Jessen, who uncovers suspicious activity behind the sudden closure of Nemo Reef. By tracking intercepted communications—radio chatter, messages, and secret meetings—Clepper pieces together a web of rushed permits, hidden deals, and corruption.\nThe storyboard will follow these communications closely, helping the audience connect the dots as the deeper story unfolds."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#motivations",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#motivations",
    "title": "Take-home_Ex03",
    "section": "",
    "text": "In order to find more detailed insights, communication visualizations as well as other types of visualizations will be used to help Clepper to uncover and confirm his suspicions based on the analysis that we will be doing to identify important events and relationships between the people, organizations and vessels in the 2 week period.\nWith the use of the storyboard, user would be able to visualize the analysis more effectively with the data set provided within the 2 weeks. Based on the communications, user can focus on the content as well as identify who are the suspicious players that play a part in the illegal fishing activities."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#storyboard",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#storyboard",
    "title": "Take-home_Ex03",
    "section": "",
    "text": "The storyboard aims to showcase my team’s ideas on how to show and map out the user’s experience.\nThe prototype can be broadly classify into 3 key areas:\n\nHeat Map Analysis\nNetwork Graph Communication Analysis\nTimeline Analysis\n\nFor enhanced user experience, the prototype will include filter components (i.e. parameter selections such as entities that we would want to select) as well as timeline slider bar that shows us the time period of events that the user would like to focus on. A legend is also shown to allow user to be identify clearly on the different types of nodes displayed on the plots.\nThe team has conceptualized the proposed layouts and UI features as shown in one of my teammates’ Celin’s page to see our visual storyboard."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01b.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01b.html",
    "title": "Take-home_Ex01b",
    "section": "",
    "text": "This is on the Phase ll of Take-home exercise 1 where I will be evaluating and critiquing on one of my peer’s, Celin, Take-home exercise 1 from her Netlify shown here."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01b.html#pie-chart-by-region",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01b.html#pie-chart-by-region",
    "title": "Take-home_Ex01b",
    "section": "Pie Chart by Region",
    "text": "Pie Chart by Region\nFor the pie chart shown below, there are some good design principles such as:\n\nLabeling of slices: The chart labels shown on the legend directly corresponds with the category and percentage shown.\nFlat 2D design: This avoids the distortion of the pie chart that could happen when using a 3D plot.\nSorted Slices in descending order: As the slices are arranged sequentially from biggest to smallest in a clockwise direction, this helps me to quickly grasp the distribution of values.\n\nAreas to improve on:\n\nLimit the chart to one variable: The pie chart should only show one factor instead of comparing two factors as it is quite difficult to interpret visually. It would be clearer if it is focused on one factor - such as gender and use colour variations to represent the regions within that category.\nUnclear percentage meaning: I am unable to distinguish what the total percentage actually represent - whether they are referirng to the distribution by region within the total population or by gender when I look at the chart visually. This ambiguity makes the chart pretty confusing and would need further clarification\nImprove colour transparency: This makes the chart harder to distinguish between sections. Hence, reduce the opacity or use more contrasting colours to enhance the readability"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01b.html#cleaned-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01b.html#cleaned-data",
    "title": "Take-home_Ex01b",
    "section": "Cleaned Data",
    "text": "Cleaned Data\n\n\nCode\npacman::p_load(tidyverse, ggrepel, \n               ggthemes,  hrbrthemes,\n               patchwork, dplyr) \n\nlibrary(readxl)\n\nresident_data &lt;- read_excel(\"C:\\\\shermainn\\\\ISSS608new\\\\Take-home_Ex\\\\Take-home_Ex01\\\\data\\\\respopagesex2024e.xlsx\")\n\nany(duplicated(resident_data))\n\n\n[1] FALSE\n\n\nCode\ncolSums(is.na(resident_data))\n\n\nPlanning Area       Subzone           Age           Sex          2024 \n            1             6             6             6             6 \n\n\nCode\nresident_data_clean &lt;- resident_data %&gt;%\n  rename(\n    Planning_Area = `Planning Area`,\n    Subzone = Subzone,\n    Population = `2024`\n  ) %&gt;%\n  # Convert Age to \"90+\" if it's \"90_and_Over\"\n  mutate(\n    Age = ifelse(Age == \"90_and_Over\", \"90\", Age),\n    Population = as.numeric(Population),\n    Age = factor(Age, levels = as.character(0:90)),\n    Age_numeric = as.numeric(as.character(Age))  \n  )\n\n# 1. Step 1\nregion_map &lt;- list(\n  North = c(\n    \"Central Water Catchment\", \"Lim Chu Kang\", \"Mandai\",\n    \"Sembawang\", \"Simpang\", \"Sungei Kadut\", \"Woodlands\", \"Yishun\"\n  ),\n  `North-East` = c(\n    \"Ang Mo Kio\", \"Hougang\", \"Punggol\", \"Sengkang\", \n    \"Serangoon\", \"Seletar\"\n  ),\n  East = c(\n    \"Bedok\", \"Changi\", \"Changi Bay\", \n    \"Pasir Ris\", \"Paya Lebar\", \"Tampines\"\n  ),\n  West = c(\n    \"Boon Lay\", \"Bukit Batok\", \"Bukit Panjang\", \"Choa Chu Kang\",\n    \"Clementi\", \"Jurong East\", \"Jurong West\", \"Pioneer\", \n    \"Tengah\", \"Tuas\", \"Western Water Catchment\"\n  ),\n  Central = c(\n    \"Bishan\", \"Bukit Merah\", \"Bukit Timah\", \"Central Area\",\n    \"Downtown Core\", \"Marina East\", \"Marina South\", \"Museum\",\n    \"Newton\", \"Novena\", \"Orchard\", \"Outram\", \"River Valley\",\n    \"Rochor\", \"Singapore River\", \"Straits View\", \"Tanglin\"\n  )\n)\n\n# Step 2\nresident_regioned &lt;- resident_data_clean %&gt;%\n  mutate(\n    Region = case_when(\n      Planning_Area %in% region_map$North        ~ \"North\",\n      Planning_Area %in% region_map$`North-East` ~ \"North-East\",\n      Planning_Area %in% region_map$East         ~ \"East\",\n      Planning_Area %in% region_map$West         ~ \"West\",\n      Planning_Area %in% region_map$Central      ~ \"Central\",\n      TRUE                                       ~ NA_character_\n    )\n  ) %&gt;%\n  filter(!is.na(Region))\n\nhead(resident_regioned)\n\n\n# A tibble: 6 × 7\n  Planning_Area Subzone Age   Sex     Population Age_numeric Region    \n  &lt;chr&gt;         &lt;chr&gt;   &lt;fct&gt; &lt;chr&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;chr&gt;     \n1 Ang Mo Kio    Total   &lt;NA&gt;  Total       159340          NA North-East\n2 Ang Mo Kio    Total   &lt;NA&gt;  Males        75600          NA North-East\n3 Ang Mo Kio    Total   &lt;NA&gt;  Females      83740          NA North-East\n4 Ang Mo Kio    Total   0     Total          810           0 North-East\n5 Ang Mo Kio    Total   0     Males          410           0 North-East\n6 Ang Mo Kio    Total   0     Females        410           0 North-East"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01b.html#modified-pie-chart",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01b.html#modified-pie-chart",
    "title": "Take-home_Ex01b",
    "section": "Modified Pie Chart",
    "text": "Modified Pie Chart\n\n\nCode\npie_all_regions &lt;- resident_regioned %&gt;%\n  group_by(Region, Sex) %&gt;%\n  summarise(Population = sum(Population, na.rm = TRUE), .groups = \"drop\") %&gt;%\n  filter(!is.na(Population) & Population &gt; 0)\n\nmale_data &lt;- pie_all_regions %&gt;%\n  filter(Sex == \"Males\") %&gt;%\n  mutate(\n    label = paste0(Region, \"\\n\", round(Population / sum(Population) * 100, 1), \"%\")\n  )\n\nfemale_data &lt;- pie_all_regions %&gt;%\n  filter(Sex == \"Females\") %&gt;%\n  mutate(\n    label = paste0(Region, \"\\n\", round(Population / sum(Population) * 100, 1), \"%\")\n  )\n\nregion_colors &lt;- c(\n  \"Central\"     = \"#f4cccc\",\n  \"East\"        = \"#d9ead3\",\n  \"North\"       = \"#fce5cd\",\n  \"North-East\"  = \"#d9d2e9\",\n  \"West\"        = \"#cfe2f3\"\n)\n\n# Plot: Two pie charts with direct labels\nmale_pie &lt;- ggplot(male_data, aes(x = \"\", y = Population, fill = Region)) +\n  geom_col(width = 1, color = \"white\") +\n  geom_text(aes(label = label), position = position_stack(vjust = 0.5), size = 3) +\n  coord_polar(theta = \"y\") +\n  theme_void(base_size = 11) +\n  labs(title = \"Population by Region (Males)\") +\n  scale_fill_manual(values = region_colors) +\n  theme(legend.position = \"none\")\n\nfemale_pie &lt;- ggplot(female_data, aes(x = \"\", y = Population, fill = Region)) +\n  geom_col(width = 1, color = \"white\") +\n  geom_text(aes(label = label), position = position_stack(vjust = 0.5), size = 3) +\n  coord_polar(theta = \"y\") +\n  theme_void(base_size = 11) +\n  labs(title = \"Population by Region (Females)\") +\n  scale_fill_manual(values = region_colors) +\n  theme(legend.position = \"none\")\n\nmale_pie + female_pie"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608new",
    "section": "",
    "text": "Welcome to ISSS608 Visual Analytics and Applications. In this website, you will find my coursework prepared for this course."
  },
  {
    "objectID": "index.html#latest-hands-on-exercise",
    "href": "index.html#latest-hands-on-exercise",
    "title": "ISSS608new",
    "section": "🔥 Latest Hands-on Exercise",
    "text": "🔥 Latest Hands-on Exercise\n\n\n\n\n\n\nHandsOnEx8\n\n\nHands-on Exercise 8\n\n\n\nShermainn"
  },
  {
    "objectID": "index.html#latest-take-home-exercise",
    "href": "index.html#latest-take-home-exercise",
    "title": "ISSS608new",
    "section": "🔥 Latest Take-home Exercise",
    "text": "🔥 Latest Take-home Exercise\n\n\n\n\n\n\nTakehomeEx02\n\n\nTake-home Exercise 2\n\n\n\nShermainn"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "title": "In-class_Ex04",
    "section": "",
    "text": "Recap:\n\nTake home exercise 2: Do mini challenge 1 - analyze on the various questions shown, do not need to do the reflection questions\nTake home exercise 3: To do a prototype: deadline - 15th June (try to do it asap before week 8 so that can proceed to the project), come up with a storyboard and necessary R packages in the Shiny environment, don’t need to build up the whole application\n\n\n\n\nLesson 4\n\nTwo sample mean - EDA, need to do sampling test regardless of sample size (n &gt;30 still need to do!)\nUse this website to have best practices and reference for ggstatsplot here.\nOne-way Anova:\nTo compare between different plots use pairwise.comparisons\nfor pairwise.display there are 3 types to use as shown below.\n\n\n“ns” → only non-significant\n“s” → only significant\n“all” → everything\n\n\nggridges - refer to here.\nTo use facet_wrap() if you want to compare based on each baseline as shown in the image below. Note: will be displayed into different charts.\n\n\n\n\nFacet-wrap by species each density curve by baseline\n\n\n\nHalf-Eye Plot: Violin Plot is divided in half, and then used boxplot to show the median, max and min points as well as dot plot to show the number of data points\nHOPS:\nWhen moves slower, means more certain about the data sets and bigger sample size with smaller variability.\nWhen moves faster, means less certain about the data sets and smaller sample size and bigger variability,"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "title": "In-class_Ex02",
    "section": "",
    "text": "Recap:\n\n# add in the following to not have truncated words on figures into your Hands-on Exercises\n\n##| echo: false \n##| fig-height: 12\n##| fig-width: 7\n\n#ggtitle(stringr::str_wrap(\"This is a very long sentence and this should make it become two lines instead of it being cut off\"))  ## add this into your title in your ggplot"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html",
    "title": "Hands-on_Ex09",
    "section": "",
    "text": "This exercise will include:\n\nHow to build ternary plot:\n\nInstall and launch tidyverse and ggtern packages.\nDerive three new measures using mutate() function of dplyr package.\nBuild a static ternary plot using ggtern() function of ggtern package.\nBuild an interactive ternary plot using plot-ly() function of Plotly R package.\n\nVisual Correlation Analysis\n\nLearn how to create correlation matrix using pairs() of R Graphics.\nLearn how to plot corrgram using corrplot package of R.\nLearn how to create an interactive correlation matrix using plotly R.\n\nCreate Heatmap for multivariate data\nParallel Coordinates plot\n\nplotting statistic parallel coordinates plots by using ggparcoord() of GGally package,\nplotting interactive parallel coordinates plots by using parcoords package, and\nplotting interactive parallel coordinates plots by using parallelPlot package.\n\nTreemap visualization with R"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#load-packages",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#load-packages",
    "title": "Hands-on_Ex09",
    "section": "Load Packages",
    "text": "Load Packages\n2 main R packages will be used in this hands-on exercise, they are:\n\nggtern, a ggplot extension specially designed to plot ternary diagrams. The package will be used to plot static ternary plots.\nPlotly R, an R package for creating interactive web-based graphs via plotly’s JavaScript graphing library, plotly.js . The plotly R libary contains the ggplotly function, which will convert ggplot2 figures into a Plotly object.\n\n\n\nCode\npacman::p_load(plotly, ggtern, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#data-prep",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#data-prep",
    "title": "Hands-on_Ex09",
    "section": "Data Prep",
    "text": "Data Prep\n\n\nCode\n#import data\npop_data &lt;- read_csv(\"data/respopagsex2000to2018_tidy.csv\") \n\n#prep data\n#Deriving the young, economy active and old measures\nagpop_mutated &lt;- pop_data %&gt;%\n  mutate(`Year` = as.character(Year))%&gt;%\n  spread(AG, Population) %&gt;%\n  mutate(YOUNG = rowSums(.[4:8]))%&gt;%\n  mutate(ACTIVE = rowSums(.[9:16]))  %&gt;%\n  mutate(OLD = rowSums(.[17:21])) %&gt;%\n  mutate(TOTAL = rowSums(.[22:24])) %&gt;%\n  filter(Year == 2018)%&gt;%\n  filter(TOTAL &gt; 0)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#plot-ternary-diagram",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#plot-ternary-diagram",
    "title": "Hands-on_Ex09",
    "section": "Plot Ternary Diagram",
    "text": "Plot Ternary Diagram\n3 different types of plots:\n\nBasic: Using mutate() function of dplyr package to derive 3 new measures (young, active and old)\nStatic: Using ggtern() function of ggtern package\nInteractive: using plot_ly() function of Plotly R\n\n\n\nCode\n#Building the static ternary plot\nggtern(data=agpop_mutated,aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\nCode\n#Building the static ternary plot\nggtern(data=agpop_mutated, aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point() +\n  labs(title=\"Population structure, 2015\") +\n  theme_rgbw()\n\n\n\n\n\n\n\n\n\nCode\n# reusable function for creating annotation object\nlabel &lt;- function(txt) {\n  list(\n    text = txt, \n    x = 0.1, y = 1,\n    ax = 0, ay = 0,\n    xref = \"paper\", yref = \"paper\", \n    align = \"center\",\n    font = list(family = \"serif\", size = 15, color = \"white\"),\n    bgcolor = \"#b3b3b3\", bordercolor = \"black\", borderwidth = 2\n  )\n}\n\n# reusable function for axis formatting\naxis &lt;- function(txt) {\n  list(\n    title = txt, tickformat = \".0%\", tickfont = list(size = 10)\n  )\n}\n\nternaryAxes &lt;- list(\n  aaxis = axis(\"Young\"), \n  baxis = axis(\"Active\"), \n  caxis = axis(\"Old\")\n)\n\n# Initiating a plotly visualization \nplot_ly(\n  agpop_mutated, \n  a = ~YOUNG, \n  b = ~ACTIVE, \n  c = ~OLD, \n  color = I(\"black\"), \n  type = \"scatterternary\"\n) %&gt;%\n  layout(\n    annotations = label(\"Ternary Markers\"), \n    ternary = ternaryAxes\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#launch-package",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#launch-package",
    "title": "Hands-on_Ex09",
    "section": "Launch Package",
    "text": "Launch Package\nInstall and launch corrplot, ggpubr, plotly and tidyverse in RStudio.\n\n\nCode\npacman::p_load(corrplot, ggstatsplot, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#import-data",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#import-data",
    "title": "Hands-on_Ex09",
    "section": "Import data",
    "text": "Import data\nImport the data into R by using read_csv() of readr package.\n\n\nCode\nwine &lt;- read_csv(\"data/wine_quality.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#build-correlation-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#build-correlation-matrix",
    "title": "Hands-on_Ex09",
    "section": "Build Correlation Matrix",
    "text": "Build Correlation Matrix\nUse pairs() function to plot scatterplot matrix.\n\nThe first figure shows scatter plot matrix of a 11 by 11.\nColumns 2 to 12 of wine dataframe is used to build the scatterplot matrix. The variables are: fixed acidity, volatile acidity, citric acid, residual sugar, chlorides, free sulfur dioxide, total sulfur dioxide, density, pH, sulphates and alcohol.\n\n\n\nCode\npairs(wine[,1:11])\n\n\n\n\n\n\n\n\n\nCode\npairs(wine[,2:12])"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#upperlower-half-of-correlation-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#upperlower-half-of-correlation-matrix",
    "title": "Hands-on_Ex09",
    "section": "Upper/Lower half of correlation matrix",
    "text": "Upper/Lower half of correlation matrix\nAs correlation matrix is symmetrical, it is common to show either upper or lower half of the correlation matrix. Below code chunk shoes both lower and upper half of the correlation matrix.\n\n\nCode\npairs(wine[,2:12], upper.panel = NULL)\n\n\n\n\n\n\n\n\n\nCode\npairs(wine[,2:12], lower.panel = NULL)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#include-correlation-coefficients",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#include-correlation-coefficients",
    "title": "Hands-on_Ex09",
    "section": "Include correlation coefficients",
    "text": "Include correlation coefficients\nTo show the correlation coefficient of each pair of variables instead of a scatter plot, panel.cor function will be used. This will also show higher correlations in a larger font.\n\n\nCode\npanel.cor &lt;- function(x, y, digits=2, prefix=\"\", cex.cor, ...) {\nusr &lt;- par(\"usr\")\non.exit(par(usr))\npar(usr = c(0, 1, 0, 1))\nr &lt;- abs(cor(x, y, use=\"complete.obs\"))\ntxt &lt;- format(c(r, 0.123456789), digits=digits)[1]\ntxt &lt;- paste(prefix, txt, sep=\"\")\nif(missing(cex.cor)) cex.cor &lt;- 0.8/strwidth(txt)\ntext(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)\n}\n\npairs(wine[,2:12], \n      upper.panel = panel.cor)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#visualising-correlation-matrix-ggcormat",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#visualising-correlation-matrix-ggcormat",
    "title": "Hands-on_Ex09",
    "section": "Visualising Correlation Matrix: ggcormat()",
    "text": "Visualising Correlation Matrix: ggcormat()\nOne of the major limitation of the correlation matrix is that the scatter plots appear very cluttered when the number of observations is relatively large (i.e. more than 500 observations).\nTo overcome this problem, Corrgram data visualisation technique suggested by D. J. Murdoch and E. D. Chow (1996) and Friendly, M (2002) will be used.\n\nlearn how to visualising correlation matrix by using ggcorrmat() of ggstatsplot package.\n\nBasic Plot & :\n\n\nCode\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11)\n\n\n\n\n\n\n\n\n\nCode\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11,\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  title    = \"Correlogram for wine dataset\",\n  subtitle = \"Four pairs are no significant at p &lt; 0.05\"\n)\n\n\n\n\n\n\n\n\n\nCode\nggplot.component = list(\n    theme(text=element_text(size=0.5),\n      axis.text.x = element_text(size = 2),\n      axis.text.y = element_text(size = 2)))\n\n\nThings to learn from the code chunk above:\n\ncor.vars argument is used to compute the correlation matrix needed to build the corrgram.\nggcorrplot.args argument provide additional (mostly aesthetic) arguments that will be passed to ggcorrplot::ggcorrplot function. The list should avoid any of the following arguments since they are already internally being used: corr, method, p.mat, sig.level, ggtheme, colors, lab, pch, legend.title, digits."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#building-multiple-plots",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#building-multiple-plots",
    "title": "Hands-on_Ex09",
    "section": "Building Multiple Plots",
    "text": "Building Multiple Plots\n grouped_ggcorrmat() of ggstatsplot supports faceting.\n\n\nCode\ngrouped_ggcorrmat(\n  data = wine,\n  cor.vars = 1:11,\n  grouping.var = type,\n  type = \"robust\",\n  p.adjust.method = \"holm\",\n  plotgrid.args = list(ncol = 2),\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  annotation.args = list(\n    tag_levels = \"a\",\n    title = \"Correlogram for wine dataset\",\n    subtitle = \"The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity\",\n    caption = \"Dataset: UCI Machine Learning Repository\"\n  )\n)\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\nto build a facet plot, the only argument needed is grouping.var.\nBehind group_ggcorrmat(), patchwork package is used to create the multiplot. plotgrid.args argument provides a list of additional arguments passed to patchwork::wrap_plots, except for guides argument which is already separately specified earlier.\nLikewise, annotation.args argument is calling plot annotation arguments of patchwork package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#visualizing-correlation-matrix-using-corrplot-package",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#visualizing-correlation-matrix-using-corrplot-package",
    "title": "Hands-on_Ex09",
    "section": "Visualizing Correlation Matrix using corrplot package",
    "text": "Visualizing Correlation Matrix using corrplot package\nIn the code chunk below, cor() of R Stats is used to compute the correlation matrix of wine data frame. corrplot() is used to plot the corrgram by using all the default setting as shown in the code chunk below.\n\nNotice that the default visual object used to plot the corrgram is circle. \nThe default layout of the corrgram is a symmetric matrix.\nThe default colour scheme is diverging blue-red. (Blue - positive, red - negative) Intensity of the colour (saturation) is used to represent the strength of the correlation coefficient (Darker - stronger relationship and lighter colours - weaker linear relationship).\n\n\n\nCode\nwine.cor &lt;- cor(wine[, 1:11])\n\ncorrplot(wine.cor)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#visual-geometrics",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#visual-geometrics",
    "title": "Hands-on_Ex09",
    "section": "Visual geometrics",
    "text": "Visual geometrics\nThis default setting can be changed by using the method argument as shown in the code chunk below.\n\n\nCode\ncorrplot(wine.cor, \n         method = \"ellipse\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#working-with-layout",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#working-with-layout",
    "title": "Hands-on_Ex09",
    "section": "Working with layout",
    "text": "Working with layout\ncorrplor() supports three layout types, namely: “full”, “upper” or “lower”. The default is “full” which display full matrix.\n\nLower layoutFull layoutUpper layoutMixed Layout\n\n\nCan be further customized by using the below arguments:\n\ndiag - turn off diagonal cells\ntl.col - change axis text label colour to black colour\n\n\n\nCode\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\",\n         diag = FALSE,\n         tl.col = \"black\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"full\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"upper\")\n\n\n\n\n\n\n\n\n\n\n\n\ncorrplot.mixed() function - wrapped function for mixed visualization style\nNotice that argument lower and upper are used to define the visualisation method used.\n\nIn this case ellipse is used to map the lower half of the corrgram and numerical matrix (i.e. number) is used to map the upper half of the corrgram.\nThe argument tl.pos, on the other, is used to specify the placement of the axis label.\nLastly, the diag argument is used to specify the glyph on the principal diagonal of the corrgram.\n\n\n\n\nCode\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#combining-corrgram-with-the-significant-test",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#combining-corrgram-with-the-significant-test",
    "title": "Hands-on_Ex09",
    "section": "Combining corrgram with the significant test",
    "text": "Combining corrgram with the significant test\nFigure below shows a corrgram combined with the significant test. The corrgram reveals that not all correlation pairs are statistically significant. For example the correlation between total sulfur dioxide and free surfur dioxide is statistically significant at significant level of 0.1 but not the pair between total sulfur dioxide and citric acid.\n\nuse the cor.mtest() to compute the p-values and confidence interval for each pair of variables\nuse the p.mat argument of corrplot function\n\n\n\nCode\nwine.sig = cor.mtest(wine.cor, conf.level= .95)\n\ncorrplot(wine.cor,\n         method = \"number\",\n         type = \"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         tl.srt = 45,\n         p.mat = wine.sig$p,\n         sig.level = .05)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#reorder-a-corrgram",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#reorder-a-corrgram",
    "title": "Hands-on_Ex09",
    "section": "Reorder a corrgram",
    "text": "Reorder a corrgram\ncorrplot package support four sorting methods, they are:\n\n“AOE” is for the angular order of the eigenvectors. See Michael Friendly (2002) for details.\n“FPC” for the first principal component order.\n“hclust” for hierarchical clustering order, and “hclust.method” for the agglomeration method to be used.\n\n“hclust.method” should be one of “ward”, “single”, “complete”, “average”, “mcquitty”, “median” or “centroid”.\n\n“alphabet” for alphabetical order.\n\n\n\nCode\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               order=\"AOE\",\n               tl.col = \"black\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#reordering-a-correlation-matrix-using-hclust",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#reordering-a-correlation-matrix-using-hclust",
    "title": "Hands-on_Ex09",
    "section": "Reordering a correlation matrix using hclust",
    "text": "Reordering a correlation matrix using hclust\ncorrplot() can draw rectangles around the corrgram\n\n\nCode\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         tl.pos = \"lt\",\n         tl.col = \"black\",\n         order=\"hclust\",\n         hclust.method = \"ward.D\",\n         addrect = 3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#load-packages-1",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#load-packages-1",
    "title": "Hands-on_Ex09",
    "section": "Load Packages",
    "text": "Load Packages\nThe code chunk below install and launch seriation, heatmaply, dendextend and tidyverse \n\n\nCode\npacman::p_load(seriation, dendextend, heatmaply, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#import-and-prep-data",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#import-and-prep-data",
    "title": "Hands-on_Ex09",
    "section": "Import and prep data",
    "text": "Import and prep data\nIn the code chunk below, read_csv() of readr is used to import WHData-2018.csv into R and parsed it into tibble R data frame format.\n\n\nCode\nwh &lt;- read_csv(\"data/WHData-2018.csv\")\n\nrow.names(wh) &lt;- wh$Country\n\nwh1 &lt;- dplyr::select(wh, c(3, 7:12))\nwh_matrix &lt;- data.matrix(wh)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#static-heatmap",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#static-heatmap",
    "title": "Hands-on_Ex09",
    "section": "Static Heatmap",
    "text": "Static Heatmap\n R packages and functions can be used to drawing static heatmaps:\n\nheatmap()of R stats package. It draws a simple heatmap.\nheatmap.2() of gplots R package. It draws an enhanced heatmap compared to the R base function.\npheatmap() of pheatmap R package. pheatmap package also known as Pretty Heatmap. The package provides functions to draws pretty heatmaps and provides more control to change the appearance of heatmaps.\nComplexHeatmap package of R/Bioconductor package. The package draws, annotates and arranges complex heatmaps (very useful for genomic data analysis). The full reference guide of the package is available here.\nsuperheat package: A Graphical Tool for Exploring Complex Datasets Using Heatmaps. A system for generating extendable and customizable heatmaps for exploring complex datasets, including big data and data with multiple data types. The full reference guide of the package is available here.\n\n\n\nCode\nwh_heatmap &lt;- heatmap(wh_matrix,\n                      Rowv=NA, Colv=NA)\n\n\n\n\n\n\n\n\n\n1"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#cluster-heatmap",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#cluster-heatmap",
    "title": "Hands-on_Ex09",
    "section": "Cluster heatmap",
    "text": "Cluster heatmap\n\n\nCode\nwh_heatmap &lt;- heatmap(wh_matrix)\n\n\n\n\n\n\n\n\n\n2\nUse scale argument by denoting values to rows/columns.\n\n\nCode\nwh_heatmap &lt;- heatmap(wh_matrix,\n                      scale=\"column\",\n                      cexRow = 0.6, \n                      cexCol = 0.8,\n                      margins = c(10, 4))\n\n\n\n\n\n\n\n\n\n3"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#interactive-heatmap",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#interactive-heatmap",
    "title": "Hands-on_Ex09",
    "section": "Interactive Heatmap",
    "text": "Interactive Heatmap\n\nUsing heatmaply() function to design an interactive cluster heatmap\n\n\n\nCode\nheatmaply(mtcars)\n\n\n\n\n\n\nCode\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)])\n\n\n\n\n\n\n4"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#data-transformation",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#data-transformation",
    "title": "Hands-on_Ex09",
    "section": "Data Transformation",
    "text": "Data Transformation\nThree main data transformation methods are supported by heatmaply(), namely:\n\nscale,\nnormalise\npercentilse.\n\n\nScaling methodNormalising methodPercentising method\n\n\n\nWhen all variables are came from or assumed to come from some normal distribution, then scaling (i.e.: subtract the mean and divide by the standard deviation) would bring them all close to the standard normal distribution.\nIn such a case, each value would reflect the distance from the mean in units of standard deviation.\nThe scale argument in heatmaply() supports column and row scaling.\n\n\n\nCode\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)],\n          scale = \"column\")\n\n\n\n\n\n\n\n\n\nWhen variables in the data comes from possibly different (and non-normal) distributions, the normalize function can be used to bring data to the 0 to 1 scale by subtracting the minimum and dividing by the maximum of all observations.\nThis preserves the shape of each variable’s distribution while making them easily comparable on the same “scale”.\nDiffers from Scaling method\n\n\n\nCode\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\n\n\n\n\nThis is similar to ranking the variables, but instead of keeping the rank values, divide them by the maximal rank.\nThis is done by using the ecdf of the variables on their own values, bringing each value to its empirical percentile.\nThe benefit of the percentize function is that each value has a relatively clear interpretation, it is the percent of observations that got that value or below it.\nSimilar to Normalize method\n\n\n\nCode\nheatmaply(percentize(wh_matrix[, -c(1, 2, 4, 5)]))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#clustering-algorithm",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#clustering-algorithm",
    "title": "Hands-on_Ex09",
    "section": "Clustering algorithm",
    "text": "Clustering algorithm\nThe main arguments provided are:\n\ndistfun: function used to compute the distance (dissimilarity) between both rows and columns. Defaults to dist. The options “pearson”, “spearman” and “kendall” can be used to use correlation-based clustering, which uses as.dist(1 - cor(t(x))) as the distance metric (using the specified correlation method).\nhclustfun: function used to compute the hierarchical clustering when Rowv or Colv are not dendrograms. Defaults to hclust.\ndist_method default is NULL, which results in “euclidean” to be used. It can accept alternative character strings indicating the method to be passed to distfun. By default distfun is “dist”” hence this can be one of “euclidean”, “maximum”, “manhattan”, “canberra”, “binary” or “minkowski”.\nhclust_method default is NULL, which results in “complete” method to be used. It can accept alternative character strings indicating the method to be passed to hclustfun. By default hclustfun is hclust hence this can be one of “ward.D”, “ward.D2”, “single”, “complete”, “average” (= UPGMA), “mcquitty” (= WPGMA), “median” (= WPGMC) or “centroid” (= UPGMC).\n\n\nManual ApproachStatistical ApproachSeriation\n\n\nIn the code chunk below, the heatmap is plotted by using hierachical clustering algorithm with “Euclidean distance” and “ward.D” method.\n\n\nCode\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\")\n\n\n\n\n\n\n\n\nIn order to determine the best clustering method and number of cluster the dend_expend() and find_k() functions of dendextend package will be used.\nFirst, the dend_expend() will be used to determine the recommended clustering method to be used.\n\n\nCode\nwh_d &lt;- dist(normalize(wh_matrix[, -c(1, 2, 4, 5)]), method = \"euclidean\")\ndend_expend(wh_d)[[3]]\n\n\n  dist_methods hclust_methods     optim\n1      unknown         ward.D 0.6137851\n2      unknown        ward.D2 0.6289186\n3      unknown         single 0.4774362\n4      unknown       complete 0.6434009\n5      unknown        average 0.6701688\n6      unknown       mcquitty 0.5020102\n7      unknown         median 0.5901833\n8      unknown       centroid 0.6338734\n\n\n\nThe output table shows that “average” method should be used because it gave the high optimum value.\nNext, find_k() is used to determine the optimal number of cluster.\n\nFigure below shows that k=3 would be good.\n\n\nCode\nwh_clust &lt;- hclust(wh_d, method = \"average\")\nnum_k &lt;- find_k(wh_clust)\nplot(num_k)\n\n\n\n\n\n\n\n\n\nCode\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"average\",\n          k_row = 3)\n\n\n\n\n\n\n\n\nSeriation is used to find an optimal ordering of rows and columns.\nDefault Option: Optimal Leaf Ordering (OLO):\n\nStarts with the output of an agglomerative clustering algorithm and produces a unique ordering, one that flips the various branches of the dendrogram around so as to minimize the sum of dissimilarities between adjacent leaves.\n\n\n\nCode\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"OLO\")\n\n\n\n\n\n\nSecond Option: Gruvaeus and Wainer (GW)\n\nUses a faster heuristic\n\n\n\nCode\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"GW\")\n\n\n\n\n\n\nThird Option: Mean\n\nGives default from other heatmap functions in other packages such as gplots::heatmap.2\n\n\n\nCode\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"mean\")\n\n\n\n\n\n\nFourth Option: None\n\ngives us the dendrograms without any rotation that is based on the data matrix\n\n\n\nCode\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#working-with-colour-palettes",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#working-with-colour-palettes",
    "title": "Hands-on_Ex09",
    "section": "Working with colour palettes",
    "text": "Working with colour palettes\nThe default colour palette uses by heatmaply is viridis. You can use other colour palettes to improve the aesthetic and visuals of the heatmap.\nBlues colour palette of rColorBrewer is used in the code chunk below.\n\n\nCode\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\",\n          colors = Blues)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#the-finishing-touch",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#the-finishing-touch",
    "title": "Hands-on_Ex09",
    "section": "The finishing touch",
    "text": "The finishing touch\nBeside providing a wide collection of arguments for meeting the statistical analysis needs, heatmaply also provides many plotting features to ensure cartographic quality heatmap can be produced.\nIn the code chunk below the following arguments are used:\n\nk_row is used to produce 5 groups.\nmargins is used to change the top margin to 60 and row margin to 200.\nfontsizw_row and fontsize_col are used to change the font size for row and column labels to 4.\nmain is used to write the main title of the plot.\nxlab and ylab are used to write the x-axis and y-axis labels respectively.\n\n\n\nCode\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          Colv=NA,\n          seriate = \"none\",\n          colors = Blues,\n          k_row = 5,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"World Happiness Score and Variables by Country, 2018 \\nDataTransformation using Normalise Method\",\n          xlab = \"World Happiness Indicators\",\n          ylab = \"World Countries\"\n          )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#install-and-load-packages",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#install-and-load-packages",
    "title": "Hands-on_Ex09",
    "section": "Install and load packages",
    "text": "Install and load packages\nThe code chunks below are used to install GGally, parcoords, parallelPlot and tidyverse packages.\n\n\nCode\npacman::p_load(GGally, parallelPlot, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#data-prep-1",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#data-prep-1",
    "title": "Hands-on_Ex09",
    "section": "Data Prep",
    "text": "Data Prep\nIn the code chunk below, read_csv() of readr package is used to import WHData-2018.csv into R and save it into a tibble data frame object called wh.\n\n\nCode\nwh &lt;- read_csv(\"data/WHData-2018.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#plotting-static-parallel-coordinates-plot",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#plotting-static-parallel-coordinates-plot",
    "title": "Hands-on_Ex09",
    "section": "Plotting Static Parallel Coordinates Plot",
    "text": "Plotting Static Parallel Coordinates Plot\nLearn how to plot static parallel coordinates plot by using ggparcoord() of GGally package.\n\nPlotting a simple parallel coordinates\nCode chunk below shows a typical syntax used to plot a basic static parallel coordinates plot by using ggparcoord().\n\n\nCode\nggparcoord(data = wh, \n           columns = c(7:12))\n\n\n\n\n\n\n\n\n\n5\n\n\nPlotting a parallel coordinates with boxplot\nLearn how to makeover the plot by using a collection of arguments provided by ggparcoord().\n\n\nCode\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Parallel Coordinates Plot of World Happines Variables\")\n\n\n\n\n\n\n\n\n\n6\n\n\nParallel coordinates with facet\nSince ggparcoord() is developed by extending ggplot2 package, we can combination use some of the ggplot2 function when plotting a parallel coordinates plot.\nIn the code chunk below, facet_wrap() of ggplot2 is used to plot 10 small multiple parallel coordinates plots. Each plot represent one geographical region such as East Asia.\n\n\nCode\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region)\n\n\n\n\n\n\n\n\n\n\n\nRotating x-axis text label\nTo make the x-axis text label easy to read, let us rotate the labels by 30 degrees. We can rotate axis text labels using theme() function in ggplot2 as shown in the code chunk below.\n\n\nCode\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30))\n\n\n\n\n\n\n\n\n\n7\n\n\nAdjusting the rotated x-axis text label\nRotating x-axis text labels to 30 degrees makes the label overlap with the plot and we can avoid this by adjusting the text location using hjust argument to theme’s text element with element_text(). We use axis.text.x as we want to change the look of x-axis text.\n\n\nCode\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30, hjust=1))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#plotting-interactive-parallel-coordinates-plot-parallelplot-methods",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#plotting-interactive-parallel-coordinates-plot-parallelplot-methods",
    "title": "Hands-on_Ex09",
    "section": "Plotting Interactive Parallel Coordinates Plot: parallelPlot methods",
    "text": "Plotting Interactive Parallel Coordinates Plot: parallelPlot methods\nTo plot a parallel coordinates plot by using ‘htmlwidgets’ package and d3.js.\n\nBasic Plot\n\nusing parallelPlot().\nrotateTitle argument is used to avoid overlapping axis labels.\nOne of the useful interactive feature of parallelPlot is we can click on a variable of interest, for example Happiness score, the monotonous blue colour (default) will change a blues with different intensity colour scheme will be used\nChange colour scheme by using continousCS argument\nhistoVisibility argument is used to plot histogram along the axis of each variables.\n\n\n\nCode\nwh &lt;- wh %&gt;%\n  select(\"Happiness score\", c(1:7))\n\nhistoVisibility &lt;- rep(TRUE, ncol(wh))\nparallelPlot(wh,\n             width = 320,\n             height = 250,\n             continuousCS = \"YlOrRd\",\n             rotateTitle = TRUE,\n             histoVisibility = histoVisibility)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#install-and-load-packages-1",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#install-and-load-packages-1",
    "title": "Hands-on_Ex09",
    "section": "Install and load packages",
    "text": "Install and load packages\n\n\nCode\npacman::p_load(treemap, treemapify, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#data-prep-and-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#data-prep-and-wrangling",
    "title": "Hands-on_Ex09",
    "section": "Data Prep and Wrangling",
    "text": "Data Prep and Wrangling\nIn this exercise, REALIS2018.csv data will be used. This dataset provides information of private property transaction records in 2018. The dataset is extracted from REALIS portal (https://spring.ura.gov.sg/lad/ore/login/index.cfm) of Urban Redevelopment Authority (URA).\n\n\nCode\nrealis2018 &lt;- read_csv(\"data/realis2018.csv\")\n\n\nAs the current data frame is in transaction record form which is not appropriate to use to plot a treemap, we need to manipulate and prepare a data.frtame that is appropriate for treemap visualization.\n\ngroup transaction records by Project Name, Planning Region, Planning Area, Property Type and Type of Sale, and\ncompute Total Unit Sold, Total Area, Median Unit Price and Median Transacted Price by applying appropriate summary statistics on No. of Units, Area (sqm), Unit Price ($ psm) and Transacted Price ($) respectively.\ngroup_by() and summarize() will be used to perform the steps above.\n\ngroup_by() breaks down a data.frame into specified groups of rows.\ngrouped select() is the same as ungrouped select(), except that grouping variables are always retained.\ngrouped arrange() is the same as ungrouped; unless you set .by_group = TRUE, in which case it orders first by the grouping variables.\nmutate() and filter() are most useful in conjunction with window functions (like rank(), or min(x) == x). They are described in detail in vignette(“window-functions”).\nsample_n() and sample_frac() sample the specified number/fraction of rows in each group.\nsummarise() computes the summary for each group.\n\n\n\n\nCode\nrealis2018_grouped &lt;- group_by(realis2018, `Project Name`,\n                               `Planning Region`, `Planning Area`, \n                               `Property Type`, `Type of Sale`)\nrealis2018_summarised &lt;- summarise(realis2018_grouped, \n                          `Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE),\n                          `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n                          `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE), \n                          `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))\n\n\n8\n\nGrouped summaries with the pipe\nThe code chunk below shows a more efficient way to tackle the same processes by using the pipe, %&gt;%:\n\n\nCode\nrealis2018_summarised &lt;- realis2018 %&gt;% \n  group_by(`Project Name`,`Planning Region`, \n           `Planning Area`, `Property Type`, \n           `Type of Sale`) %&gt;%\n  summarise(`Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE), \n            `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n            `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE),\n            `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#treemap",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#treemap",
    "title": "Hands-on_Ex09",
    "section": "Treemap",
    "text": "Treemap\n\ntreemap() of treemap package is used to plot a treemap showing the distribution of median unit prices and total unit sold of resale condominium by geographic hierarchy\n\nSelect records belongs to resale condominium property type from realis2018_selected data frame\nUse three core arguments of treemap(): index, vSize and vColor\nvColor is used in combination with the argument type to determines the colours of the rectangles\n\n\n\n\nCode\nrealis2018_selected &lt;- realis2018_summarised %&gt;%\n  filter(`Property Type` == \"Condominium\", `Type of Sale` == \"Resale\")\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type = \"value\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\nThings to learn from the three arguments used:\n\nindex\n\nThe index vector must consist of at least two column names or else no hierarchy treemap will be plotted.\nIf multiple column names are provided, such as the code chunk above, the first name is the highest aggregation level, the second name the second highest aggregation level, and so on.\n\nvSize\n\nThe column must not contain negative values. This is because it’s vaues will be used to map the sizes of the rectangles of the treemaps.\n\nThe rectangles are coloured with different intensity of green, reflecting their respective median unit prices.\nThe legend reveals that the values are binned into ten bins, i.e. 0-5000, 5000-10000, etc. with an equal interval of 5000.\ntwo arguments that determine the mapping to color palettes: mapping and palette - only difference between “value” and “manual” is the default value for mapping.\n\nThe “value” treemap considers palette to be a diverging color palette (say ColorBrewer’s “RdYlBu”), and maps it in such a way that 0 corresponds to the middle color (typically white or yellow), -max(abs(values)) to the left-end color, and max(abs(values)), to the right-end color.\nThe “manual” treemap simply maps min(values) to the left-end color, max(values) to the right-end color, and mean(range(values)) to the middle color.\n\n\n\nValue type treemap\n\n\nCode\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\nThing to learn from the code chunk above:\n\nalthough the colour palette used is RdYlBu but there are no red rectangles in the treemap above. This is because all the median unit prices are positive.\nThe reason why we see only 5000 to 45000 in the legend is because the range argument is by default c(min(values, max(values)) with some pretty rounding.\n\n\n\nManual type treemap\n\n\nCode\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\nThe colour scheme used is very confusing. This is because mapping = (min(values), mean(range(values)), max(values)). It is not wise to use diverging colour palette such as RdYlBu if the values are all positive or negative\n\nTo overcome this problem, a single colour palette such as Blues should be used.\n\n\nCode\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\nTreemap Layout\ntreemap() supports two popular treemap layouts, namely: “squarified” and “pivotSize”. The default is “pivotSize”.\n\n\nWorking with algorithm argument\n\n\nCode\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"squarified\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\nUsing sortID\nWhen “pivotSize” algorithm is used, sortID argument can be used to determine the order in which the rectangles are placed from top left to bottom right.\n\n\nCode\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"pivotSize\",\n        sortID = \"Median Transacted Price\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#designing-treemap-using-treemapify-package",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#designing-treemap-using-treemapify-package",
    "title": "Hands-on_Ex09",
    "section": "Designing Treemap using treemapify Package",
    "text": "Designing Treemap using treemapify Package\ntreemapify is a R package specially developed to draw treemaps in ggplot2.\n\nBasic treemap\n\n\nCode\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`),\n       layout = \"scol\",\n       start = \"bottomleft\") + \n  geom_treemap() +\n  scale_fill_gradient(low = \"light blue\", high = \"blue\")\n\n\n\n\n\n\n\n\n\n\n\nDefining hierarchy\nThe code chunk below groups the data by planning region.\n\n\nCode\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`),\n       start = \"topleft\") + \n  geom_treemap()\n\n\n\n\n\n\n\n\n\nGroup by planning area\n\n\nCode\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap()\n\n\n\n\n\n\n\n\n\nAdding boundary line\n\n\nCode\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap() +\n  geom_treemap_subgroup2_border(colour = \"gray40\",\n                                size = 2) +\n  geom_treemap_subgroup_border(colour = \"gray20\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#designing-interactive-treemap-using-d3treer",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#designing-interactive-treemap-using-d3treer",
    "title": "Hands-on_Ex09",
    "section": "Designing Interactive Treemap using d3treeR",
    "text": "Designing Interactive Treemap using d3treeR\n\nInstall and load Packages\n\n\nCode\noptions(repos = c(CRAN = \"https://cran.r-project.org\"))\nlibrary(devtools)\ninstall_github(\"timelyportfolio/d3treeR\")\nlibrary(d3treeR)\n\n\n\n\nDesigning An Interactive Treemap\nThe codes below perform two processes.\n\ntreemap() is used to build a treemap by using selected variables in condominium data.frame. The treemap created is save as object called tm.\nThen d3tree() is used to build an interactive treemap.\n\n\n\nCode\ntm &lt;- treemap(realis2018_summarised,\n        index=c(\"Planning Region\", \"Planning Area\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        title=\"Private Residential Property Sold, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\nCode\nd3tree(tm,rootname = \"Singapore\" )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#footnotes",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#footnotes",
    "title": "Hands-on_Ex09",
    "section": "Footnotes",
    "text": "Footnotes\n\n\n\nBy default, heatmap() plots a cluster heatmap. The arguments Rowv=NA and Colv=NA are used to switch off the option of plotting the row and column dendrograms.\n\n↩︎\n\nThe order of both rows and columns is different compare to the native wh_matrix. This is because heatmap do a reordering using clusterisation: it calculates the distance between each pair of rows and columns and try to order them by similarity. Moreover, the corresponding dendrogram are provided beside the heatmap.\n\n↩︎\nNotice that the values are scaled now. Also note that margins argument is used to ensure that the entire x-axis labels are displayed completely and, cexRow and cexCol arguments are used to define the font size used for y-axis and x-axis labels respectively.↩︎\n\nDifferent from heatmap(), for heatmaply() the default horizontal dendrogram is placed on the left hand side of the heatmap.\nThe text label of each raw, on the other hand, is placed on the right hand side of the heat map.\nWhen the x-axis marker labels are too long, they will be rotated by 135 degree from the north.\n\n↩︎\nNotice that only two argument namely data and columns is used. Data argument is used to map the data object (i.e. wh) and columns is used to select the columns for preparing the parallel coordinates plot.↩︎\nThings to learn from the code chunk above.\n\ngroupColumn argument is used to group the observations (i.e. parallel lines) by using a single variable (i.e. Region) and colour the parallel coordinates lines by region name.\nscale argument is used to scale the variables in the parallel coordinate plot by using uniminmax method. The method univariately scale each variable so the minimum of the variable is zero and the maximum is one.\nalphaLines argument is used to reduce the intensity of the line colour to 0.2. The permissible value range is between 0 to 1.\nboxplot argument is used to turn on the boxplot by using logical TRUE. The default is FALSE.\ntitle argument is used to provide the parallel coordinates plot a title.\n\n↩︎\nThing to learn from the code chunk above:\n\nTo rotate x-axis text labels, we use axis.text.x as argument to theme() function. And we specify element_text(angle = 30) to rotate the x-axis text by an angle 30 degree.\n\n↩︎\n\nAggregation functions such as sum() and meadian() obey the usual rule of missing values: if there’s any missing value in the input, the output will be a missing value. The argument na.rm = TRUE removes the missing values prior to computation.\n\n↩︎"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/data/geospatial/MPSZ-2019.html",
    "href": "Hands-on_Ex/Hands-on_Ex08/data/geospatial/MPSZ-2019.html",
    "title": "ISSS608new",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "title": "Hands-on_Ex05",
    "section": "",
    "text": "In this exercise, I will be learning how to model, analyze and visualize network data using R.\nBy the end of this hands-on exercise, I will be able to:\n\ncreate graph object data frames, manipulate them using appropriate functions of dplyr, lubridate, and tidygraph,\nbuild network graph visualisation using appropriate functions of ggraph,\ncompute network geometrics using tidygraph,\nbuild advanced graph visualisation by incorporating the network geometrics, and\nbuild interactive network visualisation using visNetwork package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#wrangle-time",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#wrangle-time",
    "title": "Hands-on_Ex05",
    "section": "Wrangle Time",
    "text": "Wrangle Time\n\n\nCode\nGAStech_edges &lt;- GAStech_edges %&gt;%\n  mutate(SendDate = dmy(SentDate)) %&gt;%\n  mutate(Weekday = wday(SentDate,\n                        label = TRUE,\n                        abbr = FALSE))\n\nglimpse(GAStech_edges)\n\n\nRows: 9,063\nColumns: 10\n$ source      &lt;dbl&gt; 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      &lt;dbl&gt; 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    &lt;chr&gt; \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    &lt;time&gt; 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     &lt;chr&gt; \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject &lt;chr&gt; \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel &lt;chr&gt; \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel &lt;chr&gt; \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n$ SendDate    &lt;date&gt; 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-0…\n$ Weekday     &lt;ord&gt; Friday, Friday, Friday, Friday, Friday, Friday, Friday, Fr…\n\n\n1"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#wrangle-attributes",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#wrangle-attributes",
    "title": "Hands-on_Ex05",
    "section": "Wrangle Attributes",
    "text": "Wrangle Attributes\n\n\nCode\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(source, target, Weekday) %&gt;%\n    summarise(Weight = n()) %&gt;%\n  filter(source!=target) %&gt;%\n  filter(Weight &gt; 1) %&gt;%\n  ungroup()\n\nglimpse(GAStech_edges_aggregated)\n\n\nRows: 1,372\nColumns: 4\n$ source  &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ target  &lt;dbl&gt; 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6,…\n$ Weekday &lt;ord&gt; Sunday, Monday, Tuesday, Wednesday, Friday, Sunday, Monday, Tu…\n$ Weight  &lt;int&gt; 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5,…\n\n\n2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#build-tidygraph-data-model",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#build-tidygraph-data-model",
    "title": "Hands-on_Ex05",
    "section": "Build tidygraph data model",
    "text": "Build tidygraph data model\n\n\nCode\nGAStech_graph &lt;- tbl_graph(nodes = GAStech_nodes,\n                           edges = GAStech_edges_aggregated, \n                           directed = TRUE)\n\nGAStech_graph\n\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Node Data: 54 × 4 (active)\n      id label               Department     Title                               \n   &lt;dbl&gt; &lt;chr&gt;               &lt;chr&gt;          &lt;chr&gt;                               \n 1     1 Mat.Bramar          Administration Assistant to CEO                    \n 2     2 Anda.Ribera         Administration Assistant to CFO                    \n 3     3 Rachel.Pantanal     Administration Assistant to CIO                    \n 4     4 Linda.Lagos         Administration Assistant to COO                    \n 5     5 Ruscella.Mies.Haber Administration Assistant to Engineering Group Mana…\n 6     6 Carla.Forluniau     Administration Assistant to IT Group Manager       \n 7     7 Cornelia.Lais       Administration Assistant to Security Group Manager \n 8    44 Kanon.Herrero       Security       Badging Office                      \n 9    45 Varja.Lagos         Security       Badging Office                      \n10    46 Stenig.Fusil        Security       Building Control                    \n# ℹ 44 more rows\n#\n# Edge Data: 1,372 × 4\n   from    to Weekday Weight\n  &lt;int&gt; &lt;int&gt; &lt;ord&gt;    &lt;int&gt;\n1     1     2 Sunday       5\n2     1     2 Monday       2\n3     1     2 Tuesday      3\n# ℹ 1,369 more rows\n\n\nCode\nGAStech_graph %&gt;%\n  activate(edges) %&gt;%\n  arrange(desc(Weight))\n\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Edge Data: 1,372 × 4 (active)\n    from    to Weekday   Weight\n   &lt;int&gt; &lt;int&gt; &lt;ord&gt;      &lt;int&gt;\n 1    40    41 Saturday      13\n 2    41    43 Monday        11\n 3    35    31 Tuesday       10\n 4    40    41 Monday        10\n 5    40    43 Monday        10\n 6    36    32 Sunday         9\n 7    40    43 Saturday       9\n 8    41    40 Monday         9\n 9    19    15 Wednesday      8\n10    35    38 Tuesday        8\n# ℹ 1,362 more rows\n#\n# Node Data: 54 × 4\n     id label           Department     Title           \n  &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt;          &lt;chr&gt;           \n1     1 Mat.Bramar      Administration Assistant to CEO\n2     2 Anda.Ribera     Administration Assistant to CFO\n3     3 Rachel.Pantanal Administration Assistant to CIO\n# ℹ 51 more rows"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#footnotes",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#footnotes",
    "title": "Hands-on_Ex05",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThings to take note from the code chunk above\n\nBoth dmy() and wday() are functions of lubridate package that is easier to work with dates and times\ndmy() - transform SentDate to Date data type and\nwday() - returns day of week as decimal number/ordered factor if label is TRUE. If FALSE, kept days spelled in full i.e. Monday. The function will create a new column in the data frame.\n\n↩︎\nThings to learn from code chunk:\n\nfilter(), group(), summarise() and ungroup() from dplyr package are used\nnew field called weight has been added into the data frame\n\n↩︎\nThings to learn from the code chunk above:\n\ngeom_node_point is equivalent in functionality to geo_point of ggplot2. It allows for simple plotting of nodes in different shapes, colours and sizes. In the codes chnuks above colour and size are used.\n\n↩︎\nThings to learn from code chunks above:\n- geom_edge_link draws edges in the simplest way - as straight lines between the start and end nodes. But, it can do more that that. In the example above, argument width is used to map the width of the line in proportional to the Weight attribute and argument alpha is used to introduce opacity on the line.↩︎\nThings to learn from the code chunk above:\n\nmutate() of dplyr is used to perform the computation.\nthe algorithm used, on the other hand, is the centrality_betweenness() of tidygraph.\n\n↩︎"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "title": "Hands-on_Ex03",
    "section": "",
    "text": "I will be learning how to create interactive data visualization by using functions provided by ggiraph and plotlyr packages.\nI will also be learning how to create animated data visualization by using gganimate and plotly r packages. In addition, I will be able to reshape data using tidyr package, and (ii) process, wrangle and transform data by using dplyr package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#install-launch-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#install-launch-r-packages",
    "title": "Hands-on_Ex03",
    "section": "1.1.1. Install & Launch R packages",
    "text": "1.1.1. Install & Launch R packages\nInstall and Launch the following R packages:\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure.\n\n\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#import-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#import-data",
    "title": "Hands-on_Ex03",
    "section": "1.1.2. Import Data",
    "text": "1.1.2. Import Data\nThe code chunk below read_csv() of readr package will import the Exam_data.csv and save as exam_data as a tibble data frame.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#install-and-launch-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#install-and-launch-r-packages",
    "title": "Hands-on_Ex03",
    "section": "1.2.1. Install and launch R packages",
    "text": "1.2.1. Install and launch R packages\nInstall and Launch the following R packages:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#import-data-1",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#import-data-1",
    "title": "Hands-on_Ex03",
    "section": "1.2.2 Import Data",
    "text": "1.2.2 Import Data\nImport data worksheet from GlobalPopulation Excel workbook.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\", sheet=\"Data\")%&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#ggiraph-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#ggiraph-methods",
    "title": "Hands-on_Ex03",
    "section": "2.1.1 ggiraph Methods",
    "text": "2.1.1 ggiraph Methods\n\nTooltip: a column of datasets that contain tooltips to be displayed when the mouse is over elements\nData_id: a column of datasets that contain an id to be associated with elements.\nOnclick: a column of datasets that contain JavaScript function to be executed when elements are clicked.\n\n\n2.1.1.1 Tooltip effect\nThere are two steps that are needed (Step 1 and 2),\n\nInteractive version of ggplot2 is used to create the basic graph\ngirafe() is then utilized to generate an svg object to be displayed on an html page\nCustomize tooltip style\nDisplay statistics on tooltip\n\n\nStep 1: Basic graphStep 2: Add in tooltip effectStep 3: Customization tooltip styleStep 4: Statistics using tooltip\n\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\np#\n\n\n\n\n\n\n\n\n\n\nBy using the tooltip effect, there is interactivity by hovering the mouse pointer on an data point of interest where the information listed such as the student’s ID will be displayed.\nWe are able to display multiple information such as Name, Class, Race and Gender on tooltip as shown in the code chunk below.\n\nexam_data$tooltip &lt;- c(paste0(\"Name =\", exam_data$ID, \"\\n Class =\", exam_data$CLASS, \"\\n Race =\", exam_data$RACE, \"\\n Gender =\", exam_data$GENDER))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,          \n                     breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\nOne example uses opts_tooltip() of ggiraph by adding in css declarations such as changing the background and font colours.\n\ntooltip_css &lt;- \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(         \n    aes(tooltip = ID),              \n    stackgroups = TRUE,             \n    binwidth = 1,                   \n    method = \"histodot\") +          \n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(                             \n  ggobj = p,                        \n  width_svg = 6,                    \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)                               \n\n\n\n\n\n\n\nStatistics such as the 90% confident interval of the mean can be computed and displayed as shown in the code chunk below.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n\n\n\n2.1.1.2 data_id aesthetic\nThe code chunk below shows the hover effect that data_id can shown as one of the interactive features of ggiraph.\n\nDefaultHover effectStyling hover effect (Change highlighted effect)Combination tooltip & hover effect\n\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(                                 \n  ggobj = p,                            \n  width_svg = 6,                        \n  height_svg = 6*0.618                  \n)  \n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),   #default value of hover css fill is orange          \n    stackgroups = TRUE,               \n    binwidth = 1,                       \n    method = \"histodot\") +              \n  scale_y_continuous(NULL,              \n                     breaks = NULL)\n\ngirafe(                                 \n  ggobj = p,                            \n  width_svg = 6,                        \n  height_svg = 6*0.618                  \n)                                        \n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(             \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                 \n    binwidth = 1,                       \n    method = \"histodot\") +              \n  scale_y_continuous(NULL,              \n                     breaks = NULL)\n\ngirafe(                                 \n  ggobj = p,                            \n  width_svg = 6,                        \n  height_svg = 6*0.618,\n  options = list(                       \n    opts_hover(css = \"fill: #202020;\"), \n    opts_hover_inv(css = \"opacity:0.2;\")\n  )                                     \n)                                        \n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(         \n    aes(tooltip = CLASS, \n        data_id = CLASS),           \n    stackgroups = TRUE,             \n    binwidth = 1,                   \n    method = \"histodot\") +          \n  scale_y_continuous(NULL,          \n                     breaks = NULL)\n\ngirafe(                             \n  ggobj = p,                        \n  width_svg = 6,                    \n  height_svg = 6*0.618,\n  options = list(                   \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                 \n)                                   \n\n\n\n\n\n\n\n\n\n\n2.1.1.3 Onclick\nThis provides hotlink interactivity on the web when using the onclick argument of ggiraph where there is a web document link with a data object displayed on the top right hand corner of the figure upon mouse click.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\n## click actions need to be a \"str\" column containing javascript instructions\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(             \n    aes(onclick = onclick),             \n    stackgroups = TRUE,                 \n    binwidth = 1,                       \n    method = \"histodot\") +              \n  scale_y_continuous(NULL,              \n                     breaks = NULL)\n\ngirafe(                                 \n  ggobj = p,                            \n  width_svg = 6,                        \n  height_svg = 6*0.618)                                        \n\n\n\n\n\n\n\n2.1.1.4 Coordinated Multiple Views with ggiraph\n\nUse interactive functions of ggiraph such as data_id aesthetic to link observations and tooltip aesthetic to hover over a point with a mouse\nCombine it with patchwork learned in Hands-on Exercise 2\n\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#plotly-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#plotly-methods",
    "title": "Hands-on_Ex03",
    "section": "2.1.2 plotly Methods",
    "text": "2.1.2 plotly Methods\nThere are two ways to use plotly:\n\nusing plot_ly()\nusing ggploty()\n\n\nCreate an interactive plot: plot_ly()Create an interactive plot: ggplotly()\n\n\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~GENDER,\n            colour = ~RACE)\n\n\n\n\n\n\n\nFrom using the functions subplot() and highlight_key(), I am able to compare results of students’ scores for Math, Science and English. I am also able to pinpoint any student by click on a data point of any one of the scatterplots to see the students’ scores.\n\nhightlight_key() is used to share data and creates an object of class crosstalk\nsubplot() helps to place plots side by side\n\n\nd &lt;- highlight_key(exam_data)\n\np1 &lt;- ggplot(data=d,\n            aes(x = ENGLISH,\n                y = SCIENCE)) +\n  geom_point(size=1) + \n  coord_cartesian(xlim=c(0,100), \n                  ylim=c(0,100))\np2 &lt;- ggplot(data=d, \n             aes(x = ENGLISH,\n                y = MATHS)) +\n      geom_point(size=1) +\n      coord_cartesian(xlim=c(0,100), \n                  ylim=c(0,100))\n\nsubplot(ggplotly(p1),\n        ggplotly(p2))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#crosstalk-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#crosstalk-methods",
    "title": "Hands-on_Ex03",
    "section": "2.1.3 crosstalk Methods",
    "text": "2.1.3 crosstalk Methods\nCrosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions and conventions for implementing cross-widgets interactions (currently, linked brushing and filtering). ::: panel-tabset ### 2.1.3.1 Interactive Data Table: DT package\n\nA wrapper of JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using JavaScript library “DataTables” via R Markdown or Shiny.\n\n\nDT::datatable(exam_data, class = \"compact\")\n\n\n\n\n\n\n2.1.3.2 Linked brushing\nCode chunk below is used to implement the coordinated brushing.\n\nhighlight() sets a variety of options for brushing (i.e. highlight) multiple plots. It is primarily designed to link multiple plotly graphs together and may not behaved as expected when linking plotly to another htmlwidget package via crosstalk. Some cases such as persistent selection in leaflet, other htmlwidgets will respect the options.\nbscols() is a helper function of crosstalk by putting HTML elements next to each other. It can be called directly from the console but is designed specifically for R Markdown.\n\n\nd &lt;- highlight_key(exam_data)\n\np &lt;- ggplot(d, \n            aes(ENGLISH, MATHS)) +\n    geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p), \n                \"plotly_selected\")\n\ncrosstalk::bscols(gg, DT::datatable(d), widths = 5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n:::"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#terminology",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#terminology",
    "title": "Hands-on_Ex03",
    "section": "3.1 Terminology",
    "text": "3.1 Terminology\nFrom this visualization type, we need to understand some key concepts and terminology used in this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#gganimate-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#gganimate-methods",
    "title": "Hands-on_Ex03",
    "section": "3.2 gganimate Methods",
    "text": "3.2 gganimate Methods\ngganimate brings your static ggplot2 plots to life, turning them into animations. Some key components to note are explained simply below:\nImagine you’re animating a bouncing ball with ggplot2:\n\ntransition_time() decides when and where the ball moves (frame by frame).\nview_follow() makes the camera follow the ball.\nshadow_mark() shows the ball’s trail as it bounces.\nenter_bounce() makes the ball bounce into view.\nease_aes() makes the motion look smooth and natural — not robotic.\n\n\n3.2.1 Static bubble plots\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\nDefault static bubble plotAnimated bubble plot\n\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n\n\n\n\n\n\n\n\n\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')          \n\n\n\n\n\n\n\n\n\n\n\n\n\n3.2.2 plotly Methods\nIn Plotly R package, both ggplotly() and plot_ly() support key frame animations through the frame argument/aesthetic. They also support an ids argument/aesthetic to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).\n\nggplotly() animated (legend shown)ggplotly() animated (legend not shown)plot_ly()\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(alpha = 0.7) + ## aes(frame & size) not working w ggplot anymore\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(alpha = 0.7) + # aes(size = Population, frame = Year) not working\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none') #removes legend\n\nggplotly(gg)\n\n\n\n\n\n\n\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)\n\n\n\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launch-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launch-r-packages",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "exam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Hi! My Name is Shermainn and I am a Masters’ degree student from Singapore Management University in IT Business majoring in Financial Technology and Analytics. I love trying new foods and travelling to new places."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "In this exercise, I will be learning on how to:\n\nControl the placement of annotation on a graph using functions provided in ggrepel package\nCreate professional publication quality figures using functions provided in ggthemes and hrbrthemes packages\nPlot composite figures by combining ggplot2 graphs using patchwork package"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#install-and-load-required-libraries",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#install-and-load-required-libraries",
    "title": "Hands-on Exercise 2",
    "section": "2.1. Install and Load required libraries",
    "text": "2.1. Install and Load required libraries\nCode chunk below is used to check if all 4 R packages (ggrepel, ggthemes, hrbrthemes & patchwork) are installed and loaded onto the environment.\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#import-data",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#import-data",
    "title": "Hands-on Exercise 2",
    "section": "2.2. Import data",
    "text": "2.2. Import data\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#notched-boxplot",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#notched-boxplot",
    "title": "Hands-on Exercise 2",
    "section": "7.1. Notched Boxplot",
    "text": "7.1. Notched Boxplot\nUsing Patchwork, I will using a notched boxplot to find the sample mean of the distribution of English scores and Math scores based on gender (female and male). From using the patchwork package, I am able to see the box-plot diagrams side by side which is much easier to make comparisons and the boxplot diagrams allow me to determine that the mean scores for Math between both genders are similar whereas for English scores, females have a higher mean score as compared to males. I added in ggtheme (theme_excel()) so that the diagram is visually more readable.\n\nNotched Boxplot of English and Math ScoresPatchwork of English and Math scores\n\n\n\nm1 &lt;- ggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\ne1 &lt;- ggplot(data=exam_data, \n       aes(y = ENGLISH, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE) \ne1#\n\n\n\n\n\n\n\n\n\n\n\npatchwork &lt;- m1 + e1 \npatchwork & theme_excel()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#violin-plot",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#violin-plot",
    "title": "Hands-on Exercise 2",
    "section": "7.2. Violin Plot",
    "text": "7.2. Violin Plot\nTo compare the different scores between English, Science and Math among the different students, I used a violin plot to compare them. To find out the number of students that scored a higher score of above 90, we will be using ggrepel to find out the number of students that score that.\n\nDefault violin plot by gender and subjectsStudents that scored more than 90 in each subject (using ggrepel)Patchwork of students that scored more than 90 in each subject\n\n\n\nexam_long &lt;- exam_data %&gt;%\n  pivot_longer(cols = c(ENGLISH, MATHS, SCIENCE),\n               names_to = \"Subject\",\n               values_to = \"Score\")\n\nggplot(exam_long, aes(x = Subject, y = Score, fill = Subject)) +\n  geom_violin(trim = FALSE, alpha = 0.7) +\n  geom_jitter(width = 0.1, alpha = 0.3, size = 1, color = \"black\") +\n  facet_wrap(~GENDER) +\n  labs(title = \"Score Distribution by Students\",\n       x = \"Subject\",\n       y = \"Score\") +\n  theme(legend.position = \"none\") \n\n\n\n\n\n\n\n\n\n\nFrom the results, it is seen that there are 17 students from each gender that scored more than 90 in Math but there are 5 students and 3 students that scored above 90 for English and Science respectively. It is also shown that there are more female students (4) who scored 90 as compared to male students (only 1) in English and there is more male students (2) that scored more than 90 in Science as compared to female students (only 1).\n\nexam_long &lt;- exam_data %&gt;%\n  pivot_longer(cols = c(ENGLISH),\n               names_to = \"Subject\",\n               values_to = \"Score\")\n\n\nhighlight_data &lt;- exam_long %&gt;%\n  filter(Score &gt; 90)\n\ne2 &lt;- ggplot(exam_long, aes(x = Subject, y = Score, fill = GENDER)) +\n  geom_violin(trim = FALSE, alpha = 0.7, position = position_dodge(width = 0.9)) +\n  geom_jitter(\n    aes(color = GENDER),\n    alpha = 0.3,\n    size = 1,\n    position = position_jitterdodge(jitter.width = 0.15, dodge.width = 0.9)\n  )  +\n\n  # Add ggrepel labels for top scorers\n  geom_label_repel(\n    data = highlight_data,\n    aes(label = ID, color = GENDER),\n    position = position_jitterdodge(jitter.width = 0.15, dodge.width = 0.9),\n    fontface = \"bold\",\n    size = 3,\n    box.padding = 0.4,\n    label.padding = 0.3,     # Padding inside the box\n    label.size = 0.3,        # Thickness of the box border\n    fill = \"white\",          # Background color of the label\n    max.overlaps = 60,\n    show.legend = FALSE\n  ) +\n  labs(\n    title = \"English Scores based on Gender\",\n    subtitle = \"Labels for students who scored above 90\",\n    x = \"Subject\",\n    y = \"Score\"\n  ) \ne2#\n\n\n\n\n\n\n\n\n\nexam_long &lt;- exam_data %&gt;%\n  pivot_longer(cols = c(MATHS),\n               names_to = \"Subject\",\n               values_to = \"Score\")\n\n\nhighlight_data &lt;- exam_long %&gt;%\n  filter(Score &gt; 90)\n\nm2 &lt;- ggplot(exam_long, aes(x = Subject, y = Score, fill = GENDER)) +\n  geom_violin(trim = FALSE, alpha = 0.7, position = position_dodge(width = 0.9)) +\n  geom_jitter(\n    aes(color = GENDER),\n    alpha = 0.3,\n    size = 1,\n    position = position_jitterdodge(jitter.width = 0.15, dodge.width = 0.9)\n  )  +\n\n  # Add ggrepel labels for top scorers\n  geom_label_repel(\n    data = highlight_data,\n    aes(label = ID, color = GENDER),\n    position = position_jitterdodge(jitter.width = 0.15, dodge.width = 0.9),\n    fontface = \"bold\",\n    size = 3,\n    box.padding = 0.4,\n    label.padding = 0.3,     # Padding inside the box\n    label.size = 0.3,        # Thickness of the box border\n    fill = \"white\",          # Background color of the label\n    max.overlaps = 60,\n    show.legend = FALSE\n  ) +\n  labs(\n    title = \"Math Scores based on Gender\",\n    subtitle = \"Labels for students who scored above 90\",\n    x = \"Subject\",\n    y = \"Score\"\n  ) \nm2#\n\n\n\n\n\n\n\n\n\nexam_long &lt;- exam_data %&gt;%\n  pivot_longer(cols = c(SCIENCE),\n               names_to = \"Subject\",\n               values_to = \"Score\")\n\n\nhighlight_data &lt;- exam_long %&gt;%\n  filter(Score &gt; 90)\n\ns2 &lt;- ggplot(exam_long, aes(x = Subject, y = Score, fill = GENDER)) +\n  geom_violin(trim = FALSE, alpha = 0.7, position = position_dodge(width = 0.9)) +\n  geom_jitter(\n    aes(color = GENDER),\n    alpha = 0.3,\n    size = 1,\n    position = position_jitterdodge(jitter.width = 0.15, dodge.width = 0.9)\n  )  +\n\n  # Add ggrepel labels for top scorers\n  geom_label_repel(\n    data = highlight_data,\n    aes(label = ID, color = GENDER),\n    position = position_jitterdodge(jitter.width = 0.15, dodge.width = 0.9),\n    fontface = \"bold\",\n    size = 3,\n    box.padding = 0.4,\n    label.padding = 0.3,     # Padding inside the box\n    label.size = 0.3,        # Thickness of the box border\n    fill = \"white\",          # Background color of the label\n    max.overlaps = 60,\n    show.legend = FALSE\n  ) +\n  labs(\n    title = \"Science Scores based on Gender\",\n    subtitle = \"Labels for students who scored above 90\",\n    x = \"Subject\",\n    y = \"Score\"\n  ) \ns2#\n\n\n\n\n\n\n\n\n\n\n\n#|fig-width: 15\n#|fig-height: 7\n#|echo: false\n((s2 / e2) |  m2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#dot-plot",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#dot-plot",
    "title": "Hands-on Exercise 2",
    "section": "7.3. Dot Plot",
    "text": "7.3. Dot Plot\nI will be plotting a dot plot to compare the results between the female and male students who scored well (above 80) in English and Math. Based on using the + sign patchworkpackage, I am able to clearly see the number of students that scored above 80 and based on the figure, it can be observed that Math has more students that scored above 80. The number of dots represent the number of students that scored above 80 for each subject respectively.\n\nDefault Dot Plotspatchwork (using + sign)\n\n\n\nhigh_english &lt;- exam_data[exam_data$ENGLISH &gt; 80, ]\ne3 &lt;- ggplot(high_english, aes(x = GENDER, y = ENGLISH)) +\n  geom_dotplot(\n    binaxis = 'y', \n    stackdir = 'center', \n    dotsize = 0.7, \n    binwidth = 1) +\n  labs(title = \"Students Scoring Above 80\",\n       x = \"Gender\",\n       y = \"English Score\") +\n  theme_excel()\ne3#\n\n\n\n\n\n\n\n\n\nhigh_math &lt;- exam_data[exam_data$MATHS &gt; 80, ]\nm3 &lt;- ggplot(high_math, aes(x = GENDER, y = MATHS)) +\n  geom_dotplot(\n    binaxis = 'y', \n    stackdir = 'center', \n    dotsize = 0.7, \n    binwidth = 1) +\n  labs(title = \"Students Scoring Above 80\",\n       x = \"Gender\",\n       y = \"Math Score\") +\n  theme_excel()\nm3#\n\n\n\n\n\n\n\n\n\n\n\ne3 + m3"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#pie-chart-and-bar-chart",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#pie-chart-and-bar-chart",
    "title": "Hands-on Exercise 2",
    "section": "7.4. Pie Chart and Bar Chart",
    "text": "7.4. Pie Chart and Bar Chart\n\nPie Chart: Number of Students based on Gender for EnglishBar Chart: Average English Score by GenderPatchwork (using “/”,“|”,“()” to combine 3 plots)Patchwork (using insert): English score by Gender\n\n\n\ngender_counts &lt;- exam_data %&gt;%\n  group_by(GENDER) %&gt;%\n  summarise(Count = n())\n\np1 &lt;- ggplot(gender_counts, aes(x = \"\", y = Count, fill = GENDER)) +\n  geom_bar(stat = \"identity\", width = 1) +\n  coord_polar(theta = \"y\") +  # This transforms the bar chart to a pie chart\n  theme_void() +  # Removes axes and background\n  labs(title = \"Number of Students in English\") +\n  theme(\n    plot.title = element_text(size = 9),\n    plot.background = element_rect(fill = \"white\")\n  )\np1#\n\n\n\n\n\n\n\n\n\n\n\navg_english &lt;- exam_data %&gt;%\n  group_by(GENDER) %&gt;%\n  summarise(Avg_English = mean(ENGLISH))\n\n# Plot\na1 &lt;- ggplot(avg_english, aes(x = GENDER, y = Avg_English)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Average English Score by Gender\",\n       x = \"Gender\",\n       y = \"Average Score\") +\n  theme_excel()\na1#\n\n\n\n\n\n\n\n\n\navg_maths &lt;- exam_data %&gt;%\n  group_by(GENDER) %&gt;%\n  summarise(Avg_Maths = mean(MATHS))\n\n# Plot\na2 &lt;- ggplot(avg_maths, aes(x = GENDER, y = Avg_Maths)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Average Maths Score by Gender\",\n       x = \"Gender\",\n       y = \"Average Score\") +\n  theme_excel()\na2#\n\n\n\n\n\n\n\n\n\navg_science &lt;- exam_data %&gt;%\n  group_by(GENDER) %&gt;%\n  summarise(Avg_Science = mean(SCIENCE))\n\n# Plot\na3 &lt;- ggplot(avg_science, aes(x = GENDER, y = Avg_Science)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Average Science Score by Gender\",\n       x = \"Gender\",\n       y = \"Average Score\") +\n  theme_excel()\na3#\n\n\n\n\n\n\n\n\n\n\n\na1/a2|a3\n\n\n\n\n\n\n\n\n\n\n\na1 + inset_element(p1, \n                   left = 0.7,    \n                   bottom = 0,    \n                   right = 1,     \n                   top = 0.3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#raincloud-plot",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#raincloud-plot",
    "title": "Hands-on Exercise 2",
    "section": "7.5. Raincloud Plot",
    "text": "7.5. Raincloud Plot"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#diverging-stacked-bar-chart",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#diverging-stacked-bar-chart",
    "title": "Hands-on Exercise 2",
    "section": "7.6. Diverging Stacked Bar Chart",
    "text": "7.6. Diverging Stacked Bar Chart"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#packed-bars",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#packed-bars",
    "title": "Hands-on Exercise 2",
    "section": "7.7. Packed Bars",
    "text": "7.7. Packed Bars"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "title": "Hands-on_Ex04",
    "section": "",
    "text": "I will be using the same data across all 4 sections.\n\n\n\n\nCode\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)\n\n\n\n\n\n\n\nCode\nJakarta &lt;- read_csv(\"data/COVID-19_DKI_Jakarta.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#load-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#load-packages",
    "title": "Hands-on_Ex04",
    "section": "",
    "text": "Code\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#load-data",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#load-data",
    "title": "Hands-on_Ex04",
    "section": "",
    "text": "Code\nJakarta &lt;- read_csv(\"data/COVID-19_DKI_Jakarta.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#finishing-touch",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#finishing-touch",
    "title": "Hands-on_Ex04",
    "section": "Finishing Touch",
    "text": "Finishing Touch\ncoord_flip() is used to flip the chart horizontally to give a raincloud appearance.\n\n\nCode\nJakarta_filtered &lt;- Jakarta %&gt;%\n  count(City, sort = TRUE) %&gt;%\n  top_n(3, n) %&gt;%\n  inner_join(Jakarta, by = \"City\")\n\nggplot(Jakarta_filtered, \n       aes(x = City, \n           y = Death)) +\n  stat_halfeye(adjust = 0.5,\n               justification = 0,\n               .width = 0,\n               point_colour = NA) +\n        geom_boxplot(width = .1,\n               outlier.shape = NA) +\n    stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2) +\n  coord_flip()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#ggplot-2-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#ggplot-2-methods",
    "title": "Hands-on_Ex04",
    "section": "3.1 ggplot 2 methods",
    "text": "3.1 ggplot 2 methods\n\n\nCode\npacman::p_load(plotly, crosstalk, DT, \n               ggdist, ggridges, colorspace,\n               gganimate, tidyverse)\n\n\n\nPoint Estimates - ggplot2 methodsStandard Error barsConfidence Interval of point estimatesInteractive Error Bars\n\n\n\ngroup_byb() of dplyr package - group observation by Recovered\nsummarise() computes the count of observations, mean and std.\nmutate() derives standard error of Recovered by City and\noutput is saved as my_sum\n\n\n\nCode\nmy_sum &lt;- Jakarta %&gt;%\n  group_by(City) %&gt;%\n  summarise(\n    n=n(),\n    mean=mean(Recovered),\n    sd=sd(Recovered)\n    ) %&gt;%\n  mutate(se=sd/sqrt(n-1))\n\n\n\n\nCode\nknitr::kable(head(my_sum), format = 'html')\n\n\n\n\n\nCity\nn\nmean\nsd\nse\n\n\n\n\nJAKARTA BARAT\n56\n2436.2679\n1376.4428\n185.59951\n\n\nJAKARTA PUSAT\n44\n1755.3636\n760.2751\n115.94087\n\n\nJAKARTA SELATAN\n65\n2420.9077\n1179.3163\n147.41454\n\n\nJAKARTA TIMUR\n65\n2979.4462\n1098.6139\n137.32674\n\n\nJAKARTA UTARA\n31\n3081.3548\n1322.5012\n241.45458\n\n\nKAB.ADM.KEP.SERIBU\n6\n202.3333\n103.7915\n46.41695\n\n\n\n\n\n\n\n\n\nCode\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=City, \n        ymin=mean-se, #error bars are computed\n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=City, \n            y=mean), \n           stat=\"identity\", #need to indicate this!!\n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean Recovered by City\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(City, -mean), \n        ymin=mean-1.96*se, \n        ymax=mean+1.96*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=City, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Recovered\",  #labs is used to change x-axis label\n       title = \"95% confidence interval of mean Recovered by City\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nshared_df = SharedData$new(my_sum)\n\nbscols(widths = c(4,8),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(aes(\n                     x=reorder(City, -mean),\n                     ymin=mean-2.58*se, \n                     ymax=mean+2.58*se), \n                     width=0.2, \n                     colour=\"black\", \n                     alpha=0.9, \n                     size=0.5) +\n                   geom_point(aes(\n                     x=City, \n                     y=mean, \n                     text = paste(\"City:\", `City`, \n                                  \"&lt;br&gt;N:\", `n`,\n                                  \"&lt;br&gt;Avg. Number:\", round(mean, digits = 2),\n                                  \"&lt;br&gt;95% CI:[\", \n                                  round((mean-2.58*se), digits = 2), \",\",\n                                  round((mean+2.58*se), digits = 2),\"]\")),\n                     stat=\"identity\", \n                     color=\"red\", \n                     size = 1.5, \n                     alpha=1) + \n                   xlab(\"City\") + \n                   ylab(\"Average Number\") + \n                   theme_minimal() + \n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.5, hjust=1)) +\n                   ggtitle(\"99% Confidence interval of average /&lt;br&gt;Recovered by City\")), \n                tooltip = \"text\"), \n       DT::datatable(shared_df, \n                     rownames = FALSE, \n                     class=\"compact\", \n                     width=\"100%\", \n                     options = list(pageLength = 10,\n                                    scrollX=T), \n                     colnames = c(\"No. of people\", \n                                  \"Avg Recovered\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns=c('mean', 'sd', 'se'),\n                     digits=2))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#ggdist-package",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#ggdist-package",
    "title": "Hands-on_Ex04",
    "section": "3.2 ggdist package",
    "text": "3.2 ggdist package\n\nPoint Estimates - 95% Confidence IntervalPoint Estimates - 99% Confidence Interval\n\n\n\n\nCode\nJakarta %&gt;%\n  ggplot(aes(x = City, \n             y = Death)) +\n  stat_pointinterval(.width = 0.95,\n  .point = median,\n  .interval = qi) +\n  labs(\n    title = \"Visualising confidence intervals of mean deaths\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nJakarta %&gt;%\n  ggplot(aes(x = City, \n             y = Death)) +\n  stat_pointinterval(.width = 0.99,\n  .point = median,\n  .interval = qi) +\n  labs(\n    title = \"Visualising confidence intervals of mean deaths\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n\n\n\nPoint Estimates - Visuals\n\n\nCode\nJakarta %&gt;%\n  ggplot(aes(x = City, \n             y = Death)) +\n  stat_gradientinterval(\n    fill = \"skyblue\",\n    show.legend = TRUE ) +\n  labs(\n    title = \"Visualising confidence intervals of mean deaths\",\n    subtitle = \"Gradient + interval plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#hypothetical-outcome-plots-hops",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#hypothetical-outcome-plots-hops",
    "title": "Hands-on_Ex04",
    "section": "3.3 Hypothetical Outcome Plots (HOPs)",
    "text": "3.3 Hypothetical Outcome Plots (HOPs)\n\nInstall ungeviz package\n\n\nCode\n#everything downloaded from github just need to download once so add in the eval = False into R\ndevtools::install_github(\"wilkelab/ungeviz\")\n\n\n\n\nCode\nlibrary(ungeviz)\n\n\nHOPs\n\n\nCode\nggplot(data = Jakarta, \n       (aes(x = factor(City), \n            y = Death))) +\n  geom_point(position = position_jitter(\n    height = 0.3, \n    width = 0.05), \n    size = 0.4, \n    color = \"#0072B2\", \n    alpha = 1/2) +\n  geom_hpline(data = sampler(25, \n                             group = City), \n              height = 0.6, \n              color = \"#D55E00\") +\n  theme_bw() + \n  transition_states(.draw, 1, 3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualizing-regression-parameters",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualizing-regression-parameters",
    "title": "Hands-on_Ex04",
    "section": "Visualizing Regression Parameters",
    "text": "Visualizing Regression Parameters\n\n\nCode\nggcoefstats(model1,   #visualize the parameters of regression model\n            output = \"plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#load-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#load-r-packages",
    "title": "Hands-on_Ex04",
    "section": "Load R packages",
    "text": "Load R packages\n\n\nCode\npacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#import-data",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#import-data",
    "title": "Hands-on_Ex04",
    "section": "Import Data",
    "text": "Import Data\n\n\nCode\ncovid19 &lt;- read_csv(\"data/COVID-19_DKI_Jakarta.csv\") %&gt;%\n  mutate_if(is.character, as.factor)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#funnelplotr-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#funnelplotr-methods",
    "title": "Hands-on_Ex04",
    "section": "5.1 FunnelPlotR Methods",
    "text": "5.1 FunnelPlotR Methods\nFunnelPlotR package uses ggplot to generate funnel plots. It requires a numerator (events of interest), denominator (population to be considered) and group. The key arguments selected for customisation are:\n\nlimit: plot limits (95 or 99).\nlabel_outliers: to label outliers (true or false).\nPoisson_limits: to add Poisson limits to the plot.\nOD_adjust: to add overdispersed limits to the plot.\nxrange and yrange: to specify the range to display for axes, acts like a zoom function.\nOther aesthetic components such as graph title, axis labels etc.\n\n\n\nCode\nfunnel_plot(\n  .data = covid19,\n  numerator = Positive,\n  denominator = Death,\n  group = `Sub-district`\n)\n\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \n\n\nThings to learn from the code chunk above.\n\ngroup in this function is different from the scatterplot. Here, it defines the level of the points to be plotted i.e. Sub-district, District or City. If Cityc is chosen, there are only six data points.\nBy default, data_typeargument is “SR”.\nlimit: Plot limits, accepted values are: 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution.\n\n\nMakeover 1Makeover 2\n\n\n+ data_type argument is used to change from default “SR” to “PR” (i.e. proportions). + xrange and yrange are used to set the range of x-axis and y-axis\n\n\nCode\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",     #&lt;&lt;\n  xrange = c(0, 6500),  #&lt;&lt;\n  yrange = c(0, 0.05)   #&lt;&lt;\n)\n\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\nlabel = NA argument is to removed the default label outliers feature.\ntitle argument is used to add plot title.\nx_label and y_label arguments are used to add/edit x-axis and y-axis titles.\n\n\n\nCode\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",   \n  xrange = c(0, 6500),  \n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\", #&lt;&lt;           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #&lt;&lt;\n  y_label = \"Cumulative Fatality Rate\"  #&lt;&lt;\n)\n\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#fair-visual-comparison-ggplot-2-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#fair-visual-comparison-ggplot-2-methods",
    "title": "Hands-on_Ex04",
    "section": "5.2 Fair Visual Comparison: ggplot 2 methods",
    "text": "5.2 Fair Visual Comparison: ggplot 2 methods\n\n\nCode\n#basic fields\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death / Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n#fit.mean\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)\n\n#Calculate upper and lower limits for 95% and 99.9% Confidence Interval\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)\n\n\n\nStatic plotInteractive plot: plotly + ggplot2\n\n\n\n\nCode\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nfp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "title": "Hands-on_Ex06",
    "section": "",
    "text": "Overview:\nTo plot a calendar heatmap by using ggplot2 package.\nInstall and Load Package:\n\n\nCode\npacman::p_load(scales, viridis, lubridate, ggthemes,\n               gridExtra, readxl, knitr, data.table,\n               CGPfunctions, ggHoriPlot, tidyverse)\n\n\nImport Data:\n\n\nCode\nattacks &lt;- read_csv(\"data/eventlog.csv\")\n\n\nExamine data structure:\n\n\nCode\nkable(head(attacks))\n\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\nData Prep:\nStep 1:\n2 new fields need to be derived. wkday and hour was created.\n\n\nCode\nmake_hr_wkday &lt;- function(ts, sc, tz) {\n  real_times &lt;- ymd_hms(ts, \n                        tz = tz[1], \n                        quiet = TRUE)\n  dt &lt;- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n}\n\n#ymd_hms() and hour() are from lubridate package, and\n#weekdays() is a base R function.\n\n\nStep 2:\n\n\nCode\nwkday_levels &lt;- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks &lt;- attacks %&gt;%\n  group_by(tz) %&gt;%\n  do(make_hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %&gt;% \n  ungroup() %&gt;% \n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour  = factor(\n      hour, levels = 0:23))\n\n#Beside extracting the necessary data into attacks data frame, mutate() of dplyr package is used to convert wkday and hour fields into factor so they’ll be ordered when plotting\n\n\n\n\nCode\nkable(head(attacks))\n\n\n\n\n\ntz\nsource_country\nwkday\nhour\n\n\n\n\nAfrica/Cairo\nBG\nSaturday\n20\n\n\nAfrica/Cairo\nTW\nSunday\n6\n\n\nAfrica/Cairo\nTW\nSunday\n8\n\n\nAfrica/Cairo\nCN\nSunday\n11\n\n\nAfrica/Cairo\nUS\nSunday\n15\n\n\nAfrica/Cairo\nCA\nMonday\n11\n\n\n\n\n\nBuild Heatmap:\n\n\nCode\ngrouped &lt;- attacks %&gt;% \n  count(wkday, hour) %&gt;% \n  ungroup() %&gt;%\n  na.omit()\n\nggplot(grouped, \n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \ntheme_tufte(base_family = \"Helvetica\") + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )\n\n\n\n\n\n\n\n\n\nThings to note:\n\na tibble data table called grouped is derived by aggregating the attack by wkday and hour fields.\na new field called n is derived by using group_by() and count() functions.\nna.omit() is used to exclude missing value.\ngeom_tile() is used to plot tiles (grids) at each x and y position. color and size arguments are used to specify the border color and line size of the tiles.\ntheme_tufte() of ggthemes package is used to remove unnecessary chart junk. To learn which visual components of default ggplot2 have been excluded, you are encouraged to comment out this line to examine the default plot.\ncoord_equal() is used to ensure the plot will have an aspect ratio of 1:1.\nscale_fill_gradient() function is used to creates a two colour gradient (low-high).\n\nBuild multiple heatmaps\nExample: Top 4 countries with highest attacks\nStep 1: derive attack by country object\n\ncount the number of attacks by country,\ncalculate the percent of attackes by country, and\nsave the results in a tibble data frame.\n\n\n\nCode\nattacks_by_country &lt;- count(\n  attacks, source_country) %&gt;%\n  mutate(percent = percent(n/sum(n))) %&gt;%\n  arrange(desc(n))\n\n\nStep 2: Preparing the tidy data frame\n\n\nCode\n#Extract attack records\ntop4 &lt;- attacks_by_country$source_country[1:4]\ntop4_attacks &lt;- attacks %&gt;%\n  filter(source_country %in% top4) %&gt;%\n  count(source_country, wkday, hour) %&gt;%\n  ungroup() %&gt;%\n  mutate(source_country = factor(\n    source_country, levels = top4)) %&gt;%\n  na.omit()\n\n\nStep 3: Plot the maps\n\n\nCode\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"Helvetica\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6) )\n\n\n\n\n\n\n\n\n\nCycle Plot\nStep 1: Data Import\n\n\nCode\nair &lt;- read_excel(\"data/arrivals_by_air.xlsx\")\n\n\nStep 2: Derive month and year fields\n\n\nCode\nair$month &lt;- factor(month(air$`Month-Year`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nair$year &lt;- year(ymd(air$`Month-Year`))\n\n\nStep 3: Extract Target Country\n\n\nCode\nVietnam &lt;- air %&gt;% \n  select(`Vietnam`, \n         month, \n         year) %&gt;%\n  filter(year &gt;= 2010)\n\n\nStep 4: Computing year average arrivals by month\n\n\nCode\nhline.data &lt;- Vietnam %&gt;% \n  group_by(month) %&gt;%\n  summarise(avgvalue = mean(`Vietnam`))\n\n\nStep 5: Plot cycle plot\n\n\nCode\nlibrary(ggrepel)\nggplot() + \n  geom_line(data=Vietnam,\n            aes(x=year, \n                y=`Vietnam`, \n                group=month), \n            colour=\"black\") +\n  geom_hline(aes(yintercept=avgvalue), \n             data=hline.data, \n             linetype=6, \n             colour=\"red\", \n             size=0.5) + \n  geom_text_repel() +\n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\") +\n  xlab(\"\") +\n  ylab(\"No. of Visitors\") +\n  theme_tufte(base_family = \"Helvetica\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\nSlopegraph\nStep 1: Data Import\n\n\nCode\nrice &lt;- read_csv(\"data/rice.csv\")\n\n\nStep 2: Plot slopegraph\n\nFor effective data visualisation design, factor() is used convert the value type of Year field from numeric to factor.\n\n\n\nCode\nrice %&gt;% \n  mutate(Year = factor(Year)) %&gt;%\n  filter(Year %in% c(1961, 1980)) %&gt;%\n  newggslopegraph(Year, Yield, Country,\n                Title = \"Rice Yield of Top 11 Asian Counties\",\n                SubTitle = \"1961-1980\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html",
    "title": "Hands-on_Ex08",
    "section": "",
    "text": "In this hands-on exercise, I will be learning how to plot the following plots:\n\nChoropleth mapping\nProportional symbol maps (also known as graduate symbol maps)\nanalytical maps"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#load-packages",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#load-packages",
    "title": "Hands-on_Ex08",
    "section": "Load Packages",
    "text": "Load Packages\nThe code chunk below will be used to install and load these packages in RStudio.\n\n\nCode\npacman::p_load(sf, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#load-data",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#load-data",
    "title": "Hands-on_Ex08",
    "section": "Load Data",
    "text": "Load Data\nTwo data set will be used to create the choropleth map. They are:\n\nMaster Plan 2014 Subzone Boundary (Web) (i.e. MP14_SUBZONE_WEB_PL) in ESRI shapefile format. It can be downloaded at data.gov.sg This is a geospatial data. It consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014.\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format (i.e. respopagesextod2011to2020.csv). This is an aspatial data fie. It can be downloaded at Department of Statistics, Singapore Although it does not contain any coordinates values, but it’s PA and SZ fields can be used as unique identifiers to geocode to MP14_SUBZONE_WEB_PL shapefile.\n\n\n\nCode\nmpsz &lt;- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\shermainn\\ISSS608new\\Hands-on_Ex\\Hands-on_Ex08\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nCode\nmpsz\n\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\n\n\nCode\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#prep-data",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#prep-data",
    "title": "Hands-on_Ex08",
    "section": "Prep Data",
    "text": "Prep Data\nThe data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.\n\nYOUNG: age group 0 to 4 until age groyup 20 to 24,\nECONOMY ACTIVE: age group 25-29 until age group 60-64,\nAGED: age group 65 and above,\nTOTAL: all age group, and\nDEPENDENCY: the ratio between young and aged against economy active group\n\n\nWrangle Data\n\npivot_wider() of tidyr package, and\nmutate(), filter(), group_by() and select() of dplyr package\n\n\n\nCode\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup() %&gt;%\n  pivot_wider(names_from=AG, \n              values_from=POP) %&gt;%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %&gt;%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%&gt;%\nmutate(`AGED`=rowSums(.[16:21])) %&gt;%\nmutate(`TOTAL`=rowSums(.[3:21])) %&gt;%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n\n\n\nJoin both data sets together (attribute and geospatial)\n\nConvert values in PA and SZ fields to uppercase letters\n\n\n\nCode\n#Make all values to upper case\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate(across(c(PA, SZ), toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\n\n#Join data together\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#choropleth-mapping-using-tmap",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#choropleth-mapping-using-tmap",
    "title": "Hands-on_Ex08",
    "section": "Choropleth Mapping using tmap",
    "text": "Choropleth Mapping using tmap\nTwo Approaches:\n\nPlotting a thematic map quickly by using qtm().\nPlotting highly customisable thematic map by using tmap elements.\n\n\nFirst method: use qtm()Second Method: using tmap elements to make a custom mapDifferent Functions used in tmap()Data Classification methods of tmapDifferent number of classes (2,6,10,20)\n\n\n\n\nCode\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\ntmap_mode() with “plot” option is used to produce a static map. For interactive mode, “view” option should be used.\nfill argument is used to map the attribute (i.e. DEPENDENCY)\n\n\n\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_polygons(fill = \"DEPENDENCY\", \n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5,\n                values = \"brewer.blues\"),\n              fill.legend = tm_legend(\n                title = \"Dependency ratio\")) +\n  tm_title(\"Distribution of Dependency Ratio by planning subzone\") +\n  tm_layout(frame = TRUE) +\n  tm_borders(fill_alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\n\n\n\n\nDrawing base map\n\n\n\nCode\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\n\n\n\n\nDraw choropleth map using tm_polygons()\n\n\nNeed to assign target variable (i.e. Dependency) to the tm_polygons()\nThings to learn from tm_polygons():\n\nThe default interval binning used to draw the choropleth map is called “pretty”. A detailed discussion of the data classification methods supported by tmap will be provided in sub-section 4.3.\nThe default colour scheme used is YlOrRd of ColorBrewer. You will learn more about the color scheme in sub-section 4.4.\nBy default, Missing value will be shaded in grey.\n\n\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\n\nDrawing a choropleth map using tm_fill() and tm_border()\n\n\ntm_fill() shades the polygons by using the default colour scheme\ntm_borders() adds the borders of the shapefile onto the choropleth map.\nThe alpha argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).\nBeside alpha argument, there are three other arguments for tm_borders(), they are:\n\ncol = border colour,\nlwd = border line width. The default is 1, and\nlty = border line type. The default is “solid”.\n\n\n\n\nCode\n# Shades polygons by using default colour scheme\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\nCode\n#To add boundary\ntm_shape(mpsz_pop2020)+\n  tm_polygons(fill = \"DEPENDENCY\") +\n  tm_borders(lwd = 0.01,  \n             fill_alpha = 0.1)\n\n\n\n\n\n\n\n\n\n\n\nMost choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.\ntmap provides a total ten data classification methods, namely: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks.\nTo define a data classification method, the style argument of tm_fill() or tm_polygons() will be used.\n\nPlot choropleth maps with built-in classification methods\n\nThe code chunk below shows a quantile data classification that used 5 classes.\n\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"jenks\",\n        n = 5)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\nEqual data classification method\n\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"equal\",\n        n = 5)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\nBased on my observations,\n\nAs the number of classes increases, the classification gets more in-depth and the class size gets smaller\nThe colours on the map also becomes more varied\n\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"jenks\",\n        n = 2)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"jenks\",\n        n = 6)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"jenks\",\n        n = 10)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"jenks\",\n        n = 20)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCustom Break in Choropleth Map\nCategory breaks are normally in-built, so to override it:\n\nbreakpoints can be set explicitly by means of the breaks argument to the tm_fill().\nin tmap the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the breaks option (the values must be in increasing order).\n\n\n\nCode\nsummary(mpsz_pop2020$DEPENDENCY)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1111  0.7147  0.7867  0.8585  0.8763 19.0000      92 \n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\nColour Scheme\n\nUse ColourBrewer palette\n\nTo change the colour, we assign the preferred colour to values argument of tm_scale_intervals() as shown in the code chunk below.\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"quantile\",\n        n = 5,\n        values = \"brewer.greens\")) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\n\nChange to the opposite colours\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"quantile\",\n        n = 5,\n        values = \"-brewer.greens\")) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\nMap Layouts\n\nMap Legend\nIn tmap, several tm_legend() options are provided to change the placement, format and appearance of the legend.\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"jenks\",\n        n = 5,\n        values = \"brewer.greens\"),\n      fill.legend = tm_legend(\n        title = \"Dependency ratio\")) +\n  tm_borders(fill_alpha = 0.5) +\n  tm_title(\"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\")\n\n\n\n\n\n\n\n\n\n\n\nMap Style\ntmap allows a wide variety of layout settings to be changed. They can be called by using tmap_style().\nThe code chunk below shows the classic style is used.\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\n\n\n\n\n\n\n\n\n\n\nCartographic Furniture\ntmap also also provides arguments to draw other map furniture such as compass, scale bar and grid lines.\nIn the code chunk below, tm_compass(), tm_scale_bar() and tm_grid() are used to add compass, scale bar and grid lines onto the choropleth map.\n\nTo reset the default style: tmap_style(\"white\")\n\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_polygons(fill = \"DEPENDENCY\", \n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5,\n                values = \"brewer.blues\"),\n              fill.legend = tm_legend(\n                title = \"Dependency ratio\")) +\n  tm_title(\"Distribution of Dependency Ratio by planning subzone\") +\n  tm_layout(frame = TRUE) +\n  tm_borders(fill_alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\n\n\n\n\nDrawing Small Multiple Choropleth Maps\nSmall multiple maps, also referred to as facet maps, are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.\nIn tmap, small multiple maps can be plotted in three ways:\n\nby assigning multiple values to at least one of the asthetic arguments,\nby defining a group-by variable in tm_facets(), and\nby creating multiple stand-alone maps with tmap_arrange().\n\n\nBy assigning multiple values to at least one of the aesthetic arguments\nIn this example, small multiple choropleth maps are created by defining ncols in tm_fill()\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\n\n\n\n\n\n\n\n\nsmall multiple choropleth maps are created by assigning multiple values to at least one of the aesthetic arguments\n\n\nCode\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\n\n\n\n\n\nBy defining a group-by variable in tm_facets()\nmultiple small choropleth maps are created by using tm_facets()\n\n\nCode\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\nBy creating multiple stand-alone maps with tmap_arrange()\nmultiple small choropleth maps are created by creating multiple stand-alone maps with tmap_arrange().\n\n\nCode\nyoungmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\n\n\nMappping Spatial Object Meeting a Selection Criterion\nuse selection funtion to map spatial objects meeting the selection criterion.\n\n\nCode\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 1) +\n  tm_layout(legend.outside = TRUE,\n            legend.outside.position = \"right\",\n            legend.height = 0.6, \n            legend.width = 0.2,\n            legend.text.size = 0.2,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#load-package",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#load-package",
    "title": "Hands-on_Ex08",
    "section": "Load Package",
    "text": "Load Package\n\n\nCode\npacman::p_load(sf, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#data-import-and-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#data-import-and-wrangling",
    "title": "Hands-on_Ex08",
    "section": "Data Import and Wrangling",
    "text": "Data Import and Wrangling\nThe data set use for this hands-on exercise is called SGPools_svy21. The data is in csv file format.\nThe code chunk below uses read_csv() function of readr package to import SGPools_svy21.csv into R as a tibble data frame called sgpools.\n\n\nCode\nsgpools &lt;- read_csv(\"data/aspatial/SGPools_svy21.csv\")\n\nlist(sgpools) \n\n\n[[1]]\n# A tibble: 306 × 7\n   NAME           ADDRESS POSTCODE XCOORD YCOORD `OUTLET TYPE` `Gp1Gp2 Winnings`\n   &lt;chr&gt;          &lt;chr&gt;      &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;                     &lt;dbl&gt;\n 1 Livewire (Mar… 2 Bayf…    18972 30842. 29599. Branch                        5\n 2 Livewire (Res… 26 Sen…    98138 26704. 26526. Branch                       11\n 3 SportsBuzz (K… Lotus …   738078 20118. 44888. Branch                        0\n 4 SportsBuzz (P… 1 Sele…   188306 29777. 31382. Branch                       44\n 5 Prime Serango… Blk 54…   552542 32239. 39519. Branch                        0\n 6 Singapore Poo… 1A Woo…   731001 21012. 46987. Branch                        3\n 7 Singapore Poo… Blk 64…   370064 33990. 34356. Branch                       17\n 8 Singapore Poo… Blk 88…   370088 33847. 33976. Branch                       16\n 9 Singapore Poo… Blk 30…   540308 33910. 41275. Branch                       21\n10 Singapore Poo… Blk 20…   560202 29246. 38943. Branch                       25\n# ℹ 296 more rows"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#create-a-sf-data-frame-from-aspatial-data-frame",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#create-a-sf-data-frame-from-aspatial-data-frame",
    "title": "Hands-on_Ex08",
    "section": "Create a sf data frame from aspatial data frame",
    "text": "Create a sf data frame from aspatial data frame\nThe code chunk below converts sgpools data frame into a simple feature data frame by using st_as_sf() of sf packages.\nThings to learn from the arguments:\n\nThe coords argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.\nThe crs argument required you to provide the coordinates system in epsg format. EPSG: 3414 is Singapore SVY21 Projected Coordinate System. You can search for other country’s epsg code by refering to epsg.io.\nNotice that a new column called geometry has been added into the data frame.\n\n\n\nCode\nsgpools_sf &lt;- st_as_sf(sgpools, \n                       coords = c(\"XCOORD\", \"YCOORD\"),\n                       crs= 3414)\nlist(sgpools_sf)\n\n\n[[1]]\nSimple feature collection with 306 features and 5 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 7844.194 ymin: 26525.7 xmax: 45176.57 ymax: 47987.13\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 306 × 6\n   NAME                         ADDRESS POSTCODE `OUTLET TYPE` `Gp1Gp2 Winnings`\n * &lt;chr&gt;                        &lt;chr&gt;      &lt;dbl&gt; &lt;chr&gt;                     &lt;dbl&gt;\n 1 Livewire (Marina Bay Sands)  2 Bayf…    18972 Branch                        5\n 2 Livewire (Resorts World Sen… 26 Sen…    98138 Branch                       11\n 3 SportsBuzz (Kranji)          Lotus …   738078 Branch                        0\n 4 SportsBuzz (PoMo)            1 Sele…   188306 Branch                       44\n 5 Prime Serangoon North        Blk 54…   552542 Branch                        0\n 6 Singapore Pools Woodlands C… 1A Woo…   731001 Branch                        3\n 7 Singapore Pools 64 Circuit … Blk 64…   370064 Branch                       17\n 8 Singapore Pools 88 Circuit … Blk 88…   370088 Branch                       16\n 9 Singapore Pools Anchorvale … Blk 30…   540308 Branch                       21\n10 Singapore Pools Ang Mo Kio … Blk 20…   560202 Branch                       25\n# ℹ 296 more rows\n# ℹ 1 more variable: geometry &lt;POINT [m]&gt;"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#drawing-proportional-symbol-map",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#drawing-proportional-symbol-map",
    "title": "Hands-on_Ex08",
    "section": "Drawing Proportional Symbol Map",
    "text": "Drawing Proportional Symbol Map\n\nInteractive mode of tmapMake it proportionalDifferent colourFeature of tmap: multiple maps\n\n\nThe code churn below will turn on the interactive mode of tmap.\n\n\nCode\ntmap_mode(\"view\")\n\n#create an interactive point symbol map\ntm_shape(sgpools_sf) + \n  tm_bubbles(fill = \"red\",\n           size = 1,\n           col = \"black\",\n           lwd = 1)\n\n\n\n\n\n\n\n\nTo draw a proportional symbol map, we need to assign a numerical variable to the size visual attribute. The code chunks below show that the variable Gp1Gp2Winnings is assigned to size visual attribute.\n\n\nCode\ntm_shape(sgpools_sf) + \n  tm_bubbles(fill = \"red\",\n             size = \"Gp1Gp2 Winnings\",\n             col = \"black\",\n             lwd = 1)\n\n\n\n\n\n\n\n\n\nIn the code chunks below, OUTLET_TYPE variable is used as the colour attribute variable.\n\n\nCode\ntm_shape(sgpools_sf) + \n  tm_bubbles(fill = \"OUTLET TYPE\", \n             size = \"Gp1Gp2 Winnings\",\n             col = \"black\",\n             lwd = 1)\n\n\n\n\n\n\n\n\n\n\nAn impressive and little-know feature of tmap’s view mode is that it also works with faceted plots. The argument sync in tm_facets() can be used in this case to produce multiple maps with synchronised zoom and pan settings.\nBefore you end the session, it is wiser to switch tmap’s Viewer back to plot mode by using the code chunk below.\n\n\nCode\ntm_shape(sgpools_sf) + \n  tm_bubbles(fill = \"OUTLET TYPE\", \n             size = \"Gp1Gp2 Winnings\",\n             col = \"black\",\n             lwd = 1) + \n  tm_facets(by= \"OUTLET TYPE\",\n            nrow = 1,\n            sync = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#load-packages-1",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#load-packages-1",
    "title": "Hands-on_Ex08",
    "section": "Load Packages",
    "text": "Load Packages\n\n\nCode\npacman::p_load(tmap, tidyverse, sf)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#import-data",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#import-data",
    "title": "Hands-on_Ex08",
    "section": "Import Data",
    "text": "Import Data\n\n\nCode\nNGA_wp &lt;- read_rds(\"data/rds/NGA_wp.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#basic-choropleth-mapping",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#basic-choropleth-mapping",
    "title": "Hands-on_Ex08",
    "section": "Basic Choropleth Mapping",
    "text": "Basic Choropleth Mapping\nVisualising distribution of non-functional water point\n\n\nCode\np1 &lt;- tm_shape(NGA_wp) +\n  tm_polygons(fill = \"wp_functional\",\n             fill.scale = tm_scale_intervals(\n               style = \"equal\",\n               n = 10,\n               values = \"brewer.blues\"),\n             fill.legend = tm_legend(\n               position = c(\"right\", \"bottom\"))) +\n  tm_borders(lwd = 0.1,\n             fill_alpha = 1) +\n  tm_title(\"Distribution of functional water point by LGAs\")\n\np2 &lt;- tm_shape(NGA_wp) + \n  tm_polygons(fill = \"total_wp\", \n              fill.scale = tm_scale_intervals(\n                style = \"equal\",\n                n = 10,\n                values = \"brewer.blues\"),\n              fill.legend = tm_legend(\n                position = c(\"right\", \"bottom\"))) +\n  tm_borders(lwd = 0.1, \n             fill_alpha = 1) + \n  tm_title(\"Distribution of total  water point by LGAs\")\n\ntmap_arrange(p2, p1, nrow = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#choropleth-map-for-rates",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#choropleth-map-for-rates",
    "title": "Hands-on_Ex08",
    "section": "Choropleth Map for Rates",
    "text": "Choropleth Map for Rates\nCannot count but need to map rates - Water points are not equally distributed in space. That means that if we do not account for how many water points are somewhere, we end up mapping total water point size rather than our topic of interest.\n\nTabulate the proportion of functional water points and the proportion of non-functional water points in each LGA. In the following code chunk, mutate() from dplyr package is used to derive two fields, namely pct_functional and pct_nonfunctional.\nPlot map of rate\n\n\n\nCode\nNGA_wp &lt;- NGA_wp %&gt;%\n  mutate(pct_functional = wp_functional/total_wp) %&gt;%\n  mutate(pct_nonfunctional = wp_nonfunctional/total_wp)\n\ntm_shape(NGA_wp) +\n  tm_polygons(\"pct_functional\",\n              fill.scale = tm_scale_intervals(\n                style = \"equal\",\n                n = 10,\n                values = \"brewer.blues\"),\n              fill.legend = tm_legend(\n                position = c(\"right\", \"bottom\"))) + \n  tm_borders(lwd = 0.1,\n             fill_alpha = 1) +\n  tm_title(\"Rate map of functional water point by LGAs\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#extreme-value-maps",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#extreme-value-maps",
    "title": "Hands-on_Ex08",
    "section": "Extreme Value Maps",
    "text": "Extreme Value Maps\nDesigned to highlight extreme values at the lower and upper end of the scale, with the goal of identifying outliers.\nThese maps were developed in the spirit of spatializing EDA, i.e., adding spatial features to commonly used approaches in non-spatial EDA (Anselin 1994).\n\n1. Percentile Map\nThe percentile map is a special type of quantile map with six specific categories: 0-1%,1-10%, 10-50%,50-90%,90-99%, and 99-100%. The corresponding breakpoints can be derived by means of the base R quantile command, passing an explicit vector of cumulative probabilities as c(0,.01,.1,.5,.9,.99,1). Note that the begin and endpoint need to be included.\n\nWhen variables are extracted from an sf data.frame, the geometry is extracted as well. For mapping and spatial manipulation, this is the expected behavior, but many base R functions cannot deal with the geometry. Specifically, the quantile() gives an error. As a result st_set_geomtry(NULL) is used to drop geomtry field.\n\n\n\nCode\n#Data Prep\nNGA_wp &lt;- NGA_wp %&gt;%\n  drop_na()\n\n#create custom classification & extract values\npercent &lt;- c(0,.01,.1,.5,.9,.99,1)\nvar &lt;- NGA_wp[\"pct_functional\"] %&gt;%\n  st_set_geometry(NULL)\nquantile(var[,1], percent)\n\n\n       0%        1%       10%       50%       90%       99%      100% \n0.0000000 0.0000000 0.2169811 0.4791667 0.8611111 1.0000000 1.0000000 \n\n\nFirstly, we will write an R function as shown below to extract a variable (i.e. wp_nonfunctional) as a vector out of an sf data.frame.\n\narguments:\n\nvname: variable name (as character, in quotes)\ndf: name of sf data frame\n\nreturns:\n\nv: vector with values (without a column name)\n\n\n\n\nCode\nget.var &lt;- function(vname,df) {\n  v &lt;- df[vname] %&gt;% \n    st_set_geometry(NULL)\n  v &lt;- unname(v[,1])\n  return(v)\n}\n\n\n\n\nCode\npercentmap &lt;- function(vnam, df, legtitle=NA, mtitle=\"Percentile Map\"){\n  percent &lt;- c(0,.01,.1,.5,.9,.99,1)\n  var &lt;- get.var(vnam, df)\n  bperc &lt;- quantile(var, percent)\n  tm_shape(df) +\n  tm_polygons() +\n  tm_shape(df) +\n     tm_polygons(vnam,\n             title=legtitle,\n             breaks=bperc,\n             palette=\"Blues\",\n          labels=c(\"&lt; 1%\", \"1% - 10%\", \"10% - 50%\", \"50% - 90%\", \"90% - 99%\", \"&gt; 99%\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"right\",\"bottom\"))\n}\n\npercentmap(\"total_wp\", NGA_wp)\n\n\n\n\n\n\n\n\n\n\n\n2. Box map\nA box map is an augmented quartile map, with an additional lower and upper category.\nWhen there are lower outliers, then the starting point for the breaks is the minimum value, and the second break is the lower fence.\nIn contrast, when there are no lower outliers, then the starting point for the breaks will be the lower fence, and the second break is the minimum value (there will be no observations that fall in the interval between the lower fence and the minimum value).\n\nTo create a box map, a custom breaks specification will be used. However, there is a complication. The break points for the box map vary depending on whether lower or upper outliers are present.\n\n\n\nCode\nggplot(data = NGA_wp,\n       aes(x = \"\",\n           y = wp_nonfunctional)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\nCustom Breaks\nThe code chunk below is an R function that creating break points for a box map.\n\narguments:\n\nv: vector with observations\nmult: multiplier for IQR (default 1.5)\n\nreturns:\n\nbb: vector with 7 break points compute quartile and fences\n\n\n\n\nCode\nboxbreaks &lt;- function(v,mult=1.5) {\n  qv &lt;- unname(quantile(v))\n  iqr &lt;- qv[4] - qv[2]\n  upfence &lt;- qv[4] + mult * iqr\n  lofence &lt;- qv[2] - mult * iqr\n  # initialize break points vector\n  bb &lt;- vector(mode=\"numeric\",length=7)\n  # logic for lower and upper fences\n  if (lofence &lt; qv[1]) {  # no lower outliers\n    bb[1] &lt;- lofence\n    bb[2] &lt;- floor(qv[1])\n  } else {\n    bb[2] &lt;- lofence\n    bb[1] &lt;- qv[1]\n  }\n  if (upfence &gt; qv[5]) { # no upper outliers\n    bb[7] &lt;- upfence\n    bb[6] &lt;- ceiling(qv[5])\n  } else {\n    bb[6] &lt;- upfence\n    bb[7] &lt;- qv[5]\n  }\n  bb[3:5] &lt;- qv[2:4]\n  return(bb)\n}\n\n\nThe code chunk below is an R function to extract a variable as a vector out of an sf data frame.\n\narguments:\n\nvname: variable name (as character, in quotes)\ndf: name of sf data frame\n\nreturns:\n\nv: vector with values (without a column name)\n\n\n\n\nCode\nget.var &lt;- function(vname,df) {\n  v &lt;- df[vname] %&gt;% st_set_geometry(NULL)\n  v &lt;- unname(v[,1])\n  return(v)\n}\n\nvar &lt;- get.var(\"wp_nonfunctional\", NGA_wp) \nboxbreaks(var)\n\n\n[1] -56.5   0.0  14.0  34.0  61.0 131.5 278.0\n\n\n\nBoxmap function\nThe code chunk below is an R function to create a box map.\n- arguments: - vnam: variable name (as character, in quotes)\n- df: simple features polygon layer\n- legtitle: legend title\n- mtitle: map title\n- mult: multiplier for IQR\n- returns: - a tmap-element (plots a map)\n\n\nCode\nboxmap &lt;- function(vnam, df, \n                   legtitle=NA,\n                   mtitle=\"Box Map\",\n                   mult=1.5){\n  var &lt;- get.var(vnam,df)\n  bb &lt;- boxbreaks(var)\n  tm_shape(df) +\n    tm_polygons() +\n  tm_shape(df) +\n     tm_fill(vnam,title=legtitle,\n             breaks=bb,\n             palette=\"Blues\",\n          labels = c(\"lower outlier\", \n                     \"&lt; 25%\", \n                     \"25% - 50%\", \n                     \"50% - 75%\",\n                     \"&gt; 75%\", \n                     \"upper outlier\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"left\",\n                               \"top\"))\n}\n\ntmap_mode(\"plot\")\nboxmap(\"wp_nonfunctional\", NGA_wp)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html",
    "href": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html",
    "title": "Hands-on_Ex10",
    "section": "",
    "text": "create bullet chart by using ggplot2,\ncreate sparklines by using ggplot2 ,\nbuild industry standard dashboard by using R Shiny.\n\n\n\n\n\nCode\npacman::p_load(lubridate, ggthemes, reactable,\nreactablefmtr, gt, gtExtras, tidyverse,RODBC, svglite, systemfonts)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#load-packages",
    "href": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#load-packages",
    "title": "Hands-on_Ex10",
    "section": "",
    "text": "Code\npacman::p_load(lubridate, ggthemes, reactable,\nreactablefmtr, gt, gtExtras, tidyverse,RODBC, svglite, systemfonts)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#import-data-and-data-prep",
    "href": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#import-data-and-data-prep",
    "title": "Hands-on_Ex10",
    "section": "Import Data and Data Prep",
    "text": "Import Data and Data Prep\n\n\nCode\nlibrary(RODBC)\ncon &lt;- odbcConnectAccess2007('data/Coffee Chain.mdb')\ncoffeechain &lt;- sqlFetch(con, 'CoffeeChain Query')\nwrite_rds(coffeechain, \"data/CoffeeChain.rds\")\nodbcClose(con)\n\n\n\n\nCode\ncoffeechain &lt;- read_rds(\"data/CoffeeChain.rds\")\n\nproduct &lt;- coffeechain %&gt;%\n  group_by(`Product`) %&gt;%\n  summarise(`target` = sum(`Budget Sales`),\n            `current` = sum(`Sales`)) %&gt;%\n  ungroup()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#plot-bullet-chart",
    "href": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#plot-bullet-chart",
    "title": "Hands-on_Ex10",
    "section": "Plot bullet chart",
    "text": "Plot bullet chart\n\n\nCode\nggplot(product, aes(Product, current)) + \n  geom_col(aes(Product, max(target) * 1.01),\n           fill=\"grey85\", width=0.85) +\n  geom_col(aes(Product, target * 0.75),\n           fill=\"grey60\", width=0.85) +\n  geom_col(aes(Product, target * 0.5),\n           fill=\"grey50\", width=0.85) +\n  geom_col(aes(Product, current), \n           width=0.35,\n           fill = \"black\") + \n  geom_errorbar(aes(y = target,\n                    x = Product, \n                    ymin = target,\n                    ymax= target), \n                width = .4,\n                colour = \"red\",\n                size = 1) +\n  coord_flip()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#plotting-sparklines-using-ggplot2",
    "href": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#plotting-sparklines-using-ggplot2",
    "title": "Hands-on_Ex10",
    "section": "Plotting sparklines using ggplot2",
    "text": "Plotting sparklines using ggplot2\nPrep Data\n\n\nCode\nsales_report &lt;- coffeechain %&gt;%\n  filter(Date &gt;= \"2013-01-01\") %&gt;%\n  mutate(Month = month(Date)) %&gt;%\n  group_by(Month, Product) %&gt;%\n  summarise(Sales = sum(Sales)) %&gt;%\n  ungroup() %&gt;%\n  select(Month, Product, Sales)\n\n#min and max and end of sales\nmins &lt;- group_by(sales_report, Product) %&gt;% \n  slice(which.min(Sales))\nmaxs &lt;- group_by(sales_report, Product) %&gt;% \n  slice(which.max(Sales))\nends &lt;- group_by(sales_report, Product) %&gt;% \n  filter(Month == max(Month))\n\nquarts &lt;- sales_report %&gt;%\n  group_by(Product) %&gt;%\n  summarise(quart1 = quantile(Sales, \n                              0.25),\n            quart2 = quantile(Sales, \n                              0.75)) %&gt;%\n  right_join(sales_report)\n\n\n\n\nCode\nggplot(sales_report, aes(x=Month, y=Sales)) + \n  facet_grid(Product ~ ., scales = \"free_y\") + \n  geom_ribbon(data = quarts, aes(ymin = quart1, max = quart2), \n              fill = 'grey90') +\n  geom_line(size=0.3) +\n  geom_point(data = mins, col = 'red') +\n  geom_point(data = maxs, col = 'blue') +\n  geom_text(data = mins, aes(label = Sales), vjust = -1) +\n  geom_text(data = maxs, aes(label = Sales), vjust = 2.5) +\n  geom_text(data = ends, aes(label = Sales), hjust = 0, nudge_x = 0.5) +\n  geom_text(data = ends, aes(label = Product), hjust = 0, nudge_x = 1.0) +\n  expand_limits(x = max(sales_report$Month) + \n                  (0.25 * (max(sales_report$Month) - min(sales_report$Month)))) +\n  scale_x_continuous(breaks = seq(1, 12, 1)) +\n  scale_y_continuous(expand = c(0.1, 0)) +\n  theme_tufte(base_size = 3, base_family = \"Helvetica\") +\n  theme(axis.title=element_blank(), axis.text.y = element_blank(), \n        axis.ticks = element_blank(), strip.text = element_blank())"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#simple-bullet-chart",
    "href": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#simple-bullet-chart",
    "title": "Hands-on_Ex10",
    "section": "Simple Bullet Chart",
    "text": "Simple Bullet Chart\n\n\nCode\nproduct %&gt;%\n  gt::gt() %&gt;%\n  gt_plt_bullet(column = current, \n              target = target, \n              width = 60,\n              palette = c(\"lightblue\", \n                          \"black\")) %&gt;%\n  gt_theme_538()\n\n\n\n\n\n\n\n\n\n\n\n\nProduct\ncurrent\n\n\n\n\nAmaretto\n\n\n\n   \n\n\n\nCaffe Latte\n\n\n\n   \n\n\n\nCaffe Mocha\n\n\n\n   \n\n\n\nChamomile\n\n\n\n   \n\n\n\nColombian\n\n\n\n   \n\n\n\nDarjeeling\n\n\n\n   \n\n\n\nDecaf Espresso\n\n\n\n   \n\n\n\nDecaf Irish Cream\n\n\n\n   \n\n\n\nEarl Grey\n\n\n\n   \n\n\n\nGreen Tea\n\n\n\n   \n\n\n\nLemon\n\n\n\n   \n\n\n\nMint\n\n\n\n   \n\n\n\nRegular Espresso"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#sparklines-gtextras-method",
    "href": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#sparklines-gtextras-method",
    "title": "Hands-on_Ex10",
    "section": "Sparklines: gtExtras method",
    "text": "Sparklines: gtExtras method\n\n\nCode\n#prep data\nreport &lt;- coffeechain %&gt;%\n  mutate(Year = year(Date)) %&gt;%\n  filter(Year == \"2013\") %&gt;%\n  mutate (Month = month(Date, \n                        label = TRUE, \n                        abbr = TRUE)) %&gt;%\n  group_by(Product, Month) %&gt;%\n  summarise(Sales = sum(Sales)) %&gt;%\n  ungroup()\n\n#convert the report data.frame into list columns.\nreport %&gt;%\n  group_by(Product) %&gt;%\n  summarize('Monthly Sales' = list(Sales), \n            .groups = \"drop\")\n\n\n# A tibble: 13 × 2\n   Product           `Monthly Sales`\n   &lt;chr&gt;             &lt;list&gt;         \n 1 Amaretto          &lt;dbl [12]&gt;     \n 2 Caffe Latte       &lt;dbl [12]&gt;     \n 3 Caffe Mocha       &lt;dbl [12]&gt;     \n 4 Chamomile         &lt;dbl [12]&gt;     \n 5 Colombian         &lt;dbl [12]&gt;     \n 6 Darjeeling        &lt;dbl [12]&gt;     \n 7 Decaf Espresso    &lt;dbl [12]&gt;     \n 8 Decaf Irish Cream &lt;dbl [12]&gt;     \n 9 Earl Grey         &lt;dbl [12]&gt;     \n10 Green Tea         &lt;dbl [12]&gt;     \n11 Lemon             &lt;dbl [12]&gt;     \n12 Mint              &lt;dbl [12]&gt;     \n13 Regular Espresso  &lt;dbl [12]&gt;"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#plot-sales-report",
    "href": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#plot-sales-report",
    "title": "Hands-on_Ex10",
    "section": "Plot sales report",
    "text": "Plot sales report\n\n\nCode\nreport %&gt;%\n  group_by(Product) %&gt;%\n  summarize('Monthly Sales' = list(Sales), \n            .groups = \"drop\") %&gt;%\n   gt() %&gt;%\n   gt_plt_sparkline('Monthly Sales',\n                    same_limit = FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\nProduct\nMonthly Sales\n\n\n\n\nAmaretto\n\n\n\n   1.2K\n\n\n\nCaffe Latte\n\n\n\n   1.5K\n\n\n\nCaffe Mocha\n\n\n\n   3.7K\n\n\n\nChamomile\n\n\n\n   3.3K\n\n\n\nColombian\n\n\n\n   5.5K\n\n\n\nDarjeeling\n\n\n\n   3.0K\n\n\n\nDecaf Espresso\n\n\n\n   3.2K\n\n\n\nDecaf Irish Cream\n\n\n\n   2.7K\n\n\n\nEarl Grey\n\n\n\n   3.0K\n\n\n\nGreen Tea\n\n\n\n   1.5K\n\n\n\nLemon\n\n\n\n   4.4K\n\n\n\nMint\n\n\n\n   1.5K\n\n\n\nRegular Espresso\n\n\n\n   1.1K\n\n\n\n\n\n\n\n\nCode\n#create summary of stats\nreport %&gt;% \n  group_by(Product) %&gt;% \n  summarise(\"Min\" = min(Sales, na.rm = T),\n            \"Max\" = max(Sales, na.rm = T),\n            \"Average\" = mean(Sales, na.rm = T)\n            ) %&gt;%\n  gt() %&gt;%\n  fmt_number(columns = 4,\n    decimals = 2)\n\n\n\n\n\n\n\n\nProduct\nMin\nMax\nAverage\n\n\n\n\nAmaretto\n1016\n1210\n1,119.00\n\n\nCaffe Latte\n1398\n1653\n1,528.33\n\n\nCaffe Mocha\n3322\n3828\n3,613.92\n\n\nChamomile\n2967\n3395\n3,217.42\n\n\nColombian\n5132\n5961\n5,457.25\n\n\nDarjeeling\n2926\n3281\n3,112.67\n\n\nDecaf Espresso\n3181\n3493\n3,326.83\n\n\nDecaf Irish Cream\n2463\n2901\n2,648.25\n\n\nEarl Grey\n2730\n3005\n2,841.83\n\n\nGreen Tea\n1339\n1476\n1,398.75\n\n\nLemon\n3851\n4418\n4,080.83\n\n\nMint\n1388\n1669\n1,519.17\n\n\nRegular Espresso\n890\n1218\n1,023.42"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#combine-data-frame-and-plot-updated-table",
    "href": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#combine-data-frame-and-plot-updated-table",
    "title": "Hands-on_Ex10",
    "section": "Combine data frame and plot updated table",
    "text": "Combine data frame and plot updated table\n\n\nCode\nspark &lt;- report %&gt;%\n  group_by(Product) %&gt;%\n  summarize('Monthly Sales' = list(Sales), \n            .groups = \"drop\")\n\nsales &lt;- report %&gt;% \n  group_by(Product) %&gt;% \n  summarise(\"Min\" = min(Sales, na.rm = T),\n            \"Max\" = max(Sales, na.rm = T),\n            \"Average\" = mean(Sales, na.rm = T)\n            )\n\nsales_data = left_join(sales, spark)\n\nsales_data %&gt;%\n  gt() %&gt;%\n  gt_plt_sparkline('Monthly Sales',\n                   same_limit = FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProduct\nMin\nMax\nAverage\nMonthly Sales\n\n\n\n\nAmaretto\n1016\n1210\n1119.000\n\n\n\n   1.2K\n\n\n\nCaffe Latte\n1398\n1653\n1528.333\n\n\n\n   1.5K\n\n\n\nCaffe Mocha\n3322\n3828\n3613.917\n\n\n\n   3.7K\n\n\n\nChamomile\n2967\n3395\n3217.417\n\n\n\n   3.3K\n\n\n\nColombian\n5132\n5961\n5457.250\n\n\n\n   5.5K\n\n\n\nDarjeeling\n2926\n3281\n3112.667\n\n\n\n   3.0K\n\n\n\nDecaf Espresso\n3181\n3493\n3326.833\n\n\n\n   3.2K\n\n\n\nDecaf Irish Cream\n2463\n2901\n2648.250\n\n\n\n   2.7K\n\n\n\nEarl Grey\n2730\n3005\n2841.833\n\n\n\n   3.0K\n\n\n\nGreen Tea\n1339\n1476\n1398.750\n\n\n\n   1.5K\n\n\n\nLemon\n3851\n4418\n4080.833\n\n\n\n   4.4K\n\n\n\nMint\n1388\n1669\n1519.167\n\n\n\n   1.5K\n\n\n\nRegular Espresso\n890\n1218\n1023.417\n\n\n\n   1.1K\n\n\n\n\n\n\n\n\n\nCombining bullet chart and sparklines\n\n\nCode\nbullet &lt;- coffeechain %&gt;%\n  filter(Date &gt;= \"2013-01-01\") %&gt;%\n  group_by(`Product`) %&gt;%\n  summarise(`Target` = sum(`Budget Sales`),\n            `Actual` = sum(`Sales`)) %&gt;%\n  ungroup() \n\nsales_data = sales_data %&gt;%\n  left_join(bullet)\n\nsales_data %&gt;%\n  gt() %&gt;%\n  gt_plt_sparkline('Monthly Sales') %&gt;%\n  gt_plt_bullet(column = Actual, \n                target = Target, \n                width = 28,\n                palette = c(\"lightblue\", \n                          \"black\")) %&gt;%\n  gt_theme_538()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProduct\nMin\nMax\nAverage\nMonthly Sales\nActual\n\n\n\n\nAmaretto\n1016\n1210\n1119.000\n\n\n\n   1.2K\n\n\n\n\n   \n\n\n\nCaffe Latte\n1398\n1653\n1528.333\n\n\n\n   1.5K\n\n\n\n\n   \n\n\n\nCaffe Mocha\n3322\n3828\n3613.917\n\n\n\n   3.7K\n\n\n\n\n   \n\n\n\nChamomile\n2967\n3395\n3217.417\n\n\n\n   3.3K\n\n\n\n\n   \n\n\n\nColombian\n5132\n5961\n5457.250\n\n\n\n   5.5K\n\n\n\n\n   \n\n\n\nDarjeeling\n2926\n3281\n3112.667\n\n\n\n   3.0K\n\n\n\n\n   \n\n\n\nDecaf Espresso\n3181\n3493\n3326.833\n\n\n\n   3.2K\n\n\n\n\n   \n\n\n\nDecaf Irish Cream\n2463\n2901\n2648.250\n\n\n\n   2.7K\n\n\n\n\n   \n\n\n\nEarl Grey\n2730\n3005\n2841.833\n\n\n\n   3.0K\n\n\n\n\n   \n\n\n\nGreen Tea\n1339\n1476\n1398.750\n\n\n\n   1.5K\n\n\n\n\n   \n\n\n\nLemon\n3851\n4418\n4080.833\n\n\n\n   4.4K\n\n\n\n\n   \n\n\n\nMint\n1388\n1669\n1519.167\n\n\n\n   1.5K\n\n\n\n\n   \n\n\n\nRegular Espresso\n890\n1218\n1023.417\n\n\n\n   1.1K"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#interactive-information-dashboard-design-reactable-and-reactablefmtr-methods",
    "href": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#interactive-information-dashboard-design-reactable-and-reactablefmtr-methods",
    "title": "Hands-on_Ex10",
    "section": "Interactive Information Dashboard Design: reactable and reactablefmtr methods",
    "text": "Interactive Information Dashboard Design: reactable and reactablefmtr methods\n\n\nCode\nremotes::install_github(\"timelyportfolio/dataui\")\n\n\n\n\nCode\nlibrary(dataui)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#plot-interactive-sparklines",
    "href": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#plot-interactive-sparklines",
    "title": "Hands-on_Ex10",
    "section": "Plot interactive Sparklines",
    "text": "Plot interactive Sparklines\n\n\nCode\nreport &lt;- report %&gt;%\n  group_by(Product) %&gt;%\n  summarize(`Monthly Sales` = list(Sales))\n\n\n\n\nCode\n#change page size\nreactable(\n  report,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkline(report)\n    )\n  )\n)\n\n\n\n\n\n\nCode\n#add points and labels\nreactable(\n  report,\n  defaultPageSize = 13,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkline(\n        report,\n        highlight_points = highlight_points(\n          min = \"red\", max = \"blue\"),\n        labels = c(\"first\", \"last\")\n        )\n    )\n  )\n)\n\n\n\n\n\n\nCode\n#Add ref line\nreactable(\n  report,\n  defaultPageSize = 13,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkline(\n        report,\n        highlight_points = highlight_points(\n          min = \"red\", max = \"blue\"),\n        statline = \"mean\"\n        )\n    )\n  )\n)\n\n\n\n\n\n\nCode\n#Add Bandline\nreactable(\n  report,\n  defaultPageSize = 13,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkline(\n        report,\n        highlight_points = highlight_points(\n          min = \"red\", max = \"blue\"),\n        line_width = 1,\n        bandline = \"innerquartiles\",\n        bandline_color = \"green\"\n        )\n    )\n  )\n)\n\n\n\n\n\n\nCode\n#change from sparkline to sparkbar\nreactable(\n  report,\n  defaultPageSize = 13,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkbar(\n        report,\n        highlight_bars = highlight_bars(\n          min = \"red\", max = \"blue\"),\n        bandline = \"innerquartiles\",\n        statline = \"mean\")\n    )\n  )\n)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html",
    "title": "In-class_Ex03",
    "section": "",
    "text": "What was mentioned during class:\n\nMake sure that your Netlify website is totally sync with the Rstudio: Render website from the “Build” Tab and then commit and push to the github.\nNumerical data and categorical data: Make sure to recode in R studio if you want to change into categorical data from numerical data\nHow to critique and visualize the right data (tips to comment on visualization):\n\nChart Junk VI: the ages should be in a sequential order, so that it is easily interpreted\nAvoid distorting the graph especially when there is a grid reference for aesthetic purposes\nAdd in text labels to explain plot/graph if needed\nClarity and aesthetics: use mapping data visualization on a cartesian coordinate system and put on the quadrant plot to assess and critique\nQuadrant 4: Confusing yet beautiful - add in at least 3 good points and areas to improve further\nQuadrant 1: Clear and Beautiful - add in 3 points each as well\nAdd in areas to improve - not just changing the graph as a whole unless it is very bad\n\n\n\n\nCritiques and comments to improve the graphs of my peers\n\nDistortion of axis - try to avoid that, make it similar as much as possible so that it can be truthful, clarity issue as well when you cannot pinpoint which is student 30, avoid using light colours and the labelling should not be hidden, plot it above the points\n\n\n\n\nDistortion of axis of graph\n\n\n\nHidden data as the plot is on top of the data points\n\n\n\n\nBeautiful but no clarity\n\n\n\nTitle is being cut off\n\n\n\nUnify the theme - all same theme and consistent as well as font\n\n\n\n\n\n\n\nStacked bar chart\n\n\nin general, the example is good\nLegend is redundant: can just put a label to suggest gender\nForgot to fix the limit of x-axis for the values: the range of y and x axis is different: to not misinterpret data\n\nPie Chart\n\nBad example below\n\n\nBetter Example below:\n\nThere is some overlapping in terms of the labelling in the piechart\nUse of colour: Try to avoid using hard colours, use a less opaque colour or reduce the opaqueness\n\n\n\n\nRaincloud Plot\n\n\n\n\n\n\nMore appropriate design\n\n\n\nRoom for improvements: Raindrop is not falling in place\n\n\n\nIn class Exercise (Tableau)\n\nAvoid over-generalization: in the aggregation of data\nVisualize - Add in Quadrant lines (manually):\n\nConvert data into percentile: Click on data point (Sales), Quick Table Calculation &gt; Percentile, Compute using &gt; State\nAdd Reference line: Click on the axis, and click on “add reference line”, Use constant and use 0.5 (for flexibility) or use median\nAdd in Colours to the data points:\nChange the size:\n\nFilter: drag in order date into the filter panel - click on Year, click on 2019 , apply and click okay, show filter, change to radio button on the right hand corner of the Year filter\nAuto-update the year when changing filter: Go to the title of the plot, click on edit title and add in insert &lt;data order date&gt; after “,”+” “."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html",
    "title": "In-class_Ex05",
    "section": "",
    "text": "In this code chunk below, p_load() of pacman package is used to load the R packages into R environment.\n\n\nCode\npacman::p_load(tidyverse,jsonlite, SmartEDA, tidygraph, ggraph)\n\n\nIn the code chunk below, fromJSON() of jsonlite package is used to import MC1_graph.json file into R and save the output object.\n\n\nCode\nkg &lt;- fromJSON(\"C:\\\\shermainn\\\\ISSS608new\\\\In-class_Ex\\\\In-class_Ex05\\\\data\\\\MC1_graph.json\")\n\n\nInspect Structure\n\n\nCode\nstr(kg, max.level = 1)\n\n\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n $ nodes     :'data.frame': 17412 obs. of  10 variables:\n $ links     :'data.frame': 37857 obs. of  4 variables:\n\n\nExtract and Inspect\nTo do some data cleaning, we separate out into nodes_tb1 and edges_tb1 from the json file.\n\n\nCode\nnodes_tb1 &lt;- as_tibble(kg$nodes) \nedges_tb1 &lt;- as_tibble(kg$links)\n\n\nInitial EDA\n\n\nCode\nggplot(data = edges_tb1,         \n       aes(y = `Edge Type`)) +    \n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data = nodes_tb1,         \n       aes(y = `Node Type`)) +    \n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nid_map &lt;- tibble(id = nodes_tb1$id,                  \n                 index = seq_len(nrow(nodes_tb1)))\n\n\nThis ensures each id from your node list is mapped to the correct row number.\n\n\n\n\n\nCode\nedges_tb1 &lt;- edges_tb1 %&gt;%   \n  left_join(id_map, by = c(\"source\" = \"id\")) %&gt;%   \n  rename(from = index) %&gt;%   \n  left_join(id_map, by = c(\"target\" = \"id\")) %&gt;%   \n  rename(to = index)\n\n\n\n\n\n\n\nCode\nedges_tb1 &lt;- edges_tb1 %&gt;%   \n  filter(!is.na(from), !is.na(to))\n\n\n\n\n\nLastly, tbl_graph() is used to create tidygraph’s graph object by using the code chunk below.\n\n\nCode\ngraph &lt;- tbl_graph(nodes = nodes_tb1,                    \n                   edges = edges_tb1,                     \n                   directed = kg$directed)\n\n\nVisualize the knowledge graph\n\n\nCode\nset.seed(1234) #ensures to get back the same graph\n\n\nVisualize the whole graph\n\n\nCode\nggraph(graph, layout = \"fr\") +   \n  geom_edge_link(alpha = 0.3,                  \n                 colour = \"gray\") +   \n  geom_node_point(aes(colour = `Node Type`),                   \n                  size = 4) +   \n  geom_node_text(aes(label = name),                  \n                 repel = TRUE,                  \n                 size = 2.5) +   \n  theme_void()\n\n\n\n\n\n\n\nCode\ngraph_memberof &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(`Edge Type` == \"MemberOf\")\n\n\n\n\n\n\n\nCode\nused_node_indices &lt;- graph_memberof %&gt;%\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  select(from, to) %&gt;%\n  unlist() %&gt;%\n  unique()\n\n\n\n\n\n\n\nCode\ngraph_memberof &lt;- graph_memberof %&gt;%\n  activate(nodes) %&gt;%\n  mutate(row_id = row_number()) %&gt;%\n  filter(row_id %in% used_node_indices) %&gt;%\n  select(-row_id) #optional clean up\n\n\nPlot the sub-graph\n\n\nCode\nggraph(graph_memberof, \n       layout = \"fr\") +\n  geom_edge_link(alpha = 0.5,\n                 colour = \"gray\") +\n  geom_node_point(aes(colour = `Node Type`),\n                  size = 1) +\n  geom_node_text(aes(label = name),\n                 repel = TRUE, \n                 size = 2.5) +\n  theme_void()\n\n\n\n\n\n\n\n\n\nthe graph shows that it is very silo"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#create-knowledge-graph",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#create-knowledge-graph",
    "title": "In-class_Ex05",
    "section": "",
    "text": "Code\nid_map &lt;- tibble(id = nodes_tb1$id,                  \n                 index = seq_len(nrow(nodes_tb1)))\n\n\nThis ensures each id from your node list is mapped to the correct row number.\n\n\n\n\n\nCode\nedges_tb1 &lt;- edges_tb1 %&gt;%   \n  left_join(id_map, by = c(\"source\" = \"id\")) %&gt;%   \n  rename(from = index) %&gt;%   \n  left_join(id_map, by = c(\"target\" = \"id\")) %&gt;%   \n  rename(to = index)\n\n\n\n\n\n\n\nCode\nedges_tb1 &lt;- edges_tb1 %&gt;%   \n  filter(!is.na(from), !is.na(to))\n\n\n\n\n\nLastly, tbl_graph() is used to create tidygraph’s graph object by using the code chunk below.\n\n\nCode\ngraph &lt;- tbl_graph(nodes = nodes_tb1,                    \n                   edges = edges_tb1,                     \n                   directed = kg$directed)\n\n\nVisualize the knowledge graph\n\n\nCode\nset.seed(1234) #ensures to get back the same graph\n\n\nVisualize the whole graph\n\n\nCode\nggraph(graph, layout = \"fr\") +   \n  geom_edge_link(alpha = 0.3,                  \n                 colour = \"gray\") +   \n  geom_node_point(aes(colour = `Node Type`),                   \n                  size = 4) +   \n  geom_node_text(aes(label = name),                  \n                 repel = TRUE,                  \n                 size = 2.5) +   \n  theme_void()\n\n\n\n\n\n\n\nCode\ngraph_memberof &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(`Edge Type` == \"MemberOf\")\n\n\n\n\n\n\n\nCode\nused_node_indices &lt;- graph_memberof %&gt;%\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  select(from, to) %&gt;%\n  unlist() %&gt;%\n  unique()\n\n\n\n\n\n\n\nCode\ngraph_memberof &lt;- graph_memberof %&gt;%\n  activate(nodes) %&gt;%\n  mutate(row_id = row_number()) %&gt;%\n  filter(row_id %in% used_node_indices) %&gt;%\n  select(-row_id) #optional clean up\n\n\nPlot the sub-graph\n\n\nCode\nggraph(graph_memberof, \n       layout = \"fr\") +\n  geom_edge_link(alpha = 0.5,\n                 colour = \"gray\") +\n  geom_node_point(aes(colour = `Node Type`),\n                  size = 1) +\n  geom_node_text(aes(label = name),\n                 repel = TRUE, \n                 size = 2.5) +\n  theme_void()\n\n\n\n\n\n\n\n\n\nthe graph shows that it is very silo"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home_Ex01",
    "section": "",
    "text": "The Department of Statistics (DOS) Singapore is the national authority responsible for the collection, compilation, analysis and dissemination of official statistics in Singapore. As part of the Ministry of Trade and Industry, DOS plays a pivotal role in supporting evidence-based policy-making and planning by providing timely and reliable demographic, social and economic statistics.\nIn the context of population studies, DOS regularly published detailed data sets that inform stakeholders on trends in age structure, gender distribution, geographical dispersion and population growth. This would help to analyze population structures, identifying spatial disparities and tracking demographic shifts across time and regions.\nThe DOS data set taken in 2024 consisted resident population (age and sex) of the planning regions based on the main area and sub-zones.\n\n\n\nThe data used for this exercise is Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024 which can be retrieved from Department of Statistics, Singapore (DOS) Population Trends tab.\n\n\n\nImage of DOS data\n\n\n\n\n\nAs a graphical editor of the media company, the task is to prepare data visualization for the article on demographic structures and distribution of Singapore in 2024.\nUsing the DOS data set above, this post aims to use appropriate tidyverse family of packages (dplr, tidyr), exploratory data analysis (EDA) and ggplot2 functions and its extensions to uncover:\n\nDependency Burden: the regions that have a high dependency ratio (high proportion of young and elderly) to find out if there are sufficient facilities (e.g. childcare centers and eldercare facilities)\nUrban Planning and Housing Needs: the aging communities in Singapore based on the geographical regions using the subzone-level data"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#background",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#background",
    "title": "Take-home_Ex01",
    "section": "",
    "text": "The Department of Statistics (DOS) Singapore is the national authority responsible for the collection, compilation, analysis and dissemination of official statistics in Singapore. As part of the Ministry of Trade and Industry, DOS plays a pivotal role in supporting evidence-based policy-making and planning by providing timely and reliable demographic, social and economic statistics.\nIn the context of population studies, DOS regularly published detailed data sets that inform stakeholders on trends in age structure, gender distribution, geographical dispersion and population growth. This would help to analyze population structures, identifying spatial disparities and tracking demographic shifts across time and regions.\nThe DOS data set taken in 2024 consisted resident population (age and sex) of the planning regions based on the main area and sub-zones."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data",
    "title": "Take-home_Ex01",
    "section": "",
    "text": "The data used for this exercise is Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024 which can be retrieved from Department of Statistics, Singapore (DOS) Population Trends tab.\n\n\n\nImage of DOS data"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#task",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#task",
    "title": "Take-home_Ex01",
    "section": "",
    "text": "As a graphical editor of the media company, the task is to prepare data visualization for the article on demographic structures and distribution of Singapore in 2024.\nUsing the DOS data set above, this post aims to use appropriate tidyverse family of packages (dplr, tidyr), exploratory data analysis (EDA) and ggplot2 functions and its extensions to uncover:\n\nDependency Burden: the regions that have a high dependency ratio (high proportion of young and elderly) to find out if there are sufficient facilities (e.g. childcare centers and eldercare facilities)\nUrban Planning and Housing Needs: the aging communities in Singapore based on the geographical regions using the subzone-level data"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#variable-selection",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#variable-selection",
    "title": "Take-home_Ex01",
    "section": "4.1 Variable Selection",
    "text": "4.1 Variable Selection\nBased on the excel spreadsheet, Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024, I will be categorizing the data set into what was shown above in the flowchart. The ages of the population will be divided into 3 categories: Young (0-17 years), Working adults (18-64), Elderly (65+). The genders will be divided into female and male. As for the planning areas, there are 55 planning areas (main zones) and 346 subzones.\nBelow are the list of variables retained for this study which are grouped into 2 categories of Age and Planning areas.\n\n\n\n\n\n\n\n\n\nCategory\nDescription\nType\nEncoding Scheme\n\n\n\n\nAge\nDependency Burden\nNUM\nYoung Children (0-4 years)\nYouth (5-12 years)\nTeens (13-17 years)\nWorking Adults (18-64 years)\nElderly (65+ years)\n\n\nPlanning areas\nUrban Planning and Housing Needs\nNUM\nMain zones\nSubzones"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#recoding-categorical-variables",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#recoding-categorical-variables",
    "title": "Take-home_Ex01",
    "section": "4.2 Recoding Categorical Variables",
    "text": "4.2 Recoding Categorical Variables\n\nAge groupsMain zones and subzones\n\n\nIn order to have a consistent data set to analyze the population age groups, data is cleaned by filter() to set new values into 3 age groups:\n\nYoung Children of 0 - 4 years\nYouth of 5 - 12 years\nTeens of 13 - 17 years\nWorking Adults of 18 - 64 years\nand Elderly of 65 years and above\n\nThe values are all within the new column namely Age_Group.\n\n\nThe data set is then further categorized by main zones and subzones by using filter()to remove the totals in columns of Age, Sex, Subzone and ‘-’ in Population as they are repeated values or null values. The values are then all renamed Planning_Area, Subzone, and Total_Population.\n\n\nCode\nlibrary(readxl)\nlibrary(dplyr)\n\n# Load the data\npopdata &lt;- read_excel(\"C:\\\\shermainn\\\\ISSS608new\\\\Take-home_Ex\\\\Take-home_Ex01\\\\data\\\\respopagesex2024e.xlsx\")\n\n# Clean and process\npopdata_cleaned &lt;- popdata %&gt;%\n  rename(\n    Planning_Area = `Planning Area`,\n    Population = `2024`\n  ) %&gt;%\n  filter(Sex != \"Total\", Age != \"Total\", Subzone != \"Total\") %&gt;%\n  mutate(\n    Population = na_if(Population, \"-\"),            \n    Age = as.numeric(Age),\n    Population = as.numeric(Population),\n    Age_Group = case_when(\n      Age &gt;= 0 & Age &lt;= 4 ~ \"Young (0-4)\",\n      Age &gt;= 5 & Age &lt;= 12 ~ \"Youth (5-12)\",\n      Age &gt;= 13 & Age &lt;= 17 ~ \"Teens (13-17)\",\n      Age &gt;= 18 & Age &lt;= 64 ~ \"Working Adults (18-64)\",\n      Age &gt;= 65 ~ \"Elderly (65+)\",\n      TRUE ~ NA_character_\n    )\n  ) %&gt;%\n  filter(!is.na(Age_Group)) %&gt;%\n  group_by(Planning_Area, Subzone, Age_Group) %&gt;%\n  summarise(Total_Population = sum(Population, na.rm = TRUE), .groups = \"drop\")\n\n# View results\nhead(popdata_cleaned)\n\n\n# A tibble: 6 × 4\n  Planning_Area Subzone                Age_Group              Total_Population\n  &lt;chr&gt;         &lt;chr&gt;                  &lt;chr&gt;                             &lt;dbl&gt;\n1 Ang Mo Kio    Ang Mo Kio Town Centre Elderly (65+)                       880\n2 Ang Mo Kio    Ang Mo Kio Town Centre Teens (13-17)                       290\n3 Ang Mo Kio    Ang Mo Kio Town Centre Working Adults (18-64)             3170\n4 Ang Mo Kio    Ang Mo Kio Town Centre Young (0-4)                         120\n5 Ang Mo Kio    Ang Mo Kio Town Centre Youth (5-12)                        420\n6 Ang Mo Kio    Cheng San              Elderly (65+)                      6580"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#top-10-subzones-of-each-age-group",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#top-10-subzones-of-each-age-group",
    "title": "Take-home_Ex01",
    "section": "5.1 Top 10 subzones of each age group",
    "text": "5.1 Top 10 subzones of each age group\nIdentifying the top 10 subzones for each age group is paramount for informed urban planning and resource allocation. By understanding the demographic concentrations and where they are located at would help the government agencies, planners and social service providers to allocate infrastructure, facilities and services for efficiently and effectively.\nFor instance, subzones with a high elderly proportion would require more eldercare services, accessible transportation and healthcare centers. On the other hand, areas with many children would need sufficient childcare centers, schools and recreational amenities.\n\nElderly (65+ years)Young Children (0-4 years)Youth (5-12 years)Teens (13-17 years)Working Adults (18-64 years)Comparison between 2 groups (young and youth dependents)\n\n\n\n\nCode\n# Filter and get top 10 subzones by elderly population\ntop_elderly_subzones &lt;- popdata_cleaned %&gt;%\n  filter(Age_Group == \"Elderly (65+)\") %&gt;%\n  arrange(desc(Total_Population)) %&gt;%\n  slice_head(n = 10)\n\n# Plot\ne1 &lt;- ggplot(top_elderly_subzones, \n             aes(x = reorder(Subzone, Total_Population), \n                 y = Total_Population, \n                 fill = Planning_Area)) +\n  geom_col() +\n  coord_flip() +\n  geom_text(aes(label = Total_Population), \n            hjust = -0.1, size = 3.5) +\n  labs(\n    title = \"Top 10 Subzones by Elderly Population (65+)\",\n    x = \"Subzone\",\n    y = \"Elderly Population\"\n  ) +\n  scale_fill_grey(start = 0.3, end = 0.8) +\n  scale_x_discrete(expand = expansion(mult = c(0.05, 0.05))) +\n  scale_y_continuous(\n    breaks = seq(0, 30000, by = 5000),\n    limits = c(0, 30000),  \n    expand = c(0, 0)  \n  ) +\n  theme_bw() +\n  theme(\n    legend.position = \"none\",\n    plot.margin = margin(t=20,r=50,b=20,l=40),\n    plot.title = element_text(hjust = 0.5, face = \"bold\"),\n    plot.subtitle = element_text(hjust = 0.5),\n    axis.title.y = element_text(margin = margin(r = 10)),\n    axis.title.x = element_text(margin = margin(t = 10)),\n    panel.grid.major.y = element_blank(),\n    panel.grid.major.x = element_line(color = \"gray80\"),\n    axis.text = element_text(size = 10)\n  )\n\ne1\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ntop_young_subzones &lt;- popdata_cleaned %&gt;%\n  filter(Age_Group == \"Young (0-4)\") %&gt;%\n  arrange(desc(Total_Population)) %&gt;%\n  slice_head(n = 10)\n\n# Plot\ny1 &lt;- ggplot(top_young_subzones, \n             aes(x = reorder(Subzone, Total_Population), \n                 y = Total_Population, \n                 fill = Planning_Area)) +\n  geom_col() +\n  geom_text(aes(label = Total_Population), \n            hjust = -0.1, size = 3.5) +\n  coord_flip() +\n  labs(\n    title = \"Top 10 Subzones by Young Population (0-4)\",\n    x = \"Subzone\",\n    y = \"Number of Young Population\"\n  ) +\n  scale_fill_grey(start = 0.3, end = 0.8) +\n    scale_x_discrete(expand = expansion(mult = c(0.05, 0.05))) +\n  scale_y_continuous(\n    breaks = seq(0, 10000, by = 1000),\n    limits = c(0, 10000),  \n    expand = c(0, 0)  \n  ) +\n  theme_bw() +\n  theme(\n    legend.position = \"none\",\n    plot.margin = margin(t=20,r=50,b=20,l=40),\n    plot.title = element_text(hjust = 0.5, face = \"bold\"),\n    plot.subtitle = element_text(hjust = 0.5),\n    axis.title.y = element_text(margin = margin(r = 10)),\n    axis.title.x = element_text(margin = margin(t = 10)),\n    panel.grid.major.y = element_blank(),\n    panel.grid.major.x = element_line(color = \"gray80\"),\n    axis.text = element_text(size = 10)\n  )\n\ny1\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Create top_youth_subzones\ntop_youth_subzones &lt;- popdata_cleaned %&gt;%\n  filter(Age_Group == \"Youth (5-12)\") %&gt;%\n  arrange(desc(Total_Population)) %&gt;%\n  slice_head(n = 10)\n\n# Static plot\ny2 &lt;- ggplot(top_youth_subzones, \n             aes(x = reorder(Subzone, Total_Population),\n                 y = Total_Population,\n                 fill = Planning_Area)) +\n  geom_col() +\n  geom_text(aes(label = Total_Population), \n            hjust = -0.1, size = 3.5) +\n  coord_flip() +\n  labs(\n    title = \"Top 10 subzones of Youth Population (5-12)\",\n    x = \"Subzone\",\n    y = \"Number of Youth Population\"\n  ) +\n  scale_fill_grey(start = 0.3, end = 0.8) +\n  scale_x_discrete(expand = expansion(mult = c(0.05, 0.05))) +\n  scale_y_continuous(\n    breaks = seq(0, 10000, by = 1000),\n    limits = c(0, 10000),  \n    expand = c(0, 0)  \n  ) +\n  theme_bw() +\n    theme(\n    legend.position = \"none\",\n    plot.margin = margin(t=20,r=50,b=20,l=40),\n    plot.title = element_text(hjust = 0.5, face = \"bold\"),\n    plot.subtitle = element_text(hjust = 0.5),\n    axis.title.y = element_text(margin = margin(r = 10)),\n    axis.title.x = element_text(margin = margin(t = 10)),\n    panel.grid.major.y = element_blank(),\n    panel.grid.major.x = element_line(color = \"gray80\"),\n    axis.text = element_text(size = 10)\n  )\n\ny2\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n#| fig-width: 7\n#| fig_height: 15\n\ntop_young_subzones &lt;- popdata_cleaned %&gt;%\n  filter(Age_Group == \"Teens (13-17)\") %&gt;%\n  arrange(desc(Total_Population)) %&gt;%\n  slice_head(n = 10)\n\n# Plot\ny3 &lt;- ggplot(top_young_subzones, \n             aes(x = reorder(Subzone, Total_Population), \n                 y = Total_Population, \n                 fill = Planning_Area)) +\n  geom_col() +\n  geom_text(aes(label = Total_Population), \n            hjust = -0.1, size = 3.5) +\n  coord_flip() +\n  labs(\n    title = \"Top 10 subzones of Teens Population (13-17)\",\n    x = NULL,\n    y = \"Number of Teens Population\"\n  ) +\n  scale_fill_grey(start = 0.3, end = 0.8) +\n  scale_x_discrete(expand = expansion(mult = c(0.05, 0.05))) +\n  scale_y_continuous(\n    breaks = seq(0, 7000, by = 1000),\n    limits = c(0, 7000),  \n    expand = c(0, 0)  \n  ) +\n  theme_bw() +\n  theme(\n    legend.position = \"none\",\n    plot.margin = margin(t=20,r=50,b=20,l=40),\n    plot.title = element_text(hjust = 0.5, face = \"bold\"),\n    plot.subtitle = element_text(hjust = 0.5),\n    axis.title.y = element_text(margin = margin(r = 10)),\n    axis.title.x = element_text(margin = margin(t = 10)),\n    panel.grid.major.y = element_blank(),\n    panel.grid.major.x = element_line(color = \"gray80\"),\n    axis.text = element_text(size = 10)\n  )\ny3\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ntop_working_subzones &lt;- popdata_cleaned %&gt;%\n  filter(Age_Group == \"Working Adults (18-64)\") %&gt;%\n  arrange(desc(Total_Population)) %&gt;%\n  slice_head(n = 10)\n\n# Plot\na1 &lt;- ggplot(top_working_subzones, \n             aes(x = reorder(Subzone, Total_Population), \n                 y = Total_Population, \n                 fill = Planning_Area)) +\n  geom_col() +\n  geom_text(aes(label = Total_Population), \n            hjust = -0.1, size = 3.5) +\n  coord_flip() +\n  labs(\n    title = \"Top 10 subzones of Working Adults Population (18-64)\",\n    x = NULL,\n    y = \"Number of Working Adults\"\n  ) +\n  scale_fill_grey(start = 0.3, end = 0.8) +\n  scale_x_discrete(expand = expansion(mult = c(0.05, 0.05))) +\n  scale_y_continuous(\n    breaks = seq(0, 100000, by = 10000),\n    limits = c(0, 100000),  \n    expand = c(0, 0),\n    labels = scales::comma\n  ) +\n  theme_bw() +\n  theme(\n    legend.position = \"none\",\n    plot.margin = margin(t=20,r=50,b=20,l=40),\n    plot.title = element_text(hjust = 0.5, face = \"bold\"),\n    plot.subtitle = element_text(hjust = 0.5),\n    axis.title.y = element_text(margin = margin(r = 10)),\n    axis.title.x = element_text(margin = margin(t = 10)),\n    panel.grid.major.y = element_blank(),\n    panel.grid.major.x = element_line(color = \"gray80\"),\n    axis.text = element_text(size = 10)\n  )\n\na1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n💡 Observations\n\n\n\nTampines (Tampines North, Tampines East & Tampines West) is found to have the highest number of young, youth and elderly population where they are all within the top 10 subzones in all 3 group categories.\nBedok North and Tampines East and West seems to have the highest elderly proportion compared to the other areas where they amount to be the top 3 subzones.\nAs for the young populations, Tampines East, Tampines North and Woodlands East are the top 3 areas with the highest proportion.\nTampines East, Woodlands East and Fernvale are the top 3 subzones for youth population.\nWhen comparing between the youth (5-12 years) and young (0-4 years) age groups, they have similarities where Tampines East and Woodlands East are within the top 3 subzones for these two age groups. In addition, the youth has almost double the number as compared to the young population in both of these two zones as shown in the above comparison plot."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#dependency-ratio-by-subzones",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#dependency-ratio-by-subzones",
    "title": "Take-home_Ex01",
    "section": "6.1 Dependency ratio by subzones",
    "text": "6.1 Dependency ratio by subzones\n\n\n\n\n\n\n\n\n\n\n💡 Observations\n\n\n\nBased on the heat map results, the dependency ratio for the subzones are between 0.20 and 0.45 (every 10 working adults, 4 dependents) which is relatively low and suggests that the working population is currently sufficient to support the dependent population in these subzones.\nThere is less strain on social services such as healthcare and education as well as the economy as there is a larger working adult population.\nFor urban planning, the infrastructure for dependents such as the childcare centers, schools and eldercare facilities are not an immediate priority."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "title": "Take-home_Ex02",
    "section": "",
    "text": "In the code chunk below, p_load() of pacman package is used to load the R packages into R environment.\n\n\nCode\npacman::p_load(tidyverse, jsonlite,\n               tidygraph, ggraph,\n               SmartEDA, dplyr, visNetwork, igraph)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#inspect-knowledge-graph-structure",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#inspect-knowledge-graph-structure",
    "title": "Take-home_Ex02",
    "section": "Inspect Knowledge Graph Structure",
    "text": "Inspect Knowledge Graph Structure\nIn the code chunk below glimpse() is used to reveal the structure of mc3 knowledge graph.\n\n\nCode\nglimpse(MC3)\n\n\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi FALSE\n $ graph     :List of 4\n  ..$ mode        : chr \"static\"\n  ..$ edge_default: Named list()\n  ..$ node_default: Named list()\n  ..$ name        : chr \"VAST_MC3_Knowledge_Graph\"\n $ nodes     :'data.frame': 1159 obs. of  31 variables:\n  ..$ type             : chr [1:1159] \"Entity\" \"Entity\" \"Entity\" \"Entity\" ...\n  ..$ label            : chr [1:1159] \"Sam\" \"Kelly\" \"Nadia Conti\" \"Elise\" ...\n  ..$ name             : chr [1:1159] \"Sam\" \"Kelly\" \"Nadia Conti\" \"Elise\" ...\n  ..$ sub_type         : chr [1:1159] \"Person\" \"Person\" \"Person\" \"Person\" ...\n  ..$ id               : chr [1:1159] \"Sam\" \"Kelly\" \"Nadia Conti\" \"Elise\" ...\n  ..$ timestamp        : chr [1:1159] NA NA NA NA ...\n  ..$ monitoring_type  : chr [1:1159] NA NA NA NA ...\n  ..$ findings         : chr [1:1159] NA NA NA NA ...\n  ..$ content          : chr [1:1159] NA NA NA NA ...\n  ..$ assessment_type  : chr [1:1159] NA NA NA NA ...\n  ..$ results          : chr [1:1159] NA NA NA NA ...\n  ..$ movement_type    : chr [1:1159] NA NA NA NA ...\n  ..$ destination      : chr [1:1159] NA NA NA NA ...\n  ..$ enforcement_type : chr [1:1159] NA NA NA NA ...\n  ..$ outcome          : chr [1:1159] NA NA NA NA ...\n  ..$ activity_type    : chr [1:1159] NA NA NA NA ...\n  ..$ participants     : int [1:1159] NA NA NA NA NA NA NA NA NA NA ...\n  ..$ thing_collected  :'data.frame':   1159 obs. of  2 variables:\n  .. ..$ type: chr [1:1159] NA NA NA NA ...\n  .. ..$ name: chr [1:1159] NA NA NA NA ...\n  ..$ reference        : chr [1:1159] NA NA NA NA ...\n  ..$ date             : chr [1:1159] NA NA NA NA ...\n  ..$ time             : chr [1:1159] NA NA NA NA ...\n  ..$ friendship_type  : chr [1:1159] NA NA NA NA ...\n  ..$ permission_type  : chr [1:1159] NA NA NA NA ...\n  ..$ start_date       : chr [1:1159] NA NA NA NA ...\n  ..$ end_date         : chr [1:1159] NA NA NA NA ...\n  ..$ report_type      : chr [1:1159] NA NA NA NA ...\n  ..$ submission_date  : chr [1:1159] NA NA NA NA ...\n  ..$ jurisdiction_type: chr [1:1159] NA NA NA NA ...\n  ..$ authority_level  : chr [1:1159] NA NA NA NA ...\n  ..$ coordination_type: chr [1:1159] NA NA NA NA ...\n  ..$ operational_role : chr [1:1159] NA NA NA NA ...\n $ edges     :'data.frame': 3226 obs. of  5 variables:\n  ..$ id         : chr [1:3226] \"2\" \"3\" \"5\" \"3013\" ...\n  ..$ is_inferred: logi [1:3226] TRUE FALSE TRUE TRUE TRUE TRUE ...\n  ..$ source     : chr [1:3226] \"Sam\" \"Sam\" \"Sam\" \"Sam\" ...\n  ..$ target     : chr [1:3226] \"Relationship_Suspicious_217\" \"Event_Communication_370\" \"Event_Assessment_600\" \"Relationship_Colleagues_430\" ...\n  ..$ type       : chr [1:3226] NA \"sent\" NA NA ..."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#extract-edges-and-nodes",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#extract-edges-and-nodes",
    "title": "Take-home_Ex02",
    "section": "Extract Edges and Nodes",
    "text": "Extract Edges and Nodes\nNext, as_tibble() of tibble package package is used to extract the nodes and links tibble data frames from mc3 tibble dataframe into two separate tibble dataframes called mc3_nodes and mc3_edges respectively.\n\n\nCode\nmc3_nodes &lt;- as_tibble(MC3$nodes)\nmc3_edges &lt;- as_tibble(MC3$edges)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#initial-eda",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#initial-eda",
    "title": "Take-home_Ex02",
    "section": "Initial EDA",
    "text": "Initial EDA\nIt is time for us to apply appropriate EDA methods to examine the data.\nIn the code chunk below, ExpCatViz() of SmartEDA package is used to reveal the frequency distribution of all categorical fields in mc3_nodes tibble dataframe.\nOn the other hands, code chunk below uses ExpCATViz() of SmartEDA package to reveal the frequency distribution of all categorical fields in mc3_edges tibble dataframe.\n\n\nCode\nExpCatViz(data=mc3_nodes,\n          col=\"lightblue\")\n\n\n[[1]]\n\n\n\n\n\n\n\n\n\n\n[[2]]\n\n\n\n\n\n\n\n\n\n\n[[3]]\n\n\n\n\n\n\n\n\n\n\n[[4]]\n\n\n\n\n\n\n\n\n\n\n[[5]]\n\n\n\n\n\n\n\n\n\n\n[[6]]\n\n\n\n\n\n\n\n\n\n\n[[7]]\n\n\n\n\n\n\n\n\n\n\n[[8]]\n\n\n\n\n\n\n\n\n\n\n[[9]]\n\n\n\n\n\n\n\n\n\n\n[[10]]\n\n\n\n\n\n\n\n\n\n\n[[11]]\n\n\n\n\n\n\n\n\n\n\n[[12]]\n\n\n\n\n\n\n\n\n\n\n[[13]]\n\n\n\n\n\n\n\n\n\n\n[[14]]"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#build-tidygraph-object",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#build-tidygraph-object",
    "title": "Take-home_Ex02",
    "section": "Build tidygraph Object",
    "text": "Build tidygraph Object\n\n\nCode\nmc3_graph &lt;- tbl_graph(\n  nodes = mc3_nodes_final,\n  edges = mc3_edges_final,\n  directed = TRUE\n)\n\nstr(mc3_graph)\n\n\nClasses 'tbl_graph', 'igraph'  hidden list of 10\n $ : num 1159\n $ : logi TRUE\n $ : num [1:3226] 0 0 0 0 0 0 0 1 1 1 ...\n $ : num [1:3226] 1137 356 746 894 875 ...\n $ : NULL\n $ : NULL\n $ : NULL\n $ : NULL\n $ :List of 4\n  ..$ : num [1:3] 1 0 1\n  ..$ : Named list()\n  ..$ :List of 31\n  .. ..$ type             : chr [1:1159] \"Entity\" \"Entity\" \"Entity\" \"Entity\" ...\n  .. ..$ label            : chr [1:1159] \"Sam\" \"Kelly\" \"Nadia Conti\" \"Elise\" ...\n  .. ..$ name             : chr [1:1159] \"Sam\" \"Kelly\" \"Nadia Conti\" \"Elise\" ...\n  .. ..$ sub_type         : chr [1:1159] \"Person\" \"Person\" \"Person\" \"Person\" ...\n  .. ..$ id               : chr [1:1159] \"Sam\" \"Kelly\" \"Nadia Conti\" \"Elise\" ...\n  .. ..$ timestamp        : chr [1:1159] NA NA NA NA ...\n  .. ..$ monitoring_type  : chr [1:1159] NA NA NA NA ...\n  .. ..$ findings         : chr [1:1159] NA NA NA NA ...\n  .. ..$ content          : chr [1:1159] NA NA NA NA ...\n  .. ..$ assessment_type  : chr [1:1159] NA NA NA NA ...\n  .. ..$ results          : chr [1:1159] NA NA NA NA ...\n  .. ..$ movement_type    : chr [1:1159] NA NA NA NA ...\n  .. ..$ destination      : chr [1:1159] NA NA NA NA ...\n  .. ..$ enforcement_type : chr [1:1159] NA NA NA NA ...\n  .. ..$ outcome          : chr [1:1159] NA NA NA NA ...\n  .. ..$ activity_type    : chr [1:1159] NA NA NA NA ...\n  .. ..$ participants     : int [1:1159] NA NA NA NA NA NA NA NA NA NA ...\n  .. ..$ reference        : chr [1:1159] NA NA NA NA ...\n  .. ..$ date             : chr [1:1159] NA NA NA NA ...\n  .. ..$ time             : chr [1:1159] NA NA NA NA ...\n  .. ..$ friendship_type  : chr [1:1159] NA NA NA NA ...\n  .. ..$ permission_type  : chr [1:1159] NA NA NA NA ...\n  .. ..$ start_date       : chr [1:1159] NA NA NA NA ...\n  .. ..$ end_date         : chr [1:1159] NA NA NA NA ...\n  .. ..$ report_type      : chr [1:1159] NA NA NA NA ...\n  .. ..$ submission_date  : chr [1:1159] NA NA NA NA ...\n  .. ..$ jurisdiction_type: chr [1:1159] NA NA NA NA ...\n  .. ..$ authority_level  : chr [1:1159] NA NA NA NA ...\n  .. ..$ coordination_type: chr [1:1159] NA NA NA NA ...\n  .. ..$ operational_role : chr [1:1159] NA NA NA NA ...\n  .. ..$ new_index        : int [1:1159] 1 2 3 4 5 6 7 8 9 10 ...\n  ..$ :List of 2\n  .. ..$ is_inferred: logi [1:3226] TRUE FALSE TRUE TRUE TRUE TRUE ...\n  .. ..$ type       : chr [1:3226] NA \"sent\" NA NA ...\n $ :&lt;environment: 0x0000020e2b356850&gt; \n - attr(*, \"active\")= chr \"nodes\""
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualize-knowledge-graph",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualize-knowledge-graph",
    "title": "Take-home_Ex02",
    "section": "Visualize knowledge graph",
    "text": "Visualize knowledge graph\nSeveral of the ggraph layouts involve randomisation. In order to ensure reproducibility, it is necessary to set the seed value before plotting by using the code chunk below.\n\n\nCode\nset.seed(1234)\n\n\nIn the code chunk below, ggraph functions are used to create the whole graph.\n\n\nCode\nggraph(mc3_graph, \n       layout = \"fr\") +\n  geom_edge_link(alpha = 0.3, \n                 colour = \"gray\") +\n  geom_node_point(aes(color = `type`), \n                  size = 4) +\n  geom_node_text(aes(label = type), \n                 repel = TRUE, \n                 size = 2.5) +\n  theme_void()"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#background",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#background",
    "title": "Take-home_Ex02",
    "section": "Background",
    "text": "Background\nOver the past decade, the community of Oceanus has faced numerous transformations and challenges evolving from its fishing-centric origins. Following major crackdowns on illegal fishing activities, suspects have shifted investments into more regulated sectors such as the ocean tourism industry, resulting in growing tensions. This increased tourism has recently attracted the likes of international pop star Sailor Shift, who announced plans to film a music video on the island.\nClepper Jessen, a former analyst at FishEye and now a seasoned journalist for the Hacklee Herald, has been keenly observing these rising tensions. Recently, he turned his attention towards the temporary closure of Nemo Reef. By listening to radio communications and utilizing his investigative tools, Clepper uncovered a complex web of expedited approvals and secretive logistics. These efforts revealed a story involving high-level Oceanus officials, Sailor Shift’s team, local influential families, and local conservationist group The Green Guardians, pointing towards a story of corruption and manipulation.\nYour task is to develop new and novel visualizations and visual analytics approaches to help Clepper get to the bottom of this story."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#tasks-and-questions",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#tasks-and-questions",
    "title": "Take-home_Ex02",
    "section": "Tasks and Questions:",
    "text": "Tasks and Questions:\nClepper diligently recorded all intercepted radio communications over the last two weeks. With the help of his intern, they have analyzed their content to identify important events and relationships between key players. The result is a knowledge graph describing the last two weeks on Oceanus. Clepper and his intern have spent a large amount of time generating this knowledge graph, and they would now like some assistance using it to answer the following questions.\n\nClepper found that messages frequently came in at around the same time each day.\n\nDevelop a graph-based visual analytics approach to identify any daily temporal patterns in communications.\nHow do these patterns shift over the two weeks of observations?\nFocus on a specific entity and use this information to determine who has influence over them."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#extracting-graph-elements",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#extracting-graph-elements",
    "title": "Take-home_Ex02",
    "section": "Extracting Graph Elements",
    "text": "Extracting Graph Elements\nTo identify any patterns in communications between the different people or companies, only “sub_type”, “name”, “content” and “timestamp” columns were used to do these analysis.\n\n1. Make an entity list2. Make a Content for communications List3. Make a new list - to identify the entities involved in the messages in the communications4. Create new Edges data frame (Entity -&gt; Entity)\n\n\n\n\nCode\nentity_list &lt;- subset(mc3_nodes_final, type == \"Entity\", select = c(sub_type, name))\n\nentity_list\n\n\n# A tibble: 72 × 2\n   sub_type name          \n   &lt;chr&gt;    &lt;chr&gt;         \n 1 Person   Sam           \n 2 Person   Kelly         \n 3 Person   Nadia Conti   \n 4 Person   Elise         \n 5 Person   Liam Thorne   \n 6 Person   Samantha Blake\n 7 Person   Davis         \n 8 Person   Rodriguez     \n 9 Person   Sailor Shift  \n10 Person   Clepper Jensen\n# ℹ 62 more rows\n\n\n\n\n\n\nCode\ncomms_list &lt;- subset(mc3_nodes_final, type == \"Event\" & label == \"Communication\", select = c(timestamp, content))\n\ncomms_list\n\n\n# A tibble: 584 × 2\n   timestamp           content                                                  \n   &lt;chr&gt;               &lt;chr&gt;                                                    \n 1 2040-10-01 08:09:00 Hey The Intern, it's The Lookout! Just spotted a pod of …\n 2 2040-10-01 08:10:00 Hey The Lookout, The Intern here! I'd absolutely love to…\n 3 2040-10-01 08:13:00 Sam, it's Kelly! Let's meet at Sunrise Point at 7 AM for…\n 4 2040-10-01 08:16:00 Mrs. Money, it's The Intern. Just checking in to see wha…\n 5 2040-10-01 08:19:00 Boss, it's Mrs. Money. I've reviewed our operational fun…\n 6 2040-10-01 08:21:00 Mrs. Money, this is Boss. I'm available tomorrow at 3 PM…\n 7 2040-10-01 08:24:00 Boss, Mrs. Money here. I'll bring the updated projection…\n 8 2040-10-01 08:26:00 Middleman, this is Boss. I'd like to move our meeting fo…\n 9 2040-10-01 08:29:00 Boss, this is The Middleman. I can meet earlier as reque…\n10 2040-10-01 08:32:00 Middleman, this is Boss. Let's meet tomorrow at 4PM at t…\n# ℹ 574 more rows\n\n\n\n\n\n\nCode\nclean_text &lt;- function(x) {\n  x &lt;- tolower(x)\n  x &lt;- gsub(\"[^a-z0-9 ]\", \"\", x)  # remove punctuation\n  trimws(x)\n}\n\nentity_names &lt;- unique(mc3_nodes_final$name)\n\n# Pre-clean both\nentity_names_clean &lt;- sapply(entity_names, clean_text)\ncontent_clean &lt;- sapply(comms_list$content, clean_text)\n\n# Match using the cleaned versions\ncomms_entity_list &lt;- mapply(function(ts, content) {\n  matches &lt;- entity_names[ sapply(entity_names_clean, function(entity) grepl(entity, content, fixed = TRUE)) ]\n  list(timestamp = ts, entities = matches)\n}, ts = comms_list$timestamp, content = content_clean, SIMPLIFY = FALSE)\n\n\n\n\nFor ggraph to plot the edges correctly, we need to assigns weights to the edges. For simplicity, let us assign the number of edges with the same source, target and type.\nIt will then be changed from source and target to from and to, respectively for compatibility with network functions we will use.\n\n\nCode\nedges_list &lt;- lapply(comms_entity_list, function(x) {\n  ents &lt;- x$entities\n  if(length(ents) &lt; 2) return(NULL)  # Need at least 2 to make an edge\n  \n  # Create all pairwise combinations (undirected edges)\n  pairs &lt;- t(combn(ents, 2))\n  \n  data.frame(\n    from = pairs[,1],\n    to = pairs[,2],\n    timestamp = x$timestamp,\n    stringsAsFactors = FALSE\n  )\n})\n\n# Combine all into one data frame\nedges_edges_df &lt;- do.call(rbind, edges_list)\n\nhead(edges_edges_df)\n\n\n                             from          to           timestamp\n2040-10-01 08:09:00.1  The Intern The Lookout 2040-10-01 08:09:00\n2040-10-01 08:09:00.2  The Intern        &lt;NA&gt; 2040-10-01 08:09:00\n2040-10-01 08:09:00.3 The Lookout        &lt;NA&gt; 2040-10-01 08:09:00\n2040-10-01 08:10:00.1  The Intern The Lookout 2040-10-01 08:10:00\n2040-10-01 08:10:00.2  The Intern  Mrs. Money 2040-10-01 08:10:00\n2040-10-01 08:10:00.3  The Intern        &lt;NA&gt; 2040-10-01 08:10:00\n\n\nCode\nweighted_edges &lt;- edges_edges_df %&gt;%\n  count(from, to, name = \"weight\")\nhead(weighted_edges)\n\n\n        from                   to weight\n1 Azure Cove          Dolphin Bay      1\n2 Azure Cove           South Dock      1\n3 Azure Cove                 &lt;NA&gt;      3\n4   Berth 14                 &lt;NA&gt;      3\n5       Boss Conservation Vessels      7\n6       Boss             EcoVigil      2"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualize-interactive-network-graph-of-communications-with-visnetwork",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualize-interactive-network-graph-of-communications-with-visnetwork",
    "title": "Take-home_Ex02",
    "section": "Visualize Interactive Network Graph of Communications with visNetwork",
    "text": "Visualize Interactive Network Graph of Communications with visNetwork\n\nCommunication Network (As a whole)Narrowed down specific sub-typesPersons’ Communication\n\n\nThis is the baseline of the communication network based on the sub-types of organization, person, group, vessel, location and monitoring.\n\n\nCode\nnodes &lt;- mc3_nodes_final %&gt;%\n  distinct(name, .keep_all = TRUE) %&gt;%\n  mutate(id = name, label = name) %&gt;%\n  select(id, sub_type)\n\nnodes$group &lt;- nodes$sub_type\n\nedges &lt;- edges_edges_df %&gt;%\n  mutate(arrows = \"to\",\n         title = paste0(\"From: \", from, \"&lt;br&gt;To: \", to))\n\nvisNetwork(nodes, edges) %&gt;%\n  visEdges(smooth = FALSE, arrows = \"to\") %&gt;%\n  visNodes(font = list(size = 20)) %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visLegend()\n\n\n\n\n\n\n\n\nSince this is too big of a network, it will be narrowed down to organization, person and vessel based on the sub-types as the other 3 sub-types seems to show little correlation as shown in the network below.\nimportant_types are the 3 sub-types that we are looking more in-depth to see if there is any relationship between the 3 types. Making use of the group attribute that is created to clearly identify the different types of nodes inimportant_types.\nFor ease of selecting a particular entity, a dropdown list with all the entities (nodes) that are present in the graph is shown.\nMouse pointer hover action is also included on the graph so that the user can hover the mouse pointer over the graph to look at the possible different ‘groups’ of connectivity as well as the number of messages sent to each ‘group’.\n\nThe thicker the lines, the more messages are communicated between the sub-types.\nOutliers are isolated - no direct connections exclusively between them.\n\n\n\nCode\nimportant_types &lt;- c(\"Organization\", \"Person\", \"Location\")\nfiltered_nodes &lt;- mc3_nodes_final %&gt;%\n  filter(sub_type %in% important_types)\n\nfiltered_edges &lt;- edges_edges_df %&gt;%\n  filter(from %in% filtered_nodes$name, to %in% filtered_nodes$name)\n\nnodes &lt;- filtered_nodes %&gt;%\n  rename(id = name, group = sub_type, label_new = name)\n\nedges &lt;- filtered_edges %&gt;%\n  group_by(from, to) %&gt;%\n  summarise(value = n(), .groups = \"drop\") %&gt;%\n  mutate(arrows = \"to\", title = paste(\"Messages:\", value))\n\nvisNetwork(nodes, edges) %&gt;%\n  visGroups(groupname = \"Organization\", color = \"tomato\") %&gt;%\n  visGroups(groupname = \"Person\", color = \"skyblue\") %&gt;%\n  visGroups(groupname = \"Location\", color = \"lightgreen\") %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visPhysics(enabled = FALSE) %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  visLegend()\n\n\n\n\n\n\nOrganization to Person Communication\n\n\nCode\nimportant_types &lt;- c(\"Organization\", \"Person\")\nfiltered_nodes &lt;- mc3_nodes_final %&gt;%\n  filter(sub_type %in% important_types)\n\nfiltered_edges &lt;- edges_edges_df %&gt;%\n  filter(from %in% filtered_nodes$name, to %in% filtered_nodes$name)\n\nnodes &lt;- filtered_nodes %&gt;%\n  rename(id = name, group = sub_type, label_new = name)\n\nedges &lt;- filtered_edges %&gt;%\n  group_by(from, to) %&gt;%\n  summarise(value = n(), .groups = \"drop\") %&gt;%\n  mutate(arrows = \"to\", title = paste(\"Messages:\", value))\n\nvisNetwork(nodes, edges) %&gt;%\n  visGroups(groupname = \"Organization\", color = \"tomato\") %&gt;%\n  visGroups(groupname = \"Person\", color = \"skyblue\") %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visPhysics(enabled = FALSE) %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  visLegend()\n\n\n\n\n\n\n\n\n\n\nCode\nimportant_types &lt;- c(\"Person\")\nfiltered_nodes &lt;- mc3_nodes_final %&gt;%\n  filter(sub_type %in% important_types)\n\nfiltered_edges &lt;- edges_edges_df %&gt;%\n  filter(from %in% filtered_nodes$name, to %in% filtered_nodes$name)\n\nnodes &lt;- filtered_nodes %&gt;%\n  rename(id = name, group = sub_type, label_new = name)\n\nedges &lt;- filtered_edges %&gt;%\n  group_by(from, to) %&gt;%\n  summarise(value = n(), .groups = \"drop\") %&gt;%\n  mutate(arrows = \"to\", title = paste(\"Messages:\", value))\n\nvisNetwork(nodes, edges) %&gt;%\n  visGroups(groupname = \"Organization\", color = \"tomato\") %&gt;%\n  visGroups(groupname = \"Person\", color = \"skyblue\") %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visPhysics(enabled = FALSE) %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  visLegend()\n\n\n\n\n\n\n\n\n\n\n💡 Observations from Communication Network\n\n\n\nNemo Reef has the highest communications among the locations shown.\nMiranda Jordan and Liam Thomson do not have any direct connections between any people as they are isolated.\nBoss seems to be entity that has the most influence among the organizations as Boss has the most edges in terms of communication.\nV. Miesel Shipping seems to be the entity that has the most influence among the persons with the most edges as well in terms of communication.\n\n\n\n\n\nTime-based Pattern ShiftsComparison of Week 1 and Week 2 Communications\n\n\nTo detect behavioural changes between individuals and organizations based on the clusters forming or active nodes being isolated.\nFirstly, Filter the dates to week 1 (first 7 days) and week 2 (next 7 days) from 01-10-2040 to 07-10-2040 and from 08-10-2040 to 15-10-2040.\n\n\nCode\n# Ensure date_only is created from timestamp\nmc3_nodes_final$date_only &lt;- as.Date(mc3_nodes_final$timestamp)\n\nend_date &lt;- max(mc3_nodes_final$date_only, na.rm = TRUE)\n\nwk2_start &lt;- end_date - 7\nwk1_start &lt;- end_date - 14\n\n# Filter Week 1 (first 7 days)\nweek1 &lt;- mc3_nodes_final %&gt;%\n  filter(date_only &gt;= wk1_start & date_only &lt; wk2_start) %&gt;%\n  filter(type == \"Event\", label == \"Communication\")\n  \n# Filter Week 2 (next 7 days)\nweek2 &lt;- mc3_nodes_final %&gt;%\n  filter(date_only &gt;= wk2_start | date_only &lt;= end_date) %&gt;%\n  filter(type == \"Event\", label == \"Communication\")\n\n\n\n\n\n\nCode\nweek1_ids &lt;- week1$timestamp\nweek2_ids &lt;- week2$timestamp\n\nedges_week1 &lt;- edges_edges_df %&gt;% filter(timestamp %in% week1$timestamp)\nedges_week2 &lt;- edges_edges_df %&gt;% filter(timestamp %in% week2$timestamp)\n\n\nedges_wk1 &lt;- edges_week1 %&gt;% select(from, to)\nedges_wk2 &lt;- edges_week2 %&gt;% select(from, to)\n\nnodes_wk1 &lt;- data.frame(\n  id = unique(c(edges_week1$from, edges_week1$to)),\n  label = unique(c(edges_week1$from, edges_week1$to))\n)\n\nedges_wk1 &lt;- edges_week1 %&gt;%\n  select(from, to)\n\nnodes_wk2 &lt;- data.frame(\n  id = unique(c(edges_week2$from, edges_week2$to)),\n  label = unique(c(edges_week2$from, edges_week2$to))\n)\n\nedges_wk2 &lt;- edges_week2 %&gt;%\n  select(from, to)\n\nvisNetwork(nodes_wk1, edges_wk1, width = \"100%\", height = \"400px\") %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visPhysics(enabled = FALSE) %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  visLegend()\n\n\n\n\n\n\nCode\nvisNetwork(nodes_wk2, edges_wk2, width = \"100%\", height = \"400px\") %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visPhysics(enabled = FALSE) %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  visLegend()\n\n\n\n\n\n\n\n\n\n\n💡 Observations from Communication Time-based Pattern shifts\n\n\n\nAs an overall, most communication are reduced when transitioning to week 2."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#heatmap-by-grouped-type-organization-people-vessel",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#heatmap-by-grouped-type-organization-people-vessel",
    "title": "Take-home_Ex02",
    "section": "Heatmap by Grouped Type (Organization, People, Vessel)",
    "text": "Heatmap by Grouped Type (Organization, People, Vessel)\nThe heatmap is created to analyzed on the communication (i.e. number of messages) between the individuals as well as other subtypes as shown below. I will be narrowing it down to people’s communication to see if there is any suspicious activity going on between them.\n\nHeatmap (By type)Heatmap (Individuals)Top 5 people that communicates the most\n\n\n\n\nCode\nby_type &lt;- edges_with_meta %&gt;%\n  group_by(date, hour, sub_type) %&gt;%\n  summarise(message_count = n(), .groups = \"drop\")\n\nggplot(by_type, aes(x = hour, y = date, fill = message_count)) +\n  geom_tile() +\n  facet_wrap(~ sub_type) +\n  scale_fill_gradient(low = \"white\", high = \"purple\") +\n  theme_minimal() +\n  labs(\n    title = \"Communication Patterns by Type\",\n    x = \"Hour of Day\", y = \"Date\", fill = \"Count\"\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nby_person &lt;- edges_with_meta %&gt;%\n  filter(sub_type == \"Person\") %&gt;%\n  group_by(date, hour) %&gt;%\n  summarise(message_count = n(), .groups = \"drop\")\n\nggplot(by_person, aes(x = hour, y = date, fill = message_count)) +\n  geom_tile(color = \"white\") +\n  scale_fill_gradient(low = \"white\", high = \"purple\") +\n  theme_minimal() +\n  labs(\n    title = \"Communication Patterns (Senders Who Are Persons)\",\n    x = \"Hour of Day\", y = \"Date\", fill = \"Message Count\"\n  )\n\n\n\n\n\n\n\n\n\n\n\nCode\nby_person_detail &lt;- edges_with_meta %&gt;%\n  filter(sub_type == \"Person\") %&gt;%\n  group_by(date, hour, name) %&gt;%\n  summarise(message_count = n(), .groups = \"drop\")\n\nggplot(by_person_detail, aes(x = hour, y = date, fill = message_count)) +\n  geom_tile() +\n  facet_wrap(~ name) +\n  scale_fill_gradient(low = \"white\", high = \"purple\") +\n  theme_minimal() +\n  labs(\n    title = \"Message Timing for Each Person\",\n    x = \"Hour of Day\", y = \"Date\", fill = \"Count\"\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Count total messages sent by each person\ntop_5_people &lt;- edges_with_meta %&gt;%\n  filter(sub_type == \"Person\") %&gt;%\n  count(name, sort = TRUE) %&gt;%\n  slice_head(n = 5) %&gt;%\n  pull(name)  # extract just the names\n\ntop_people_data &lt;- edges_with_meta %&gt;%\n  filter(sub_type == \"Person\", name %in% top_5_people) %&gt;%\n  group_by(date, hour, name) %&gt;%\n  summarise(message_count = n(), .groups = \"drop\")\n\nggplot(top_people_data, aes(x = hour, y = date, fill = message_count)) +\n  geom_tile(color = \"white\") +\n  facet_wrap(~ name) +\n  scale_fill_gradient(low = \"white\", high = \"darkorange\") +\n  theme_minimal() +\n  labs(\n    title = \"Top 5 Most Active People: Communication Heatmap\",\n    x = \"Hour of Day\", y = \"Date\", fill = \"Messages Sent\"\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n💡 Observations from Communication Heatmap\n\n\n\nIt is shown that the top 5 individuals communicating are Sam, Davis, The Intern, Mrs Money and Boss has the most communication among all the individuals.\nThe communication is mostly done between the 8th and 10th hour of the day.\nThere isn’t really a distinguished date where they communicated the most.\n\n\n\n\n\n\nCode\ntop_5_people &lt;- edges_with_meta %&gt;%\n  filter(sub_type == \"Person\") %&gt;%\n  count(name, sort = TRUE) %&gt;%\n  slice_head(n = 5) %&gt;%\n  pull(name)\n\nreceiver_meta &lt;- mc3_nodes_final %&gt;%\n  select(id, to_name = name, to_type = sub_type)\n\nedges_top5 &lt;- edges_with_meta %&gt;%\n  left_join(receiver_meta, by = c(\"to\" = \"id\")) %&gt;%\n  filter(name %in% top_5_people, to_name %in% top_5_people)\n\nedge_list &lt;- edges_top5 %&gt;%\n  group_by(name, to_name) %&gt;%\n  summarise(value = n(), .groups = \"drop\") %&gt;%\n  rename(from = name, to = to_name)\n\nnodes_list &lt;- unique(c(edge_list$from, edge_list$to))\n\n# Create nodes dataframe\nnodes &lt;- data.frame(\n  id = nodes_list,\n  label = nodes_list,\n  title = nodes_list,\n  group = \"Person\",      \n  stringsAsFactors = FALSE\n)\n\nedges &lt;- edge_list %&gt;%\n  mutate(\n    width = value,               # edge thickness\n    label = as.character(value)  \n  )\n\nvisNetwork(nodes, edge_list, width = \"100%\") %&gt;%\n  visEdges(arrows = \"to\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  visLayout(randomSeed = 123) %&gt;%\n  visPhysics(stabilization = TRUE) %&gt;%\n  visLegend()\n\n\n\n\n\n\n\n💡 Observations from Communication Heatmap\n\n\n\nBoss is the suspected mastermind and most suspicious as everyone is sending him all the updates and messages to him and shows that he has the most communication among the 5 people."
  }
]