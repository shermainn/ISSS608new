---
title: "Hands-on_Ex04"
author: "Shermainn"
date: 2025-05-2025
date-modified: "last-modified"
categories: ["Hands-on Exercise"]
execute: 
  eval: true
  echo: true
  warning: false
---

# Overview

I will be using the same data across all 4 sections.

## Load Packages

```{r}
pacman::p_load(ggdist, ggridges, ggthemes,
               colorspace, tidyverse)
```

## Load Data

```{r}
Jakarta <- read_csv("data/COVID-19_DKI_Jakarta.csv")
```

# 1.0 Visualizing Ridgeline Plot

Use ggridges package to plot ridgeline plot with R. This package provide two main geom: `geom_ridgeline()` which thatkes height values directly to draw ridgelines and `geom_density_ridges()` to estimates data density and then draws the ridgelines.

::: panel-tabset
### Ridgeline Plot (with `geom_density_ridges()`)

```{r}
ggplot(Jakarta, 
       aes(x = Death, 
           y = City)) +
  geom_density_ridges(
    scale = 3,
    rel_min_height = 0.01,
    bandwidth = 3.4,
    fill = lighten("#7097BB", .3),
    color = "white"
  ) +
  scale_x_continuous(
    name = "Number of Deaths",
    expand = c(0, 0)
    ) +
  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +
  theme_ridges()
```

### Varying Fill Colours along x-axis

To change the colours, from solid to a gradient effect, use geom_ridgeline_gradient() or geom_density_ridges_gradient().

```{r}
ggplot(Jakarta, 
       aes(x = Death, 
           y = City,
           fill = ..x..)) +
  geom_density_ridges_gradient(
    scale = 3,
    rel_min_height = 0.01) +
  scale_fill_viridis_c(name = "Number of Deaths",
                       option = "C") +
  scale_x_continuous(
    name = "Number of Deaths",
    expand = c(0, 0)
    ) +
  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +
  theme_ridges()
```

### **Mapping probabilities directly onto colour**

Adding statistics into the plot such as `stat_density_ridges()` can be done as well by replacing `stat_density()` in the code chunk. To calculate the probabilities in the plot `after_stat(ecdf)` that calculates the empirical cumulative density function for the distribution of the number of deaths in Jakarta. The direction in the code chunk also changes the colours gradient when = -1 to the opposite colour gradient. Note: Include `calc_ecdf = TRUE` in `stat_density_ridges()` to help the function compute the ECDF (empirical cumulative distribution function).

```{r}
ggplot(Jakarta, 
       aes(x = Death, 
           y = City,
           fill = 0.5 - abs(0.5-after_stat(ecdf)))) +
  stat_density_ridges(geom = "density_ridges_gradient", 
                      calc_ecdf = TRUE) +
  scale_fill_viridis_c(name = "Number of deaths",
                       direction = -1) +
  theme_ridges()
```

### Quantile Lines

You can also use the stat(quantile) to plot the ridgeline plot as shown in the code chunk below:

-   Change from `scale_fill_viridis_c` to `scale_fill_viridis_d`

-   `stat(quantile)` refer to how many groups you want to divide your data into where I set `quantiles = 4`

```{r}
ggplot(Jakarta, 
       aes(x = Death, 
           y = City,
           fill = factor(stat(quantile)))) +
  stat_density_ridges(geom = "density_ridges_gradient", 
                      calc_ecdf = TRUE,
                      quantiles = 4,
                      quantile_lines = TRUE) +
  scale_fill_viridis_d(name = "Quartiles") +
  theme_ridges()
```

### Quantiles (in %)

You can also categorize in terms of percentages such as 2.5% and 97.5% as shwon in the figure below.

```{r}
ggplot(Jakarta, 
       aes(x = Death, 
           y = City,
           fill = factor(stat(quantile)))) +
  stat_density_ridges(geom = "density_ridges_gradient", 
                      calc_ecdf = TRUE,
                      quantiles = c(0.025, 0.975)) +
  scale_fill_manual(
    name = "Probability",
    values = c("#FF0000A0", "#A0A0A0A0", "#0000FFA0"),
    labels = c("(0, 0.025]", "(0.025, 0.975]", "(0.975, 1]")
  ) +
  theme_ridges()
```
:::

# 1.1 Visualizing Raincloud Plot

::: panel-tabset
### Half Eye graph

Use `stat_halfeye()` of `ggdist` package which will produce a half-density and slab-interval known as Half Eye plot. You can remove the slab interval by `setting .width = 0` and `point_colour = NA` . First 3 cities were used in this example by filtering based on top 3 cities.

```{r}
Jakarta_filtered <- Jakarta %>%
  count(City, sort = TRUE) %>%
  top_n(3, n) %>%
  inner_join(Jakarta, by = "City")

ggplot(Jakarta_filtered, 
       aes(x = City, 
           y = Death)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA)
```

### Add boxplot with `geom_boxplot()`

```{r}
Jakarta_filtered <- Jakarta %>%
  count(City, sort = TRUE) %>%
  top_n(3, n) %>%
  inner_join(Jakarta, by = "City")

ggplot(Jakarta_filtered, 
       aes(x = City, 
           y = Death)) +
  stat_halfeye(adjust = 0.5,
               justification = 0,
               .width = 0,
               point_colour = NA) +
        geom_boxplot(width = .1,
               outlier.shape = NA) 

```

### Dot Plot with stat_dots()

```{r}
Jakarta_filtered <- Jakarta %>%
  count(City, sort = TRUE) %>%
  top_n(3, n) %>%
  inner_join(Jakarta, by = "City")

ggplot(Jakarta_filtered, 
       aes(x = City, 
           y = Death)) +
  stat_halfeye(adjust = 0.5,
               justification = 0,
               .width = 0,
               point_colour = NA) +
        geom_boxplot(width = .1,
               outlier.shape = NA) +
    stat_dots(side = "left", 
            justification = 1.2, 
            binwidth = .5,
            dotsize = 2)
```

## Finishing Touch

`coord_flip()` is used to flip the chart horizontally to give a raincloud appearance.

```{r}
Jakarta_filtered <- Jakarta %>%
  count(City, sort = TRUE) %>%
  top_n(3, n) %>%
  inner_join(Jakarta, by = "City")

ggplot(Jakarta_filtered, 
       aes(x = City, 
           y = Death)) +
  stat_halfeye(adjust = 0.5,
               justification = 0,
               .width = 0,
               point_colour = NA) +
        geom_boxplot(width = .1,
               outlier.shape = NA) +
    stat_dots(side = "left", 
            justification = 1.2, 
            binwidth = .5,
            dotsize = 2) +
  coord_flip()
```
:::

# 2.0 Visual Statistical Analysis with ggstatsplot

### 1. Load packages

```{r}
pacman::p_load(ggstatsplot, tidyverse)
```

### 2. One-sample test: gghistostats() method

```{r}
set.seed(1234)

gghistostats(
  data = Jakarta,
  x = Death,
  type = "bayes",
  test.value = 60, #null hypothesis
  xlab = "Number of Deaths"
)
```

### 3. Two-sample mean test: ggbetweenstats() Method

The code chunk below is used to build a visual for a two-sample mean test for the number of deaths Jakarta's cities.

```{r}
ggbetweenstats(
  data = Jakarta,
  x = City, 
  y = Death,
  type = "np",
  messages = FALSE
)
```

### 4. One-way ANOVA test: ggbetweenstats() Method

Similarly, the same code chunk is used to create a One-way ANOVA test on number of deaths in Jakarta's cities.

```{r}
# Check the distribution after filtering
ggbetweenstats(
  data = Jakarta,
  x = City, 
  y = Death,
  type = "p",
  mean.ci = TRUE, 
  pairwise.comparisons = TRUE, 
  pairwise.display = "s",  # Show only significant comparisons
  p.adjust.method = "fdr",
  messages = FALSE
)

```

### 5. Significant Test of Correlation: ggscatterstats()

```{r}
ggscatterstats(
  data = Jakarta,
  x = Death,
  y = Recovered,
  marginal = FALSE,
  )
```

### 6. Significant Test of Association (Dependence): ggbarstats() methods

In the code chunk below: the number of deaths is binned into 3-class variable by using `cut()`.

```{r}
#| fig-width: 7
#| fig-height: 10
  
Jakarta_death <- Jakarta %>% 
  mutate(Death_bins = 
           cut(Death, 
               breaks = c(0,60,75,100))
)

ggbarstats(Jakarta_death, 
           x = Death_bins,
           y = City)
```

# 3.0 Visualizing Uncertainty

## 3.1 ggplot 2 methods

```{r}
pacman::p_load(plotly, crosstalk, DT, 
               ggdist, ggridges, colorspace,
               gganimate, tidyverse)
```

::: panel-tabset
### Point Estimates - ggplot2 methods

-   group_byb() of dplyr package - group observation by Recovered
-   summarise() computes the count of observations, mean and std.
-   mutate() derives standard error of Recovered by City and
-   output is saved as my_sum

```{r}
my_sum <- Jakarta %>%
  group_by(City) %>%
  summarise(
    n=n(),
    mean=mean(Recovered),
    sd=sd(Recovered)
    ) %>%
  mutate(se=sd/sqrt(n-1))
```

```{r}
knitr::kable(head(my_sum), format = 'html')
```

### Standard Error bars

```{r}
ggplot(my_sum) +
  geom_errorbar(
    aes(x=City, 
        ymin=mean-se, #error bars are computed
        ymax=mean+se), 
    width=0.2, 
    colour="black", 
    alpha=0.9, 
    linewidth=0.5) +
  geom_point(aes
           (x=City, 
            y=mean), 
           stat="identity", #need to indicate this!!
           color="red",
           size = 1.5,
           alpha=1) +
  ggtitle("Standard error of mean Recovered by City")
```

### Confidence Interval of point estimates

```{r}
ggplot(my_sum) +
  geom_errorbar(
    aes(x=reorder(City, -mean), 
        ymin=mean-1.96*se, 
        ymax=mean+1.96*se), 
    width=0.2, 
    colour="black", 
    alpha=0.9, 
    linewidth=0.5) +
  geom_point(aes
           (x=City, 
            y=mean), 
           stat="identity", 
           color="red",
           size = 1.5,
           alpha=1) +
  labs(x = "Recovered",  #labs is used to change x-axis label
       title = "95% confidence interval of mean Recovered by City")
```

### Interactive Error Bars

```{r}
shared_df = SharedData$new(my_sum)

bscols(widths = c(4,8),
       ggplotly((ggplot(shared_df) +
                   geom_errorbar(aes(
                     x=reorder(City, -mean),
                     ymin=mean-2.58*se, 
                     ymax=mean+2.58*se), 
                     width=0.2, 
                     colour="black", 
                     alpha=0.9, 
                     size=0.5) +
                   geom_point(aes(
                     x=City, 
                     y=mean, 
                     text = paste("City:", `City`, 
                                  "<br>N:", `n`,
                                  "<br>Avg. Number:", round(mean, digits = 2),
                                  "<br>95% CI:[", 
                                  round((mean-2.58*se), digits = 2), ",",
                                  round((mean+2.58*se), digits = 2),"]")),
                     stat="identity", 
                     color="red", 
                     size = 1.5, 
                     alpha=1) + 
                   xlab("City") + 
                   ylab("Average Number") + 
                   theme_minimal() + 
                   theme(axis.text.x = element_text(
                     angle = 45, vjust = 0.5, hjust=1)) +
                   ggtitle("99% Confidence interval of average /<br>Recovered by City")), 
                tooltip = "text"), 
       DT::datatable(shared_df, 
                     rownames = FALSE, 
                     class="compact", 
                     width="100%", 
                     options = list(pageLength = 10,
                                    scrollX=T), 
                     colnames = c("No. of people", 
                                  "Avg Recovered",
                                  "Std Dev",
                                  "Std Error")) %>%
         formatRound(columns=c('mean', 'sd', 'se'),
                     digits=2))
```
:::

## 3.2 ggdist package

::: panel-tabset
### Point Estimates - 95% Confidence Interval

```{r}
Jakarta %>%
  ggplot(aes(x = City, 
             y = Death)) +
  stat_pointinterval(.width = 0.95,
  .point = median,
  .interval = qi) +
  labs(
    title = "Visualising confidence intervals of mean deaths",
    subtitle = "Mean Point + Multiple-interval plot")
```

### Point Estimates - 99% Confidence Interval

```{r}
Jakarta %>%
  ggplot(aes(x = City, 
             y = Death)) +
  stat_pointinterval(.width = 0.99,
  .point = median,
  .interval = qi) +
  labs(
    title = "Visualising confidence intervals of mean deaths",
    subtitle = "Mean Point + Multiple-interval plot")
```
:::

Point Estimates - Visuals

```{r}
Jakarta %>%
  ggplot(aes(x = City, 
             y = Death)) +
  stat_gradientinterval(
    fill = "skyblue",
    show.legend = TRUE ) +
  labs(
    title = "Visualising confidence intervals of mean deaths",
    subtitle = "Gradient + interval plot")
```

## 3.3 Hypothetical Outcome Plots (HOPs)

### Install ungeviz package

```{r}
devtools::install_github("wilkelab/ungeviz")
```

```{r}
library(ungeviz)
```

HOPs

```{r}
ggplot(data = Jakarta, 
       (aes(x = factor(City), 
            y = Death))) +
  geom_point(position = position_jitter(
    height = 0.3, 
    width = 0.05), 
    size = 0.4, 
    color = "#0072B2", 
    alpha = 1/2) +
  geom_hpline(data = sampler(25, 
                             group = City), 
              height = 0.6, 
              color = "#D55E00") +
  theme_bw() + 
  transition_states(.draw, 1, 3)
```

# 4.0 Visualizing Models

```{r}
pacman::p_load(readxl, SmartEDA, tidyverse,
               ggstatsplot, easystats, tidymodels)
```

### Visualizing modelling variables

```{r}

Jakarta <- read.csv("data/COVID-19_DKI_Jakarta.csv", header = TRUE)

#colnames(Jakarta) <- c("Sub-district ID", "City", "District", #"Sub-district", "Positive", "Recovered", "Death")

ExpCatStat(Jakarta, Target = "Death", result = "Stat")

```

### Multipler Regression Model using lm()

```{r}
model <- lm(Death ~ City + Sub.district.ID + Positive + 
              Recovered + Death, data = Jakarta)
model
```

Check for Multicolinearity

```{r}
check_collinearity(model)

check_c <- check_collinearity(model)
plot(check_c)
```

### Checking Normality Assumption

```{r}
model1 <- lm(Death ~ City + Sub.district.ID + Positive + 
              Recovered + Death, data = Jakarta)
check_n <- check_normality(model1)
plot(check_n)
```

### Check for homogeneity of variances

```{r}
check_h <- check_heteroscedasticity(model1)
plot(check_h)
```

### Complete Check

```{r}
check_model(model1)
```

## Visualizing Regression Parameters

```{r}
library(parameters)

plot(parameters(model1))

```

```{r}
ggcoefstats(model1,   #visualize the parameters of regression model
            output = "plot")
```
