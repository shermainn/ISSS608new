---
title: "Hands-on_Ex04"
author: "Shermainn"
date: 05-05-2025
date-modified: "last-modified"
categories: ["Hands-on Exercise"]
execute: 
  eval: true
  echo: true
  warning: false
  
format:
  html:
    code-fold: true
    code-tools: true
---

# Overview

I will be using the same data across all 4 sections.

## Load Packages

```{r}
pacman::p_load(ggdist, ggridges, ggthemes,
               colorspace, tidyverse)
```

## Load Data

```{r}
Jakarta <- read_csv("data/COVID-19_DKI_Jakarta.csv")
```

# 1.0 Visualizing Ridgeline Plot

Use ggridges package to plot ridgeline plot with R. This package provide two main geom: `geom_ridgeline()` which thatkes height values directly to draw ridgelines and `geom_density_ridges()` to estimates data density and then draws the ridgelines.

::: panel-tabset
### Ridgeline Plot (with `geom_density_ridges()`)

```{r}
ggplot(Jakarta, 
       aes(x = Death, 
           y = City)) +
  geom_density_ridges(
    scale = 3,
    rel_min_height = 0.01,
    bandwidth = 3.4,
    fill = lighten("#7097BB", .3),
    color = "white"
  ) +
  scale_x_continuous(
    name = "Number of Deaths",
    expand = c(0, 0)
    ) +
  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +
  theme_ridges()
```

### Varying Fill Colours along x-axis

To change the colours, from solid to a gradient effect, use geom_ridgeline_gradient() or geom_density_ridges_gradient().

```{r}
ggplot(Jakarta, 
       aes(x = Death, 
           y = City,
           fill = ..x..)) +
  geom_density_ridges_gradient(
    scale = 3,
    rel_min_height = 0.01) +
  scale_fill_viridis_c(name = "Number of Deaths",
                       option = "C") +
  scale_x_continuous(
    name = "Number of Deaths",
    expand = c(0, 0)
    ) +
  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +
  theme_ridges()
```

### **Mapping probabilities directly onto colour**

Adding statistics into the plot such as `stat_density_ridges()` can be done as well by replacing `stat_density()` in the code chunk. To calculate the probabilities in the plot `after_stat(ecdf)` that calculates the empirical cumulative density function for the distribution of the number of deaths in Jakarta. The direction in the code chunk also changes the colours gradient when = -1 to the opposite colour gradient. Note: Include `calc_ecdf = TRUE` in `stat_density_ridges()` to help the function compute the ECDF (empirical cumulative distribution function).

```{r}
ggplot(Jakarta, 
       aes(x = Death, 
           y = City,
           fill = 0.5 - abs(0.5-after_stat(ecdf)))) +
  stat_density_ridges(geom = "density_ridges_gradient", 
                      calc_ecdf = TRUE) +
  scale_fill_viridis_c(name = "Number of deaths",
                       direction = -1) +
  theme_ridges()
```

### Quantile Lines

You can also use the stat(quantile) to plot the ridgeline plot as shown in the code chunk below:

-   Change from `scale_fill_viridis_c` to `scale_fill_viridis_d`

-   `stat(quantile)` refer to how many groups you want to divide your data into where I set `quantiles = 4`

```{r}
ggplot(Jakarta, 
       aes(x = Death, 
           y = City,
           fill = factor(stat(quantile)))) +
  stat_density_ridges(geom = "density_ridges_gradient", 
                      calc_ecdf = TRUE,
                      quantiles = 4,
                      quantile_lines = TRUE) +
  scale_fill_viridis_d(name = "Quartiles") +
  theme_ridges()
```

### Quantiles (in %)

You can also categorize in terms of percentages such as 2.5% and 97.5% as shwon in the figure below.

```{r}
ggplot(Jakarta, 
       aes(x = Death, 
           y = City,
           fill = factor(stat(quantile)))) +
  stat_density_ridges(geom = "density_ridges_gradient", 
                      calc_ecdf = TRUE,
                      quantiles = c(0.025, 0.975)) +
  scale_fill_manual(
    name = "Probability",
    values = c("#FF0000A0", "#A0A0A0A0", "#0000FFA0"),
    labels = c("(0, 0.025]", "(0.025, 0.975]", "(0.975, 1]")
  ) +
  theme_ridges()
```
:::

# 1.1 Visualizing Raincloud Plot

::: panel-tabset
### Half Eye graph

Use `stat_halfeye()` of `ggdist` package which will produce a half-density and slab-interval known as Half Eye plot. You can remove the slab interval by `setting .width = 0` and `point_colour = NA` . First 3 cities were used in this example by filtering based on top 3 cities.

```{r}
Jakarta_filtered <- Jakarta %>%
  count(City, sort = TRUE) %>%
  top_n(3, n) %>%
  inner_join(Jakarta, by = "City")

ggplot(Jakarta_filtered, 
       aes(x = City, 
           y = Death)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA)
```

### Add boxplot with `geom_boxplot()`

```{r}
Jakarta_filtered <- Jakarta %>%
  count(City, sort = TRUE) %>%
  top_n(3, n) %>%
  inner_join(Jakarta, by = "City")

ggplot(Jakarta_filtered, 
       aes(x = City, 
           y = Death)) +
  stat_halfeye(adjust = 0.5,
               justification = 0,
               .width = 0,
               point_colour = NA) +
        geom_boxplot(width = .1,
               outlier.shape = NA) 

```

### Dot Plot with stat_dots()

```{r}
Jakarta_filtered <- Jakarta %>%
  count(City, sort = TRUE) %>%
  top_n(3, n) %>%
  inner_join(Jakarta, by = "City")

ggplot(Jakarta_filtered, 
       aes(x = City, 
           y = Death)) +
  stat_halfeye(adjust = 0.5,
               justification = 0,
               .width = 0,
               point_colour = NA) +
        geom_boxplot(width = .1,
               outlier.shape = NA) +
    stat_dots(side = "left", 
            justification = 1.2, 
            binwidth = .5,
            dotsize = 2)
```

## Finishing Touch

`coord_flip()` is used to flip the chart horizontally to give a raincloud appearance.

```{r}
Jakarta_filtered <- Jakarta %>%
  count(City, sort = TRUE) %>%
  top_n(3, n) %>%
  inner_join(Jakarta, by = "City")

ggplot(Jakarta_filtered, 
       aes(x = City, 
           y = Death)) +
  stat_halfeye(adjust = 0.5,
               justification = 0,
               .width = 0,
               point_colour = NA) +
        geom_boxplot(width = .1,
               outlier.shape = NA) +
    stat_dots(side = "left", 
            justification = 1.2, 
            binwidth = .5,
            dotsize = 2) +
  coord_flip()
```
:::

# 2.0 Visual Statistical Analysis with ggstatsplot

### 1. Load packages

```{r}
pacman::p_load(ggstatsplot, tidyverse)
```

### 2. One-sample test: gghistostats() method

```{r}
set.seed(1234)

gghistostats(
  data = Jakarta,
  x = Death,
  type = "bayes",
  test.value = 60, #null hypothesis
  xlab = "Number of Deaths"
)
```

### 3. Two-sample mean test: ggbetweenstats() Method

The code chunk below is used to build a visual for a two-sample mean test for the number of deaths Jakarta's cities.

```{r}
ggbetweenstats(
  data = Jakarta,
  x = City, 
  y = Death,
  type = "np",
  messages = FALSE
)
```

### 4. One-way ANOVA test: ggbetweenstats() Method

Similarly, the same code chunk is used to create a One-way ANOVA test on number of deaths in Jakarta's cities.

```{r}
# Check the distribution after filtering
ggbetweenstats(
  data = Jakarta,
  x = City, 
  y = Death,
  type = "p",
  mean.ci = TRUE, 
  pairwise.comparisons = TRUE, 
  pairwise.display = "s",  # Show only significant comparisons
  p.adjust.method = "fdr",
  messages = FALSE
)

```

### 5. Significant Test of Correlation: ggscatterstats()

```{r}
ggscatterstats(
  data = Jakarta,
  x = Death,
  y = Recovered,
  marginal = FALSE,
  )
```

### 6. Significant Test of Association (Dependence): ggbarstats() methods

In the code chunk below: the number of deaths is binned into 3-class variable by using `cut()`.

```{r}
#| fig-width: 7
#| fig-height: 10
  
Jakarta_death <- Jakarta %>% 
  mutate(Death_bins = 
           cut(Death, 
               breaks = c(0,60,75,100))
)

ggbarstats(Jakarta_death, 
           x = Death_bins,
           y = City)
```

# 3.0 Visualizing Uncertainty

## 3.1 ggplot 2 methods

```{r}
pacman::p_load(plotly, crosstalk, DT, 
               ggdist, ggridges, colorspace,
               gganimate, tidyverse)
```

::: panel-tabset
### Point Estimates - ggplot2 methods

-   group_byb() of dplyr package - group observation by Recovered
-   summarise() computes the count of observations, mean and std.
-   mutate() derives standard error of Recovered by City and
-   output is saved as my_sum

```{r}
my_sum <- Jakarta %>%
  group_by(City) %>%
  summarise(
    n=n(),
    mean=mean(Recovered),
    sd=sd(Recovered)
    ) %>%
  mutate(se=sd/sqrt(n-1))
```

```{r}
knitr::kable(head(my_sum), format = 'html')
```

### Standard Error bars

```{r}
ggplot(my_sum) +
  geom_errorbar(
    aes(x=City, 
        ymin=mean-se, #error bars are computed
        ymax=mean+se), 
    width=0.2, 
    colour="black", 
    alpha=0.9, 
    linewidth=0.5) +
  geom_point(aes
           (x=City, 
            y=mean), 
           stat="identity", #need to indicate this!!
           color="red",
           size = 1.5,
           alpha=1) +
  ggtitle("Standard error of mean Recovered by City")
```

### Confidence Interval of point estimates

```{r}
ggplot(my_sum) +
  geom_errorbar(
    aes(x=reorder(City, -mean), 
        ymin=mean-1.96*se, 
        ymax=mean+1.96*se), 
    width=0.2, 
    colour="black", 
    alpha=0.9, 
    linewidth=0.5) +
  geom_point(aes
           (x=City, 
            y=mean), 
           stat="identity", 
           color="red",
           size = 1.5,
           alpha=1) +
  labs(x = "Recovered",  #labs is used to change x-axis label
       title = "95% confidence interval of mean Recovered by City")
```

### Interactive Error Bars

```{r}
shared_df = SharedData$new(my_sum)

bscols(widths = c(4,8),
       ggplotly((ggplot(shared_df) +
                   geom_errorbar(aes(
                     x=reorder(City, -mean),
                     ymin=mean-2.58*se, 
                     ymax=mean+2.58*se), 
                     width=0.2, 
                     colour="black", 
                     alpha=0.9, 
                     size=0.5) +
                   geom_point(aes(
                     x=City, 
                     y=mean, 
                     text = paste("City:", `City`, 
                                  "<br>N:", `n`,
                                  "<br>Avg. Number:", round(mean, digits = 2),
                                  "<br>95% CI:[", 
                                  round((mean-2.58*se), digits = 2), ",",
                                  round((mean+2.58*se), digits = 2),"]")),
                     stat="identity", 
                     color="red", 
                     size = 1.5, 
                     alpha=1) + 
                   xlab("City") + 
                   ylab("Average Number") + 
                   theme_minimal() + 
                   theme(axis.text.x = element_text(
                     angle = 45, vjust = 0.5, hjust=1)) +
                   ggtitle("99% Confidence interval of average /<br>Recovered by City")), 
                tooltip = "text"), 
       DT::datatable(shared_df, 
                     rownames = FALSE, 
                     class="compact", 
                     width="100%", 
                     options = list(pageLength = 10,
                                    scrollX=T), 
                     colnames = c("No. of people", 
                                  "Avg Recovered",
                                  "Std Dev",
                                  "Std Error")) %>%
         formatRound(columns=c('mean', 'sd', 'se'),
                     digits=2))
```
:::

## 3.2 ggdist package

::: panel-tabset
### Point Estimates - 95% Confidence Interval

```{r}
Jakarta %>%
  ggplot(aes(x = City, 
             y = Death)) +
  stat_pointinterval(.width = 0.95,
  .point = median,
  .interval = qi) +
  labs(
    title = "Visualising confidence intervals of mean deaths",
    subtitle = "Mean Point + Multiple-interval plot")
```

### Point Estimates - 99% Confidence Interval

```{r}
Jakarta %>%
  ggplot(aes(x = City, 
             y = Death)) +
  stat_pointinterval(.width = 0.99,
  .point = median,
  .interval = qi) +
  labs(
    title = "Visualising confidence intervals of mean deaths",
    subtitle = "Mean Point + Multiple-interval plot")
```
:::

Point Estimates - Visuals

```{r}
Jakarta %>%
  ggplot(aes(x = City, 
             y = Death)) +
  stat_gradientinterval(
    fill = "skyblue",
    show.legend = TRUE ) +
  labs(
    title = "Visualising confidence intervals of mean deaths",
    subtitle = "Gradient + interval plot")
```

## 3.3 Hypothetical Outcome Plots (HOPs)

### Install ungeviz package

```{r}
devtools::install_github("wilkelab/ungeviz")
```

```{r}
library(ungeviz)
```

HOPs

```{r}
ggplot(data = Jakarta, 
       (aes(x = factor(City), 
            y = Death))) +
  geom_point(position = position_jitter(
    height = 0.3, 
    width = 0.05), 
    size = 0.4, 
    color = "#0072B2", 
    alpha = 1/2) +
  geom_hpline(data = sampler(25, 
                             group = City), 
              height = 0.6, 
              color = "#D55E00") +
  theme_bw() + 
  transition_states(.draw, 1, 3)
```

# 4.0 Visualizing Models

```{r}
pacman::p_load(readxl, SmartEDA, tidyverse,
               ggstatsplot, easystats, tidymodels)
```

### Visualizing modelling variables

```{r}

Jakarta <- read.csv("data/COVID-19_DKI_Jakarta.csv", header = TRUE)

#colnames(Jakarta) <- c("Sub-district ID", "City", "District", #"Sub-district", "Positive", "Recovered", "Death")

ExpCatStat(Jakarta, Target = "Death", result = "Stat")

```

### Multipler Regression Model using lm()

```{r}
model <- lm(Death ~ City + Sub.district.ID + Positive + 
              Recovered + Death, data = Jakarta)
model
```

Check for Multicolinearity

```{r}
check_collinearity(model)

check_c <- check_collinearity(model)
plot(check_c)
```

### Checking Normality Assumption

```{r}
model1 <- lm(Death ~ City + Sub.district.ID + Positive + 
              Recovered + Death, data = Jakarta)
check_n <- check_normality(model1)
plot(check_n)
```

### Check for homogeneity of variances

```{r}
check_h <- check_heteroscedasticity(model1)
plot(check_h)
```

### Complete Check

```{r}
check_model(model1)
```

## Visualizing Regression Parameters

```{r}
ggcoefstats(model1,   #visualize the parameters of regression model
            output = "plot")
```

# 5.0 Funnel Plots for Fair Comparisons

## Load R packages

```{r}
pacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)
```

## Import Data

```{r}
covid19 <- read_csv("data/COVID-19_DKI_Jakarta.csv") %>%
  mutate_if(is.character, as.factor)
```

## 5.1 FunnelPlotR Methods

[**FunnelPlotR**](https://nhs-r-community.github.io/FunnelPlotR/) package uses ggplot to generate funnel plots. It requires a `numerator` (events of interest), `denominator` (population to be considered) and `group`. The key arguments selected for customisation are:

-   `limit`: plot limits (95 or 99).

-   `label_outliers`: to label outliers (true or false).

-   `Poisson_limits`: to add Poisson limits to the plot.

-   `OD_adjust`: to add overdispersed limits to the plot.

-   `xrange` and `yrange`: to specify the range to display for axes, acts like a zoom function.

-   Other aesthetic components such as graph title, axis labels etc.

```{r}
funnel_plot(
  .data = covid19,
  numerator = Positive,
  denominator = Death,
  group = `Sub-district`
)
```

Things to learn from the code chunk above.

-   `group` in this function is different from the scatterplot. Here, it defines the level of the points to be plotted i.e. Sub-district, District or City. If Cityc is chosen, there are only six data points.

-   By default, `data_type`argument is “SR”.

-   `limit`: Plot limits, accepted values are: 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution.

::: panel-tabset
### Makeover 1

+ `data_type` argument is used to change from default “SR” to “PR” (i.e. proportions). + `xrange` and `yrange` are used to set the range of x-axis and y-axis

```{r}
funnel_plot(
  .data = covid19,
  numerator = Death,
  denominator = Positive,
  group = `Sub-district`,
  data_type = "PR",     #<<
  xrange = c(0, 6500),  #<<
  yrange = c(0, 0.05)   #<<
)
```

### Makeover 2

-   `label = NA` argument is to removed the default label outliers feature.

-   `title` argument is used to add plot title.

-   `x_label` and `y_label` arguments are used to add/edit x-axis and y-axis titles.

```{r}
funnel_plot(
  .data = covid19,
  numerator = Death,
  denominator = Positive,
  group = `Sub-district`,
  data_type = "PR",   
  xrange = c(0, 6500),  
  yrange = c(0, 0.05),
  label = NA,
  title = "Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases", #<<           
  x_label = "Cumulative COVID-19 Positive Cases", #<<
  y_label = "Cumulative Fatality Rate"  #<<
)
```
:::

## 5.2 Fair Visual Comparison: ggplot 2 methods

```{r}
#basic fields
df <- covid19 %>%
  mutate(rate = Death / Positive) %>%
  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %>%
  filter(rate > 0)
#fit.mean
fit.mean <- weighted.mean(df$rate, 1/df$rate.se^2)

#Calculate upper and lower limits for 95% and 99.9% Confidence Interval
number.seq <- seq(1, max(df$Positive), 1)
number.ll95 <- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) 
number.ul95 <- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) 
number.ll999 <- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) 
number.ul999 <- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) 
dfCI <- data.frame(number.ll95, number.ul95, number.ll999, 
                   number.ul999, number.seq, fit.mean)
```

::: panel-tabset
### Static plot

```{r}
p <- ggplot(df, aes(x = Positive, y = rate)) +
  geom_point(aes(label=`Sub-district`), 
             alpha=0.4) +
  geom_line(data = dfCI, 
            aes(x = number.seq, 
                y = number.ll95), 
            size = 0.4, 
            colour = "grey40", 
            linetype = "dashed") +
  geom_line(data = dfCI, 
            aes(x = number.seq, 
                y = number.ul95), 
            size = 0.4, 
            colour = "grey40", 
            linetype = "dashed") +
  geom_line(data = dfCI, 
            aes(x = number.seq, 
                y = number.ll999), 
            size = 0.4, 
            colour = "grey40") +
  geom_line(data = dfCI, 
            aes(x = number.seq, 
                y = number.ul999), 
            size = 0.4, 
            colour = "grey40") +
  geom_hline(data = dfCI, 
             aes(yintercept = fit.mean), 
             size = 0.4, 
             colour = "grey40") +
  coord_cartesian(ylim=c(0,0.05)) +
  annotate("text", x = 1, y = -0.13, label = "95%", size = 3, colour = "grey40") + 
  annotate("text", x = 4.5, y = -0.18, label = "99%", size = 3, colour = "grey40") + 
  ggtitle("Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases") +
  xlab("Cumulative Number of COVID-19 Cases") + 
  ylab("Cumulative Fatality Rate") +
  theme_light() +
  theme(plot.title = element_text(size=12),
        legend.position = c(0.91,0.85), 
        legend.title = element_text(size=7),
        legend.text = element_text(size=7),
        legend.background = element_rect(colour = "grey60", linetype = "dotted"),
        legend.key.height = unit(0.3, "cm"))
p
```

### Interactive plot: plotly + ggplot2

```{r}
fp_ggplotly <- ggplotly(p,
  tooltip = c("label", 
              "x", 
              "y"))
fp_ggplotly
```
:::
