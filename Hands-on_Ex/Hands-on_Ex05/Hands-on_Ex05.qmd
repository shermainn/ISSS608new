---
title: "Hands-on_Ex05"
author: "Shermainn"
date: 2025-05-11
date-modified: "last-modified"
categories: ["Hands-on Exercise"]
execute: 
  eval: true
  echo: true
  warning: false

format:
  html:
    code-fold: true
    code-tools: true
---

# Overview

In this exercise, I will be learning how to model, analyze and visualize network data using R.

By the end of this hands-on exercise, I will be able to:

-   create graph object data frames, manipulate them using appropriate functions of *dplyr*, *lubridate*, and *tidygraph*,

-   build network graph visualisation using appropriate functions of *ggraph*,

-   compute network geometrics using *tidygraph*,

-   build advanced graph visualisation by incorporating the network geometrics, and

-   build interactive network visualisation using *visNetwork* package.

# Install and Load R Packages

```{r}
pacman::p_load(igraph, tidygraph, ggraph, 
               visNetwork, lubridate, clock,
               tidyverse, graphlayouts, 
               concaveman, ggforce)
```

# Data used in this exercise

There are 3 data sets to import from this exercise. One data set contains edges data, and another contains nodes data. To view the structure of the data frame, use `glimpse()` of **dplyr**.

```{r}
GAStech_nodes <- read_csv("data/GAStech_email_node.csv")
GAStech_edges <- read_csv("data/GAStech_email_edge-v2.csv")
```

```{r}
glimpse(GAStech_edges)
```

## Wrangle Time

```{r}
GAStech_edges <- GAStech_edges %>%
  mutate(SendDate = dmy(SentDate)) %>%
  mutate(Weekday = wday(SentDate,
                        label = TRUE,
                        abbr = FALSE))

glimpse(GAStech_edges)
```

[^1]

[^1]: Things to take note from the code chunk above

    -   Both dmy() and wday() are functions of lubridate package that is easier to work with dates and times

    -   dmy() - transform SentDate to Date data type and

    -   wday() - returns day of week as decimal number/ordered factor if label is TRUE. If FALSE, kept days spelled in full i.e. Monday. The function will create a new column in the data frame.

## Wrangle Attributes

```{r}
GAStech_edges_aggregated <- GAStech_edges %>%
  filter(MainSubject == "Work related") %>%
  group_by(source, target, Weekday) %>%
    summarise(Weight = n()) %>%
  filter(source!=target) %>%
  filter(Weight > 1) %>%
  ungroup()

glimpse(GAStech_edges_aggregated)
```

[^2]

[^2]: Things to learn from code chunk:

    -   filter(), group(), summarise() and ungroup() from dplyr package are used

    -   new field called weight has been added into the data frame

# Create Network Objects using tidygraph

2 functions of tidygraph package:

-   `tbl_graph()` - creates tbl_graph network object from nodes and edges data

-   `as_tbl_graph()` - converts network data and objects to a tbl_graph network.

The following list gives the packages/classes that can currently be converted to `tbl_graph`s, using the `as_tbl_graph` function:

-   `data.frame`, `list`, `matrix` from `base`

-   `igraph` from `igraph`

-   `network` from `network`

-   `dendrogram` and `hclust` from `stats`

-   `Node` from `data.tree`

-   `phylo` and `evonet` from `ape`

-   `graphNEL`, `graphAM`, `graphBAM` from `graph` (in Bioconductor)

-   wraps the multitude of graph constructors available in `igraph` and exports them under the `create_()` family of functions for deterministic constructors 

dplyr verbs in **tidygraph**:

-   `activate()` verb from **tidygraph** serves as a switch between tibbles for nodes and edges. All dplyr verbs applied to **tbl_graph** object are applied to the active tibble.

-   `.N()` function is used to gain access to the node data while manipulating the edge data. Similarly `.E()` will give you the edge data and `.G()` will give you the **tbl_graph** object itself.

-   Effects *outside of the currently active data*: `filter()`/`slice()` on node data will remove the edges terminating at the removed nodes and `arrange()` on nodes will change the indexes of the `to` and `from` column in the edge data.

-   `summarise()` and `do()` are not allowed as there is no clear interpretation of how alterations on the node and edge data with these verbs should be interpreted. If these operations are required I suggest applying them to a tibble representation and then joining the result back in.

-   `bind_rows()`, `bind_nodes()` and `bind_edges()` append nodes and edges to the graph respectively. When using `bind_edges()` , must contain valid `from` and `to` columns.

-   `bind_graphs()` allows you to combine multiple graphs in the same graph structure resulting in each original graph to become a component in the returned graph.

-   `graph_join()` can create edges between merged graphs and merges nodes using `full_join()` semantic and keeps individual edges from both graphs.

## Build tidygraph data model

```{r}
GAStech_graph <- tbl_graph(nodes = GAStech_nodes,
                           edges = GAStech_edges_aggregated, 
                           directed = TRUE)

GAStech_graph

GAStech_graph %>%
  activate(edges) %>%
  arrange(desc(Weight))

```

# Plotting Static Network Graphs with ggraph package

In a network graph, there are 3 aspects to a ggraph's network - nodes, edges and layouts.

::: panel-tabset
### Plot basic network graph

Using  [*ggraph()*](https://ggraph.data-imaginist.com/reference/ggraph.html), [*geom-edge_link()*](https://ggraph.data-imaginist.com/reference/geom_edge_link.html) and [*geom_node_point()*](https://ggraph.data-imaginist.com/reference/geom_node_point.html) to plot a network graph by using ***GAStech_graph***. You can also change the default network theme by adding `theme_graph()` to remove the x and y axes.

```{r}
ggraph(GAStech_graph) +
  geom_edge_link() +
  geom_node_point()

```

### Change default graph theme

```{r}
g <- ggraph(GAStech_graph) + 
  geom_edge_link(aes()) +
  geom_node_point(aes())

g + theme_graph()
```

### Change theme using `set_graph_style()`

```{r}
set_graph_style()

g <- ggraph(GAStech_graph) + 
  geom_edge_link(aes()) +
  geom_node_point(aes())

g
```

### Change colour of plot

```{r}
g <- ggraph(GAStech_graph) + 
  geom_edge_link(aes(colour = 'grey50')) +
  geom_node_point(aes(colour = 'grey40'))

g + theme_graph(background = 'grey10',
                text_colour = 'white')
```

### Layouts

Layout argument is used to define the layout used. Different types of layout includes: star, circle, nicely (default), dh, gem , graphopt, grid, mds, spahere, randomly, fr, kk, drl, lgl.\
\
![Different layouts supported by ggraph()](https://r4va.netlify.app/chap27/img/image4.jpg)

```{r}
g <- ggraph(GAStech_graph, 
            layout = "lgl") +
  geom_edge_link(aes()) +
  geom_node_point(aes())

g + theme_graph()
```

### Modify network nodes

```{r}
g <- ggraph(GAStech_graph, 
            layout = "fr") + 
  geom_edge_link(aes()) +
  geom_node_point(aes(colour = Department, 
                      size = 3))

g + theme_graph()
```

[^3]

### Modify Edges

```{r}
g <- ggraph(GAStech_graph, 
            layout = "nicely") +
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 3)

g + theme_graph()
```

[^4]
:::

[^3]: Things to learn from the code chunk above:

    -   *geom_node_point* is equivalent in functionality to *geo_point* of **ggplot2**. It allows for simple plotting of nodes in different shapes, colours and sizes. In the codes chnuks above colour and size are used.

[^4]: Things to learn from code chunks above:\
    - *geom_edge_link* draws edges in the simplest way - as straight lines between the start and end nodes. But, it can do more that that. In the example above, argument *width* is used to map the width of the line in proportional to the Weight attribute and argument alpha is used to introduce opacity on the line.

# Facet Graphs using ggraph

There are three functions in ggraph to implement faceting, they are:

-   [*facet_nodes()*](https://r4va.netlify.app/chap27) whereby edges are only draw in a panel if both terminal nodes are present here,

-   [*facet_edges()*](https://ggraph.data-imaginist.com/reference/facet_edges.html) whereby nodes are always drawn in al panels even if the node data contains an attribute named the same as the one used for the edge facetting, and

-   [*facet_graph()*](https://ggraph.data-imaginist.com/reference/facet_graph.html) faceting on two variables simultaneously.

::: panel-tabset
### Facet_edges() - Default

```{r}
set_graph_style()

g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 2)

g + facet_edges(~Weekday)
```

### Facet graph - add Theme

-   Change the position of the legend

```{r}
set_graph_style()

g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 2) +
  theme(legend.position = 'bottom')
  
g + facet_edges(~Weekday)
```

### Framed facet graph

-   Add frames to each graph

```{r}
set_graph_style() 

g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 2)
  
g + facet_edges(~Weekday) +
  th_foreground(foreground = "grey80",  
                border = TRUE) +
  theme(legend.position = 'bottom')
```

### Facet-nodes()

```{r}
set_graph_style()

g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 2)
  
g + facet_nodes(~Department)+
  th_foreground(foreground = "grey80",  
                border = TRUE) +
  theme(legend.position = 'bottom')
```
:::

# Network Metric Analysis

Centrality measures are a collection of statistical indices use to describe the relative important of the actors are to a network. There are four well-known centrality measures, namely:

1.  degree,

2.  betweenness,

3.  closeness and

4.  eigenvector.

```{r}
g <- GAStech_graph %>%
  mutate(betweenness_centrality = centrality_betweenness()) %>%
  ggraph(layout = "fr") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department,
            size=betweenness_centrality))
g + theme_graph()
```

[^5]

[^5]: Things to learn from the code chunk above:

    -   *mutate()* of **dplyr** is used to perform the computation.

    -   the algorithm used, on the other hand, is the *centrality_betweenness()* of **tidygraph**.

### **Visualising network metrics**

-   tidygraph algorithm can be accessed directly in ggraph calls.

```{r}
g <- GAStech_graph %>%
  ggraph(layout = "fr") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department, 
                      size = centrality_betweenness()))
g + theme_graph()
```

### **Visualising Community**

tidygraph package inherits many of the community detection algorithms imbedded into igraph and makes them available to us. Functions can be found in [here](https://tidygraph.data-imaginist.com/reference/group_graph.html).

```{r}
g <- GAStech_graph %>%
  mutate(community = as.factor(
    group_edge_betweenness(
      weights = Weight, 
      directed = TRUE))) %>%
  ggraph(layout = "fr") + 
  geom_edge_link(
    aes(
      width=Weight), 
    alpha=0.2) +
  scale_edge_width(
    range = c(0.1, 5)) +
  geom_node_point(
    aes(colour = community))  

g + theme_graph()
```

### Revised community network

```{r}
#download ggforce and concaveman package first

g <- GAStech_graph %>%
  activate(nodes) %>%
  mutate(community = as.factor(
    group_optimal(weights = Weight)),
         betweenness_measure = centrality_betweenness()) %>%
  ggraph(layout = "fr") +
  geom_mark_hull(
    aes(x, y, 
        group = community, 
        fill = community),  
    alpha = 0.2,  
    expand = unit(0.3, "cm"),  # Expand
    radius = unit(0.3, "cm")  # Smoothness
  ) + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(fill = Department,
                      size = betweenness_measure),
                      color = "black",
                      shape = 21)
  
g + theme_graph()
```

# Interactive Network Graph with visNetwork

-   [visNetwork()](http://datastorm-open.github.io/visNetwork/) is a R package for network visualization, using [vis.js](http://visjs.org/) javascript library.

-   *visNetwork()* function uses a nodes list and edges list to create an interactive graph.

    -   The nodes list must include an “id” column, and the edge list must have “from” and “to” columns.

    -   The function also plots the labels for the nodes, using the names of the actors from the “label” column in the node list.

<!-- -->

-   The resulting graph is fun to play around with.

    -   You can move the nodes and the graph will use an algorithm to keep the nodes properly spaced.

    -   You can also zoom in and out on the plot and move it around to re-center it.

### 1. Prep Data

```{r}
GAStech_edges_aggregated <- GAStech_edges %>%
  left_join(GAStech_nodes, by = c("sourceLabel" = "label")) %>%
  rename(from = id) %>%
  left_join(GAStech_nodes, by = c("targetLabel" = "label")) %>%
  rename(to = id) %>%
  filter(MainSubject == "Work related") %>%
  group_by(from, to) %>%
    summarise(weight = n()) %>%
  filter(from!=to) %>%
  filter(weight > 1) %>%
  ungroup()
```

### 2. Plot network graph - layout

```{r}
visNetwork(GAStech_nodes, 
           GAStech_edges_aggregated)

visNetwork(GAStech_nodes,
           GAStech_edges_aggregated) %>%
  visIgraphLayout(layout = "layout_with_fr") 
```

### 3. Visual Attributes - nodes

-   Colours nodes according to values of the ***group*** field.

```{r}
GAStech_nodes <- GAStech_nodes %>%
  rename(group = Department) 

visNetwork(GAStech_nodes,
           GAStech_edges_aggregated) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visLegend() %>%
  visLayout(randomSeed = 123)
```

###  **Visual attributes - Edges**

-   `isEdges()` is used to symbolise the edges:

    \- The argument *arrows* is used to define where to place the arrow.\
    - The *smooth* argument is used to plot the edges using a smooth curve.

```{r}
visNetwork(GAStech_nodes,
           GAStech_edges_aggregated) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", 
           smooth = list(enabled = TRUE, 
                         type = "curvedCW")) %>%
  visLegend() %>%
  visLayout(randomSeed = 123)
```

### Interactivity

*visOptions()* is used to incorporate interactivity features in the data visualisation.

-   The argument *highlightNearest* highlights nearest when clicking a node.

-   The argument *nodesIdSelection* adds an id node selection creating an HTML select element.

```{r}
visNetwork(GAStech_nodes,
           GAStech_edges_aggregated) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visOptions(highlightNearest = TRUE,
             nodesIdSelection = TRUE) %>%
  visLegend() %>%
  visLayout(randomSeed = 123)
```
